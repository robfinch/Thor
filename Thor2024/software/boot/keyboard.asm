#==============================================================================
# Keyboard stuff
#
# KeyState2_
# 876543210
# ||||||||+ = shift
# |||||||+- = alt
# ||||||+-- = control
# |||||+--- = numlock
# ||||+---- = capslock
# |||+----- = scrolllock
# ||+------ =
# |+------- = 
# +-------- = extended
#
#==============================================================================

	.set KEYBD,0xFEDC0000
	.set _KeyState1,0xFFFC0420
	.set _KeyState2,0xFFFC0421
	.set _KeybdEcho,0xFFFC0422
	.set KeybdWaitFlag,0xFFFC0423
	.set KeybdLEDs,0xFFFC0424
	.set SC_F12,7
	.set SC_C,0x21
	.set SC_T,0x2c
	.set SC_Z,0x1a
	.set SC_KEYUP,0xf0
	.set SC_EXTEND,0xE0
	.set SC_CTRL,0x14
	.set SC_RSHIFT,0x59
	.set SC_NUMLOCK,0x77
	.set SC_SCROLLLOCK,0x7E
	.set SC_CAPSLOCK,0x58
	.set SC_ALT,0x11
	.set SC_LSHIFT,0x12
	.set SC_DEL,0x71				# extend
	.set SC_LCTRL,0x58
	.set SC_TAB,0x0D

	.text
_KeybdInit:
	stb r0,_KeyState1
	stb r0,_KeyState2
	ret

_KeybdGetStatus:
	ldt.io a1,KEYBD+4
	ret

# Get the scancode from the keyboard port

_KeybdGetScancode:
	ldi a1,0
	ldt.io a1,KEYBD				# get the scan code
	stt.io r0,KEYBD+4			# clear receive register
	ret

# Recieve a byte from the keyboard, used after a command is sent to the
# keyboard in order to wait for a response.

KeybdRecvByte:
	push a3
	ldi a3,100					# wait up to 1s
.0003:
	bsr	_KeybdGetStatus	# wait for response from keyboard
	blt a1,r0,.0004			# is input buffer full ? yes, branch
	bsr	Wait10ms				# wait a bit
	sub a3,a3,1
	bgt a3,a0,.0003			# go back and try again
	pop a3
	ldi a1,-1
	ret
.0004:
	bsr	_KeybdGetScancode
	pop a3
	ret

# Wait until the keyboard transmit is complete

KeybdWaitTx:
	push a3
	ldi a3,100		# wait a max of 1s
.0001:
	bsr	_KeybdGetStatus
	bbs a1,6,.0002	# check for transmit complete bit
	bsr	Wait10ms		# delay a little bit
	sub a3,a3,1
	bgt a3,r0,.0001	# go back and try again
	pop a3
	ldi a1,-1
	ret
.0002:
	pop a3
	ldi a1,0
	ret


#------------------------------------------------------------------------------
# Get key pending status into a1
#------------------------------------------------------------------------------

CheckForKey:
	ldt.io a1,KEYBD+4
	lsr a1,a1,7
	and a1,a1,1
	ret

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

GetKey:
	push a0,a2
	bsr	KeybdGetCharWait
	ldb a2,_KeybdEcho			# is keyboard echo on ?
	beq a2,r0,.0001
	bne a1,'\r',.0002
	bsr CRLF							# convert CR keystroke into CRLF
.0002:
	bsr DisplayChar
.0001:
	pop a0,a2
	ret


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

KeybdGetCharNoWait:
	stb r0,KeybdWaitFlag
	bra	KeybdGetChar

KeybdGetCharWait:
	ldi a1,-1
	stb a1,KeybdWaitFlag

KeybdGetChar:
	push a0
B0003:
	bsr	_KeybdGetStatus			# check keyboard status for key available
	blt a1,r0,.0006					# yes, go process
	ldb a1,KeybdWaitFlag		# are we willing to wait for a key ?
	blt a1,r0,B0003					# yes, branch back
	ldi a1,-1								# flag no char available
	ret
.0006:
	bsr	_KeybdGetScancode
.0001:
	ldi a0,1
	stt.io a0,leds
	beq a1,SC_KEYUP,doKeyup
	beq a1,SC_EXTEND,doExtend
	beq a1,SC_CTRL,doCtrl
	beq a1,SC_LSHIFT,doShift
	beq a1,SC_RSHIFT,doShift
	beq a1,SC_NUMLOCK,doNumLock
	beq a1,SC_CAPSLOCK,doCapsLock
	beq a1,SC_SCROLLLOCK,doScrollLock
	beq a1,SC_ALT,doAlt
	ldb a0,_KeyState1			# check key up/down
	stb r0,_KeyState1			# clear keyup status
	bne a0,r0,B0003				# ignore key up
	beq a1,SC_TAB,doTab
B0013:
	ldb a0,_KeyState2
	bge a0,r0,.0010				# is it extended code ?
	and a0,a0,0x7f				# clear extended bit
	stb a0,_KeyState2
	stb r0,_KeyState1			# clear keyup
	lda a0,_keybdExtendedCodes
	ldb a1,[a0+a1]
	bra	.0008
.0010:
	bbc a0,2,.0009				# is it CTRL code ?
	and a1,a1,0x7f
	lda	a0,_keybdControlCodes
	ldb a1,[a0+a1]
	bra	.0008
.0009:
	bbc a0,0,.0007				# is it shift down ?
	lda	a0,_shiftedScanCodes
	ldb a1,[a0+a1]
	bra	.0008
.0007:
	lda	a0,_unshiftedScanCodes
	ldb a1,[a0+a1]
	ldi a0,0x0202
	stt.io a0,leds
.0008:
	ldi a0,0x0303
	stt.io a0,leds
	pop a0
	ret
doKeyup:
	ldi a0,-1
	stb a0,_KeyState1
	bra	B0003
doExtend:
	ldb a0,_KeyState2
	or a0,a0,0x80
	stb a0,_KeyState2
	bra	B0003
doCtrl:
	ldb a1,_KeyState1
	stb r0,_KeyState1
	bge a1,r0,.0004
	ldb a0,_KeyState2
	and a0,a0,0xfb
	stb a0,_KeyState2
	bra	B0003
.0004:
	ldb a0,_KeyState2
	or a0,a0,4
	stb a0,_KeyState2
	bra	B0003
doAlt:
	ldb a1,_KeyState1
	stb r0,_KeyState1
	bge a1,r0,.0011
	ldb a0,_KeyState2
	and a0,a0,0xfd
	stb a0,_KeyState2
	bra	B0003
.0011:
	ldb a0,_KeyState2
	or a0,a0,2
	stb a0,_KeyState2
	bra	B0003
doTab:
	push a1
	ldb a1,_KeyState2
	bbc a1,0,.0012				# is ALT down ?
#    	inc     _iof_switch
	pop a1
  bra B0003
.0012:
	pop a1
  bra B0013
doShift:
	ldb a1,_KeyState1
	stb r0,_KeyState1
	bge a1,r0,.0005
	ldb a0,_KeyState2
	and a0,a0,0xfe
	stb a0,_KeyState2
	bra	B0003
.0005:
	ldb a0,_KeyState2
	or a0,a0,1
	stb a0,_KeyState2
	bra	B0003
doNumLock:
	ldb a0,_KeyState2
	xor a0,a0,16
	stb a0,_KeyState2
	bsr	KeybdSetLEDStatus
	bra	B0003
doCapsLock:
	ldb a0,_KeyState2
	xor a0,a0,32
	stb a0,_KeyState2
	bsr	KeybdSetLEDStatus
	bra	B0003
doScrollLock:
	ldb a0,_KeyState2
	xor a0,a0,64
	stb a0,_KeyState2
	bsr	KeybdSetLEDStatus
	bra	B0003

KeybdSetLEDStatus:
	push a0,a1
	stb r0,KeybdLEDs	
	ldb a0,_KeyState2
	bbc a0,4,.0002
	ldi a1,2
	stb a1,KeybdLEDs
.0002:
	bbc a0,5,.0003
	ldb a1,KeybdLEDs
	or a1,a1,4
	stb a1,KeybdLEDs
.0003:
	bbc a0,6,.0004
	ldb a1,KeybdLEDs
	or a1,a1,1
	stb a1,KeybdLEDs
.0004:
	ldi a1,0xED
	bsr	KeybdSendByte
	bsr	KeybdWaitTx
	bsr	KeybdRecvByte
	blt a1,r0,.0001
#		cmp		#$FA,d1
	ldb a1,KeybdLEDs
	bsr	KeybdSendByte
	bsr	KeybdWaitTx
	bsr	KeybdRecvByte
.0001:
	pop a0,a1
	ret

KeybdSendByte:
	stt.io a1,KEYBD
	ret
	
Wait10ms:
	push a0
	ldi a0,1000
.0001:
	sub a0,a0,a1
	bgt a0,r0,.0001
	pop a0
	ret


		.rodata
#--------------------------------------------------------------------------
# PS2 scan codes to ascii conversion tables.
#--------------------------------------------------------------------------

_unshiftedScanCodes:
	.byte	0x2e,0xa9,0x2e,0xa5,0xa3,0xa1,0xa2,0xac
	.byte	0x2e,0xaa,0xa8,0xa6,0xa4,0x09,0x60,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x71,0x31,0x2e
	.byte	0x2e,0x2e,0x7a,0x73,0x61,0x77,0x32,0x2e
	.byte	0x2e,0x63,0x78,0x64,0x65,0x34,0x33,0x2e
	.byte	0x2e,0x20,0x76,0x66,0x74,0x72,0x35,0x2e
	.byte	0x2e,0x6e,0x62,0x68,0x67,0x79,0x36,0x2e
	.byte	0x2e,0x2e,0x6d,0x6a,0x75,0x37,0x38,0x2e
	.byte	0x2e,0x2c,0x6b,0x69,0x6f,0x30,0x39,0x2e
	.byte	0x2e,0x2e,0x2f,0x6c,0x3b,0x70,0x2d,0x2e
	.byte	0x2e,0x2e,0x27,0x2e,0x5b,0x3d,0x2e,0x2e
	.byte	0xad,0x2e,0x0d,0x5d,0x2e,0x5c,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
	.byte	0x98,0x7f,0x92,0x2e,0x91,0x90,0x1b,0xaf
	.byte	0xab,0x2e,0x97,0x2e,0x2e,0x96,0xae,0x2e

	.byte	0x2e,0x2e,0x2e,0xa7,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0xfa,0x2e,0x2e,0x2e,0x2e,0x2e

_shiftedScanCodes:
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x51,0x21,0x2e
	.byte	0x2e,0x2e,0x5a,0x53,0x41,0x57,0x40,0x2e
	.byte	0x2e,0x43,0x58,0x44,0x45,0x24,0x23,0x2e
	.byte	0x2e,0x20,0x56,0x46,0x54,0x52,0x25,0x2e
	.byte	0x2e,0x4e,0x42,0x48,0x47,0x59,0x5e,0x2e
	.byte	0x2e,0x2e,0x4d,0x4a,0x55,0x26,0x2a,0x2e
	.byte	0x2e,0x3c,0x4b,0x49,0x4f,0x29,0x28,0x2e
	.byte	0x2e,0x3e,0x3f,0x4c,0x3a,0x50,0x5f,0x2e
	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e

	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e

# control
_keybdControlCodes:
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x11,0x21,0x2e
	.byte	0x2e,0x2e,0x1a,0x13,0x01,0x17,0x40,0x2e
	.byte	0x2e,0x03,0x18,0x04,0x05,0x24,0x23,0x2e
	.byte	0x2e,0x20,0x16,0x06,0x14,0x12,0x25,0x2e
	.byte	0x2e,0x0e,0x02,0x08,0x07,0x19,0x5e,0x2e
	.byte	0x2e,0x2e,0x0d,0x0a,0x15,0x26,0x2a,0x2e
	.byte	0x2e,0x3c,0x0b,0x09,0x0f,0x29,0x28,0x2e
	.byte	0x2e,0x3e,0x3f,0x0c,0x3a,0x10,0x5f,0x2e
	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e

_keybdExtendedCodes:
	.byte	0x2e,0x2e,0x2e,0x2e,0xa3,0xa1,0xa2,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
	.byte	0x98,0x99,0x92,0x2e,0x91,0x90,0x2e,0x2e
	.byte	0x2e,0x2e,0x97,0x2e,0x2e,0x96,0x2e,0x2e


