Sections:
00: ".bss" (0-A)
01: ".text" (0-325)


Source: "serial.asm"
                                    	     1: # ============================================================================
                                    	     2: #        __
                                    	     3: #   \\__/ o\    (C) 2022-2023  Robert Finch, Waterloo
                                    	     4: #    \  __ /    All rights reserved.
                                    	     5: #     \/_//     robfinch<remove>@finitron.ca
                                    	     6: #       ||
                                    	     7: #  
                                    	     8: #
                                    	     9: # Serial port routines for a WDC6551 compatible circuit.
                                    	    10: #
                                    	    11: # ============================================================================
                                    	    12: #
                                    	    13: 	.bss
00:0000000000000000 00              	    14: 	.space	10
00:0000000000000001 *
                                    	    15: .set XON,0x11
                                    	    16: .set XOFF,0x13
                                    	    17: .set ACIA_RX,0xFED00000
                                    	    18: .set ACIA_TX,0xFED00000
                                    	    19: .set ACIA_STAT,0xFED00004
                                    	    20: .set ACIA_CMD,0xFED00008
                                    	    21: .set ACIA_CTRL,0xFED0000C
                                    	    22: .set SerTailRcv,0xFFFC0000
                                    	    23: .set SerHeadRcv,0xFFFC0004
                                    	    24: .set SerTailXmit,0xFFFC0008
                                    	    25: .set SerHeadXmit,0xFFFC000C
                                    	    26: .set SerRcvXon,0xFFFC0010
                                    	    27: .set SerRcvXoff,0xFFFC0011
                                    	    28: .set SerRcvBuf,0xFFFC1000
                                    	    29: .set uart,0xFED00000
                                    	    30: 
                                    	    31: 	.text
                                    	    32: #------------------------------------------------------------------------------
                                    	    33: # Initialize serial port.
                                    	    34: #
                                    	    35: # Clear buffer indexes. Two bytes are used for the buffer index even though
                                    	    36: # only a single byte is needed. This is for convenience in calculating the
                                    	    37: # number of characters in the buffer, done later. The upper byte remains at
                                    	    38: # zero.
                                    	    39: # The port is initialized for 9600 baud, 1 stop bit and 8 bits data sent.
                                    	    40: # The internal baud rate generator is used.
                                    	    41: #
                                    	    42: # Parameters:
                                    	    43: #		none
                                    	    44: # Modifies:
                                    	    45: #		a0
                                    	    46: # Returns:
                                    	    47: #		none
                                    	    48: #------------------------------------------------------------------------------
                                    	    49: 
                                    	    50: InitSerial:
                                    	    51: SerialInit:
01:0000000000000000 52008000007C0400	    52: 	stt		r0,SerHeadRcv
01:0000000000000008 FCFF
01:000000000000000A 52000000007C0000	    53: 	stt		r0,SerTailRcv
01:0000000000000012 FCFF
01:0000000000000014 52008001007C0C00	    54: 	stt		r0,SerHeadXmit
01:000000000000001C FCFF
01:000000000000001E 52000001007C0800	    55: 	stt		r0,SerTailXmit
01:0000000000000026 FCFF
01:0000000000000028 50000002007C1000	    56: 	stb		r0,SerRcvXon
01:0000000000000030 FCFF
01:0000000000000032 50002002007C1100	    57: 	stb		r0,SerRcvXoff
01:000000000000003A FCFF
                                    	    58: #	lda		COREID
                                    	    59: #sini1:
                                    	    60: #	cmpa	IOFocusID
                                    	    61: #	bne		sini1
                                    	    62: #	orcc	#$290						; mask off interrupts
                                    	    63: #	ldd		#ACIA_MMU				; map ACIA into address space
                                    	    64: #	std		MMU
01:000000000000003C 8400480000      	    65: 	ldi	a0,0x09					# dtr,rts active, rxint enabled (bit 1=0), no parity
01:0000000000000041 D2000001007C0800	    66: 	stt.io a0,ACIA_CMD
01:0000000000000049 D0FE
01:000000000000004B 8400F000007C1E00	    67: 	ldi	a0,0x6001E			# baud 9600, 1 stop bit, 8 bit, internal baud gen
01:0000000000000053 0600
01:0000000000000055 D2008001007C0C00	    68: 	stt.io a0,ACIA_CTRL		# disable fifos (bit zero, one), reset fifos
01:000000000000005D D0FE
                                    	    69: #	ldd		#$000F00				; map out ACIA
                                    	    70: #	std		MMU
01:000000000000005F A304000000      	    71: 	ret
                                    	    72: 
                                    	    73: #------------------------------------------------------------------------------
                                    	    74: # Calculate number of character in input buffer.
                                    	    75: #
                                    	    76: # Parameters:
                                    	    77: #		none
                                    	    78: # Returns:
                                    	    79: #		a0 = number of bytes in buffer.
                                    	    80: #------------------------------------------------------------------------------
                                    	    81: 
                                    	    82: SerialRcvCount:
01:0000000000000064 3661000001      	    83: 	push a1,a2
01:0000000000000069 8F00000000      	    84: 	mov	a0,r0
01:000000000000006E 45010000007C0000	    85: 	ldtu a1,SerTailRcv
01:0000000000000076 FCFF
01:0000000000000078 C5018000007C0400	    86: 	ldtu a2,SerHeadRcv
01:0000000000000080 FCFF
01:0000000000000082 8240182800      	    87: 	sub	a0,a1,a2
01:0000000000000087 2920001400      	    88: 	bge	a0,r0,.srcXit
01:000000000000008C 8400008000      	    89: 	ldi	a0,0x1000
01:0000000000000091 C5018000007C0400	    90: 	ldtu a2,SerHeadRcv
01:0000000000000099 FCFF
01:000000000000009B 45010000007C0000	    91: 	ldtu a1,SerTailRcv
01:00000000000000A3 FCFF
01:00000000000000A5 8220182800      	    92: 	sub	a0,a0,a2
01:00000000000000AA 8220102000      	    93: 	add	a0,a0,a1
                                    	    94: .srcXit:
01:00000000000000AF 3761000001      	    95: 	pop a1,a2
01:00000000000000B4 A304000000      	    96: 	ret
                                    	    97: 
                                    	    98: #------------------------------------------------------------------------------
                                    	    99: # SerialGetChar
                                    	   100: #
                                    	   101: # Check the serial port buffer to see if there's a char available. If there's
                                    	   102: # a char available then return it. If the buffer is almost empty then send an
                                    	   103: # XON.
                                    	   104: #
                                    	   105: # Stack Space:
                                    	   106: #		4 words
                                    	   107: # Parameters:
                                    	   108: #		none
                                    	   109: # Modifies:
                                    	   110: #		none
                                    	   111: # Returns:
                                    	   112: #		a0 = character or -1
                                    	   113: #------------------------------------------------------------------------------
                                    	   114: 
                                    	   115: SerialGetChar:
01:00000000000000B9 B65C188001      	   116: 	push lr1,a1,a2
01:00000000000000BE 8400400000      	   117: 	ldi	a0,8							# bit 3=machine interrupt enable, mask off interrupts
01:00000000000000C3 8721208007      	   118: 	csrrc	a2,a0,0x3004		# status reg
01:00000000000000C8 FFFFFFFFFF      	   119: 	nop
01:00000000000000CD FFFFFFFFFF      	   120: 	nop
01:00000000000000D2 FFFFFFFFFF      	   121: 	nop
01:00000000000000D7 FFFFFFFFFF      	   122: 	nop
01:00000000000000DC FFFFFFFFFF      	   123: 	nop
01:00000000000000E1 FFFFFFFFFF      	   124: 	nop
01:00000000000000E6 FFFFFFFFFF      	   125: 	nop
01:00000000000000EB FFFFFFFFFF      	   126: 	nop
01:00000000000000F0 A0E8FEFFFF      	   127: 	bsr	SerialRcvCount			# check number of chars in receive buffer
01:00000000000000F5 2B38F81B007C0800	   128: 	bgt	a0,8,.sgc2
01:00000000000000FD 0000
01:00000000000000FF C0000002007C1000	   129: 	ldb	a0,SerRcvXon			# skip sending XON if already sent
01:0000000000000107 FCFF
01:0000000000000109 2738001000      	   130: 	bnez a0,.sgc2        	# XON already sent?
01:000000000000010E 8400880000      	   131: 	ldi	a0,XON						# if <8 send an XON
01:0000000000000113 50002002007C1100	   132: 	stb	r0,SerRcvXoff			# clear XOFF status
01:000000000000011B FCFF
01:000000000000011D D0000002007C1000	   133: 	stb	a0,SerRcvXon			# flag so we don't send it multiple times
01:0000000000000125 FCFF
01:0000000000000127 A0CC010000      	   134: 	bsr	SerialPutChar
                                    	   135: .sgc2:
01:000000000000012C C5008000007C0400	   136: 	ldtu a0,SerHeadRcv		# check if anything is in buffer
01:0000000000000134 FCFF
01:0000000000000136 45010000007C0000	   137: 	ldtu a1,SerTailRcv
01:000000000000013E FCFF
01:0000000000000140 2620101E00      	   138: 	beq	a0,a1,.sgcNoChars
01:0000000000000145 0F21000000      	   139: 	mov	a1,a0
01:000000000000014A C1400000027C0010	   140: 	ldbu a0,SerRcvBuf[a1]	# get byte from buffer
01:0000000000000152 FCFF7C00000000
01:0000000000000159 0441080000      	   141: 	add	a1,a1,1
01:000000000000015E 0841F87F00      	   142: 	and	a1,a1,0xfff				# 4k wrap around
01:0000000000000163 52018000007C0400	   143: 	stt	a1,SerHeadRcv
01:000000000000016B FCFF
01:000000000000016D 0760208003      	   144: 	csrrw	r0,a2,0x3004		# restore interrupts
01:0000000000000172 B75C188001      	   145: 	pop lr1,a1,a2
01:0000000000000177 A304000000      	   146: 	ret
                                    	   147: .sgcNoChars:
01:000000000000017C 8400F8FF07      	   148: 	ldi	a0,-1							#-1
01:0000000000000181 0760208003      	   149: 	csrrw	r0,a2,0x3004		# restore interrupts
01:0000000000000186 B75C188001      	   150: 	pop lr1,a1,a2
01:000000000000018B A304000000      	   151: 	ret
                                    	   152: 
                                    	   153: #------------------------------------------------------------------------------
                                    	   154: # SerialPeekChar
                                    	   155: #
                                    	   156: # Check the serial port buffer to see if there's a char available. If there's
                                    	   157: # a char available then return it. But don't update the buffer indexes. No need
                                    	   158: # to send an XON here.
                                    	   159: #
                                    	   160: # Stack Space:
                                    	   161: #		3 words
                                    	   162: # Parameters:
                                    	   163: #		none
                                    	   164: # Modifies:
                                    	   165: #		none
                                    	   166: # Returns:
                                    	   167: #		a0 = character or -1
                                    	   168: #------------------------------------------------------------------------------
                                    	   169: 
                                    	   170: SerialPeekChar:
                                    	   171: #	orcc	#$290							; mask off interrupts
01:0000000000000190 3601008000      	   172: 	push a1
01:0000000000000195 FAFF070000      	   173: 	atom 07777
01:000000000000019A C5008000007C0400	   174: 	ldtu a0,SerHeadRcv			# check if anything is in buffer
01:00000000000001A2 FCFF
01:00000000000001A4 45010000007C0000	   175: 	ldtu a1,SerTailRcv
01:00000000000001AC FCFF
01:00000000000001AE 2630100E00      	   176: 	beq	a0,a1,.spcNoChars		# no?
01:00000000000001B3 C1200000027C0010	   177: 	ldbu a0,SerRcvBuf[a0]		# get byte from buffer
01:00000000000001BB FCFF7C00000000
01:00000000000001C2 3701008000      	   178: 	pop a1
01:00000000000001C7 A304000000      	   179: 	ret
                                    	   180: .spcNoChars:
01:00000000000001CC 8400F8FF07      	   181: 	ldi	a0,-1
01:00000000000001D1 3701008000      	   182: 	pop a1
01:00000000000001D6 A304000000      	   183: 	ret
                                    	   184: 
                                    	   185: #------------------------------------------------------------------------------
                                    	   186: # SerialPeekChar
                                    	   187: #		Get a character directly from the I/O port. This bypasses the input
                                    	   188: # buffer.
                                    	   189: #
                                    	   190: # Stack Space:
                                    	   191: #		3 words
                                    	   192: # Parameters:
                                    	   193: #		none
                                    	   194: # Modifies:
                                    	   195: #		a0
                                    	   196: # Returns:
                                    	   197: #		a0 = character or -1
                                    	   198: #------------------------------------------------------------------------------
                                    	   199: 
                                    	   200: SerialPeekCharDirect:
                                    	   201: #	lda		COREID					; Ensure we have the IO Focus
                                    	   202: #	cmpa	IOFocusID
                                    	   203: #	bne		spcd0001
                                    	   204: # Disallow interrupts between status read and rx read.
                                    	   205: #	orcc	#$290						; mask off interrupts
01:00000000000001DB FAFF3F0000      	   206: 	atom 077777
01:00000000000001E0 C1008000007C0400	   207: 	ldbu.io	a0,ACIA_STAT
01:00000000000001E8 D0FE
01:00000000000001EA 8820400000      	   208: 	and	a0,a0,8					# look for Rx not empty
01:00000000000001EF 2620000A00      	   209: 	beq	a0,r0,.spcd0001
01:00000000000001F4 C1000000007C0000	   210: 	ldbu.io	a0,ACIA_RX
01:00000000000001FC D0FE
01:00000000000001FE A304000000      	   211: 	ret
                                    	   212: .spcd0001:
01:0000000000000203 8400F8FF07      	   213: 	ldi	a0,-1
01:0000000000000208 A304000000      	   214: 	ret
                                    	   215: 
                                    	   216: #------------------------------------------------------------------------------
                                    	   217: # SerialPutChar
                                    	   218: #    Put a character to the serial transmitter. This routine blocks until the
                                    	   219: # transmitter is empty. 
                                    	   220: #
                                    	   221: # Stack Space
                                    	   222: #		4 words
                                    	   223: # Parameters:
                                    	   224: #		a1 = character to put
                                    	   225: # Modifies:
                                    	   226: #		none
                                    	   227: #------------------------------------------------------------------------------
                                    	   228: 
                                    	   229: SerialPutChar:
                                    	   230: .spc0001:
                                    	   231: #	lda		COREID					; Ensure we have the IO Focus
                                    	   232: #	cmpa	IOFocusID
                                    	   233: #	bne		spc0001
                                    	   234: #	andcc	#$D6F						; provide a window for an interrupt to occur
                                    	   235: #	ldu		#ACIA_MMU
                                    	   236: #	orcc	#$290						; mask off interrupts
                                    	   237: 	# Between the status read and the transmit do not allow an
                                    	   238: 	# intervening interrupt.
01:000000000000020D FAFF3F0000      	   239: 	atom 077777
01:0000000000000212 C5008000007C0400	   240: 	ldtu.io a0,ACIA_STAT	# wait until the uart indicates tx empty
01:000000000000021A D0FE
01:000000000000021C 8820800000      	   241: 	and	a0,a0,16					# bit #4 of the status reg
01:0000000000000221 262000F6FF      	   242: 	beq	a0,r0,.spc0001		# branch if transmitter is not empty
01:0000000000000226 52010000007C0000	   243: 	stt.io a1,ACIA_TX			# send the byte
01:000000000000022E D0FE
01:0000000000000230 A304000000      	   244: 	ret
                                    	   245: 
                                    	   246: #------------------------------------------------------------------------------
                                    	   247: # Serial IRQ routine
                                    	   248: #
                                    	   249: # Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                                    	   250: # Received characters are buffered. If the buffer becomes full, new characters
                                    	   251: # will be lost.
                                    	   252: #
                                    	   253: # Stack Space:
                                    	   254: #		1 word
                                    	   255: # Parameters:
                                    	   256: #		none
                                    	   257: # Modifies:
                                    	   258: #		d,x
                                    	   259: # Returns:
                                    	   260: #		none
                                    	   261: #------------------------------------------------------------------------------
                                    	   262: 
                                    	   263: SerialIRQ:
                                    	   264: #	lda		$2000+$D3				; Serial active interrupt flag
                                    	   265: #	beq		notSerInt
                                    	   266: .sirqNxtByte:
01:0000000000000235 C4008000007C0400	   267: 	ldt.io a0,ACIA_STAT			# look for IRQs
01:000000000000023D D0FE
01:000000000000023F 2B28005200      	   268: 	bgt	a0,r0,.notSerInt	# quick test for any irqs
01:0000000000000244 8820400000      	   269: 	and	a0,a0,8						# check bit 3 = rx full (not empty)
01:0000000000000249 2638004C00      	   270: 	beq	a0,r0,.notRxInt1
01:000000000000024E C1000000007C0000	   271: 	ldbu.io	a0,ACIA_RX				# get data from Rx buffer to clear interrupt
01:0000000000000256 D0FE
01:0000000000000258 45010000007C0000	   272: 	ldtu a1,SerTailRcv			# check if recieve buffer full
01:0000000000000260 FCFF
01:0000000000000262 0441080000      	   273: 	add	a1,a1,1
01:0000000000000267 0841F87F00      	   274: 	and	a1,a1,0xfff
01:000000000000026C C5018000007C0400	   275: 	ldtu a2,SerHeadRcv
01:0000000000000274 FCFF
01:0000000000000276 2650183600      	   276: 	beq	a1,a2,.sirqRxFull
01:000000000000027B 52010000007C0000	   277: 	stt	a1,SerTailRcv			# update tail pointer
01:0000000000000283 FCFF
01:0000000000000285 0441F8FF07      	   278: 	sub	a1,a1,1						# backup
01:000000000000028A 0841F87F00      	   279: 	and	a1,a1,0xfff
01:000000000000028F D0400000027C0010	   280: 	stb	a0,SerRcvBuf[a1]	# store recieved byte in buffer
01:0000000000000297 FCFF7C00000000
01:000000000000029E C1002002007C1100	   281: 	ldbu a0,SerRcvXoff			# check if xoff already sent
01:00000000000002A6 FCFF
01:00000000000002A8 272800C6FF      	   282: 	bne	a0,r0,.sirqNxtByte
01:00000000000002AD A06EFBFFFF      	   283: 	bsr	SerialRcvCount		# if more than 4070 chars in buffer
01:00000000000002B2 2838F8C1FF7CE60F	   284: 	blt	a0,4070,.sirqNxtByte
01:00000000000002BA 0000
01:00000000000002BC 8400980000      	   285: 	ldi	a0,XOFF						# send an XOFF
01:00000000000002C1 50000002007C1000	   286: 	stb	r0,SerRcvXon			# clear XON status
01:00000000000002C9 FCFF
01:00000000000002CB D0002002007C1100	   287: 	stb	a0,SerRcvXoff			# set XOFF status
01:00000000000002D3 FCFF
01:00000000000002D5 D0000000007C0000	   288: 	stb.io a0,ACIA_TX
01:00000000000002DD D0FE
01:00000000000002DF 20ACFEFFFF      	   289: 	bra	.sirqNxtByte     	# check the status for another byte
                                    	   290: 	# Process other serial IRQs
                                    	   291: .notRxInt1:
                                    	   292: .sirqRxFull:
                                    	   293: .notRxInt:
                                    	   294: .notSerInt:
01:00000000000002E4 A304000000      	   295: 	ret
                                    	   296: 
                                    	   297: #------------------------------------------------------------------------------
                                    	   298: # Put a string to the serial port.
                                    	   299: #
                                    	   300: # Parameters:
                                    	   301: #		a0 = pointer to string
                                    	   302: # Modifies:
                                    	   303: #		none
                                    	   304: # Returns:
                                    	   305: #		none
                                    	   306: #------------------------------------------------------------------------------
                                    	   307: 
                                    	   308: SerialPutString:
01:00000000000002E9 B63C105002      	   309: 	push lr1,a0,a1,a3
01:00000000000002EE 0F34000000      	   310: 	mov	a3,a0
                                    	   311: .sps2:
01:00000000000002F3 4001060000      	   312: 	ldb	a1,[a3]
01:00000000000002F8 2640000A00      	   313: 	beq	a1,r0,.spsXit
01:00000000000002FD 04140D0000      	   314: 	add	a3,a3,1
01:0000000000000302 A016FEFFFF      	   315: 	bsr	SerialPutChar
01:0000000000000307 20D8FFFFFF      	   316: 	bra	.sps2
                                    	   317: .spsXit:
01:000000000000030C B73C105002      	   318: 	pop lr1,a0,a1,a3
01:0000000000000311 A304000000      	   319: 	ret
                                    	   320: 
                                    	   321: #------------------------------------------------------------------------------
                                    	   322: #------------------------------------------------------------------------------
                                    	   323: 
                                    	   324: SerialTest:
                                    	   325: .0001:
01:0000000000000316 0401080200      	   326: 	ldi a1,'A'
01:000000000000031B A0E4FDFFFF      	   327: 	bsr SerialPutChar
01:0000000000000320 20ECFFFFFF      	   328: 	bra .0001
                                    	   329: 
                                    	   330: #nmeSerial:
                                    	   331: #	fcb		"Serial",0
                                    	   332: 
                                    	   333: .global SerialInit
                                    	   334: .global SerialPutString
                                    	   335: .global SerialTest
                                    	   336: 


Symbols by name:
.notRxInt                       01:00000000000002E4
.notRxInt1                      01:00000000000002E4
.notSerInt                      01:00000000000002E4
.sgc2                           01:000000000000012C
.sgcNoChars                     01:000000000000017C
.sirqNxtByte                    01:0000000000000235
.sirqRxFull                     01:00000000000002E4
.spc0001                        01:000000000000020D
.spcNoChars                     01:00000000000001CC
.spcd0001                       01:0000000000000203
.sps2                           01:00000000000002F3
.spsXit                         01:000000000000030C
.srcXit                         01:00000000000000AF
ACIA_CMD                         S:00000000FED00008
ACIA_CTRL                        S:00000000FED0000C
ACIA_RX                          S:00000000FED00000
ACIA_STAT                        S:00000000FED00004
ACIA_TX                          S:00000000FED00000
InitSerial                      01:0000000000000000
SerHeadRcv                       S:00000000FFFC0004
SerHeadXmit                      S:00000000FFFC000C
SerRcvBuf                        S:00000000FFFC1000
SerRcvXoff                       S:00000000FFFC0011
SerRcvXon                        S:00000000FFFC0010
SerTailRcv                       S:00000000FFFC0000
SerTailXmit                      S:00000000FFFC0008
SerialGetChar                   01:00000000000000B9
SerialIRQ                       01:0000000000000235
SerialInit                      01:0000000000000000 EXP
SerialPeekChar                  01:0000000000000190
SerialPeekCharDirect            01:00000000000001DB
SerialPutChar                   01:000000000000020D
SerialPutString                 01:00000000000002E9 EXP
SerialRcvCount                  01:0000000000000064
SerialTest                      01:0000000000000316 EXP
XOFF                             S:0000000000000013
XON                              S:0000000000000011

Symbols by value:
00000000FED00000 ACIA_TX
00000000FED00000 ACIA_RX
00000000FED00004 ACIA_STAT
00000000FED00008 ACIA_CMD
00000000FED0000C ACIA_CTRL
00000000FFFC0000 SerTailRcv
00000000FFFC0004 SerHeadRcv
00000000FFFC0008 SerTailXmit
00000000FFFC000C SerHeadXmit
00000000FFFC0010 SerRcvXon
00000000FFFC0011 SerRcvXoff
00000000FFFC1000 SerRcvBuf
0000000000000000 SerialInit
0000000000000000 InitSerial
0000000000000011 XON
0000000000000013 XOFF
0000000000000064 SerialRcvCount
00000000000000AF .srcXit
00000000000000B9 SerialGetChar
000000000000012C .sgc2
000000000000017C .sgcNoChars
0000000000000190 SerialPeekChar
00000000000001CC .spcNoChars
00000000000001DB SerialPeekCharDirect
0000000000000203 .spcd0001
000000000000020D SerialPutChar
000000000000020D .spc0001
0000000000000235 .sirqNxtByte
0000000000000235 SerialIRQ
00000000000002E4 .sirqRxFull
00000000000002E4 .notSerInt
00000000000002E4 .notRxInt1
00000000000002E4 .notRxInt
00000000000002E9 SerialPutString
00000000000002F3 .sps2
000000000000030C .spsXit
0000000000000316 SerialTest
