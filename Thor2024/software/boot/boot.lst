Sections:
00: ".bss" (0-14)
01: ".data" (0-A)
02: ".text" (0-132E)
03: ".rodata" (0-10000)


Source: "boot.asm"
                                    	     1: # boot.asm Thor2024 assembly language
                                    	     2: 
                                    	     3: 	.bss
00:0000000000000000 00              	     4: 	.space	10
00:0000000000000001 *
                                    	     5: .set ary,0xFFFC0000
                                    	     6: .set txtscreen,0xFEC00000
                                    	     7: .set leds,0xFEDFFF00
                                    	     8: .set keybd,0xFEDCFE00
                                    	     9: .set rand,0xFEE1FD00
                                    	    10: .set CTRLH,8
                                    	    11: .set CTRLX,24
                                    	    12: 
                                    	    13: .set CursorRow,0xFFFC0400
                                    	    14: .set CursorCol,0xFFFC0401
                                    	    15: .set TextRows,0xFFFC0402
                                    	    16: .set TextCols,0xFFFC0403
                                    	    17: .set TextCurpos,0xFFFC0404
                                    	    18: .set TextScr,0xFFFC0408
                                    	    19: .set TextAttr,0xFFFC0410
                                    	    20: 
                                    	    21: .set mon_r1,0xFFFC0430
                                    	    22: .set mon_r2,0xFFFC0440
                                    	    23: 
                                    	    24: .extern	SerialInit
                                    	    25: .extern SerialPutString
                                    	    26: .extern SerialTest
                                    	    27: 
                                    	    28: 	.data
01:0000000000000000 00              	    29: 	.space	10
01:0000000000000001 *
                                    	    30: 	.sdreg 60
                                    	    31: 
                                    	    32: #	.org	0xFFFFFFFFFFFD0000
                                    	    33: 	.text
                                    	    34: #	.align	0
                                    	    35: start:
02:0000000000000000 0402F8FF07      	    36: 	ldi t0,-1
02:0000000000000005 520200E0077C00FF	    37: 	stt.io t0,leds
02:000000000000000D DFFE
02:000000000000000F 04020000007C0000	    38: 	ldi	t0,txtscreen
02:0000000000000017 C0FE7C00000000
02:000000000000001E 52020081007C0804	    39: 	stt t0,TextScr
02:0000000000000026 FCFF
02:0000000000000028 04020000007C0000	    40: 	ldi t0,0x43FFFFE0003F0000		# white foreground, blue background
02:0000000000000030 3F007CE0FFFF43
02:0000000000000037 53020082007C1004	    41: 	sto t0,TextAttr
02:000000000000003F FCFF
02:0000000000000041 0402000100      	    42: 	ldi t0,32
02:0000000000000046 50024080007C0204	    43: 	stb t0,TextRows
02:000000000000004E FCFF
02:0000000000000050 0402000200      	    44: 	ldi t0,64
02:0000000000000055 50026080007C0304	    45: 	stb t0,TextCols
02:000000000000005D FCFF
02:000000000000005F 50000080007C0004	    46: 	stb r0,CursorRow
02:0000000000000067 FCFF
02:0000000000000069 50002080007C0104	    47: 	stb r0,CursorCol
02:0000000000000071 FCFF
02:0000000000000073 51008080007C0404	    48: 	stw r0,TextCurpos
02:000000000000007B FCFF
                                    	    49: 	
02:000000000000007D A008020000      	    50: 	bsr	Delay3s
02:0000000000000082 A0AC0D0000      	    51: 	bsr SerialInit
02:0000000000000087 FFFFFFFFFF      	    52: 	nop
02:000000000000008C FFFFFFFFFF      	    53: 	nop
02:0000000000000091 041E0000007C0000	    54: 	ldi gp,0xffff0000
02:0000000000000099 FFFF7C00000000
02:00000000000000A0 CA80078000      	    55: 	lda a0,msgStart[gp]
02:00000000000000A5 FFFFFFFFFF      	    56: 	nop
02:00000000000000AA FFFFFFFFFF      	    57: 	nop
02:00000000000000AF A042130000      	    58: 	bsr	SerialPutString
02:00000000000000B4 FFFFFFFFFF      	    59: 	nop
02:00000000000000B9 FFFFFFFFFF      	    60: 	nop
                                    	    61: #	bsr SerialTest
02:00000000000000BE A0D6010000      	    62: 	bsr ClearScreen
02:00000000000000C3 CA80078000      	    63: 	lda a0,msgStart[gp]
02:00000000000000C8 A0FA0A0000      	    64: 	bsr DisplayString
                                    	    65: 
02:00000000000000CD 8F03000000      	    66: 	mov t3,r0
02:00000000000000D2 0403400100      	    67: 	ldi t2,40
                                    	    68: .st2:
02:00000000000000D7 570038C0007C0000	    69: 	sto r0,0xfffc0000[r0+t3]
02:00000000000000DF FCFF
02:00000000000000E1 84E3400000      	    70: 	add t3,t3,8
02:00000000000000E6 28E830F8FF      	    71: 	blt t3,t2,.st2
                                    	    72: 	
02:00000000000000EB 0701088001      	    73: 	csrrd r2,r0,0x3001	# get the thread number
02:00000000000000F0 0841780000      	    74: 	and r2,r2,15				# 0 to 3
02:00000000000000F5 0402080000      	    75: 	ldi t0,1
02:00000000000000FA 2750204000      	    76: 	bne r2,t0,stall			# Allow only thread 1 to work
                                    	    77: 
02:00000000000000FF 0401E80700      	    78: 	ldi r2,0xFD
02:0000000000000104 0401080000      	    79: 	ldi r2,0x01					# x = 1
02:0000000000000109 52010000007C0000	    80: 	stt r2,ary@got
02:0000000000000111 FCFF
                                    	    81: 
02:0000000000000113 8401800000      	    82: 	ldi r3,0x10		# calculates 16th fibonacci number (13 = D in hex) (CHANGE HERE IF YOU WANT TO CALCULATE ANOTHER NUMBER)
02:0000000000000118 8260000800      	    83: 	or r1,r3,r0	# transfer y register to accumulator
02:000000000000011D 8461E8FF07      	    84: 	add r3,r3,-3	# handles the algorithm iteration counting
                                    	    85: 
02:0000000000000122 8400100000      	    86: 	ldi r1,2		# a = 2
02:0000000000000127 D2008000007C0400	    87: 	stt r1,0xFFFC0004		# stores a
02:000000000000012F FCFF
                                    	    88: 
                                    	    89: floop: 
02:0000000000000131 44018000007C0400	    90: 	LDT r2,0xFFFC0004		# x = a
02:0000000000000139 FCFF
02:000000000000013B 8220102000      	    91: 	ADD r1,r1,r2					# a += x
02:0000000000000140 D2008000007C0400	    92: 	STT r1,0xFFFC0004		# stores a
02:0000000000000148 FCFF
02:000000000000014A 52010000007C0000	    93: 	STT r2,0xFFFC0000		# stores x
02:0000000000000152 FCFF
02:0000000000000154 8461F8FF07      	    94: 	ADD r3,r3,-1					# y -= 1
02:0000000000000159 276000ECFF      	    95:   bnez r3,floop		# jumps back to loop if Z bit != 0 (y's decremention isn't zero yet)
02:000000000000015E FFFFFFFFFF      	    96:   NOP
02:0000000000000163 FFFFFFFFFF      	    97:   NOP
02:0000000000000168 FFFFFFFFFF      	    98:   NOP
02:000000000000016D FFFFFFFFFF      	    99:   NOP
02:0000000000000172 FFFFFFFFFF      	   100:   NOP
02:0000000000000177 FFFFFFFFFF      	   101: 	NOP  
                                    	   102: 	
                                    	   103: stall:
02:000000000000017C 2000000000      	   104: 	BRA	stall
                                    	   105: 
                                    	   106: # ------------------------------------------------------------------------------
                                    	   107: # Delay for a few seconds at startup.
                                    	   108: # ------------------------------------------------------------------------------
                                    	   109: 
                                    	   110: Delay3s:
02:0000000000000181 8400001C067C80C3	   111: 	ldi	a0,30000000
02:0000000000000189 C901
                                    	   112: .0001:
02:000000000000018B 5801400401      	   113: 	lsr	a1,a0,8
02:0000000000000190 520100E0077C00FF	   114: 	stt.io a1,leds
02:0000000000000198 DFFE
02:000000000000019A 8420F8FF07      	   115: 	sub	a0,a0,1
02:000000000000019F 2B2000F6FF      	   116: 	bgt	a0,r0,.0001	
                                    	   117: doRet:
02:00000000000001A4 A304000000      	   118: 	ret
                                    	   119: 
                                    	   120: #------------------------------------------------------------------------------
                                    	   121: # clearscreen
                                    	   122: # Parameters:
                                    	   123: # 	<none>
                                    	   124: # Modifies:
                                    	   125: #		<none>
                                    	   126: # Stack space:
                                    	   127: #		3 words
                                    	   128: #------------------------------------------------------------------------------
                                    	   129: 
                                    	   130: ClearScreen:
02:00000000000001A9 36C2388001      	   131: 	push t0,t2,t3
02:00000000000001AE 46020082007C1004	   132: 	ldo t0,TextAttr
02:00000000000001B6 FCFF
02:00000000000001B8 0982000100      	   133: 	or t0,t0,' '
02:00000000000001BD 8F03000000      	   134: 	mov t3,r0
02:00000000000001C2 0403000002      	   135: 	ldi t2,64*8*32							# 64x32x8
                                    	   136: .st1:
02:00000000000001C7 570238C0007C0000	   137: 	sto.io t0,txtscreen[r0+t3]
02:00000000000001CF C0FE
02:00000000000001D1 84E3400000      	   138: 	add t3,t3,8
02:00000000000001D6 28E830F8FF      	   139: 	blt t3,t2,.st1
02:00000000000001DB 37C2388001      	   140: 	pop t0,t2,t3
02:00000000000001E0 A304000000      	   141: 	ret
                                    	   142: 
                                    	   143: #------------------------------------------------------------------------------
                                    	   144: # Calculate screen memory location from CursorRow,CursorCol.
                                    	   145: # Returns:
                                    	   146: #		a0 = screen location
                                    	   147: # Stack space:
                                    	   148: #		1 word
                                    	   149: #------------------------------------------------------------------------------
                                    	   150: 
                                    	   151: CalcScreenLoc:
02:00000000000001E5 3601008000      	   152: 	push a1
02:00000000000001EA C0000080007C0004	   153: 	ldb	a0,CursorRow			# cursor row
02:00000000000001F2 FCFF
02:00000000000001F4 8820F80300      	   154: 	and a0,a0,0x7f
02:00000000000001F9 40016080007C0304	   155: 	ldb a1,TextCols				# times number of columns
02:0000000000000201 FCFF
02:0000000000000203 8220108000      	   156: 	mul a0,a0,a1
02:0000000000000208 40012080007C0104	   157: 	ldb a1,CursorCol			# plus cursor col
02:0000000000000210 FCFF
02:0000000000000212 0841F80300      	   158: 	and a1,a1,0x7f
02:0000000000000217 8220102000      	   159: 	add a0,a0,a1
02:000000000000021C D1008080007C0404	   160: 	stw a0,TextCurpos			# update text position
02:0000000000000224 FCFF
02:0000000000000226 D800180001      	   161: 	asl a0,a0,3						# multiply by text cell size
02:000000000000022B 45010081007C0804	   162: 	ldtu a1,TextScr				# add in text screen location
02:0000000000000233 FCFF
02:0000000000000235 8220102000      	   163: 	add a0,a0,a1
02:000000000000023A 3701008000      	   164: 	pop a1
02:000000000000023F A304000000      	   165: 	ret
                                    	   166: 
                                    	   167: #------------------------------------------------------------------------------
                                    	   168: # Display a character on the screen
                                    	   169: #
                                    	   170: # Parameters:
                                    	   171: # 	a1 = char to display
                                    	   172: # Modifies:
                                    	   173: #		screen and text cursor position updated
                                    	   174: #------------------------------------------------------------------------------
                                    	   175: 
                                    	   176: DisplayChar:
02:0000000000000244 B61C008000      	   177: 	push lr1
02:0000000000000249 2758F811007C0D00	   178: 	bne a1,'\r',.0010				# carriage return?
02:0000000000000251 0000
02:0000000000000253 50002080007C0104	   179: 	stb r0,CursorCol				# just set cursor column to zero on a CR
02:000000000000025B FCFF
02:000000000000025D A08A070000      	   180: 	bsr SyncCursor
02:0000000000000262 B71C008000      	   181: 	pop lr1
02:0000000000000267 A304000000      	   182: 	ret
                                    	   183: .0010:
02:000000000000026C B640185002      	   184: 	push a0,a1,a2,a3
02:0000000000000271 0841F80700      	   185: 	and a1,a1,0xff					# make char unsigned
02:0000000000000276 2758F825007C9100	   186: 	bne a1,0x91,.0005				# cursor right?
02:000000000000027E 0000
                                    	   187: 	# Cursor right
02:0000000000000280 C0002080007C0104	   188: 	ldb a0,CursorCol				# Is rightmost column reached?
02:0000000000000288 FCFF
02:000000000000028A C0016080007C0304	   189: 	ldb a2,TextCols
02:0000000000000292 FCFF
02:0000000000000294 8461F8FF07      	   190: 	sub a2,a2,1
02:0000000000000299 2928180C00      	   191: 	bge a0,a2,.0001
02:000000000000029E 8420080000      	   192: 	add	a0,a0,1							# not rightmost, add 1 to column
02:00000000000002A3 D0002080007C0104	   193: 	stb a0,CursorCol
02:00000000000002AB FCFF
                                    	   194: .0002:
02:00000000000002AD A0EA060000      	   195: 	bsr SyncCursor
                                    	   196: .0001:
02:00000000000002B2 B740185002      	   197: 	pop a0,a1,a2,a3
02:00000000000002B7 B71C008000      	   198: 	pop lr1
02:00000000000002BC A304000000      	   199: 	ret
                                    	   200: .0005:
02:00000000000002C1 2748F817007C9000	   201: 	bne a1,0x90,.0006
02:00000000000002C9 0000
                                    	   202: 	# Cursor up
02:00000000000002CB C0000080007C0004	   203: 	ldb a0,CursorRow				# can the cursor move up?
02:00000000000002D3 FCFF
02:00000000000002D5 262800EEFF      	   204: 	beq a0,r0,.0001
02:00000000000002DA 8420F8FF07      	   205: 	sub a0,a0,1
02:00000000000002DF D0000080007C0004	   206: 	stb a0,CursorRow
02:00000000000002E7 FCFF
02:00000000000002E9 2088FFFFFF      	   207: 	bra .0002
                                    	   208: .0006:
02:00000000000002EE 2748F817007C9300	   209: 	bne a1,0x93,.0007
02:00000000000002F6 0000
                                    	   210: 	# Cursor left
02:00000000000002F8 C0002080007C0104	   211: 	ldb a0,CursorCol				# can the cursor move left?
02:0000000000000300 FCFF
02:0000000000000302 262000D8FF      	   212: 	beq a0,r0,.0001	
02:0000000000000307 8420F8FF07      	   213: 	sub a0,a0,1
02:000000000000030C D0002080007C0104	   214: 	stb a0,CursorCol
02:0000000000000314 FCFF
02:0000000000000316 202EFFFFFF      	   215: 	bra .0002
                                    	   216: .0007:
02:000000000000031B 2740F81F007C9200	   217: 	bne a1,0x92,.0008
02:0000000000000323 0000
                                    	   218: 	# Cursor down
02:0000000000000325 C0000080007C0004	   219: 	ldb a0,CursorRow				# can cursor move down?
02:000000000000032D FCFF
02:000000000000032F C0014080007C0204	   220: 	ldb a2,TextRows
02:0000000000000337 FCFF
02:0000000000000339 8461F8FF07      	   221: 	sub a2,a2,1
02:000000000000033E 292018BAFF      	   222: 	bge a0,a2,.0001
02:0000000000000343 8420080000      	   223: 	add a0,a0,1
02:0000000000000348 D0000080007C0004	   224: 	stb a0,CursorRow
02:0000000000000350 FCFF
02:0000000000000352 20B6FEFFFF      	   225: 	bra .0002
                                    	   226: .0008:										# home cursor
02:0000000000000357 2758F81B007C9400	   227: 	bne a1,0x94,.0011
02:000000000000035F 0000
                                    	   228: 	# Home cursor
02:0000000000000361 C0002080007C0104	   229: 	ldb a0,CursorCol
02:0000000000000369 FCFF
02:000000000000036B 2620000A00      	   230: 	beq a0,r0,.0003
02:0000000000000370 50002080007C0104	   231: 	stb r0,CursorCol
02:0000000000000378 FCFF
02:000000000000037A 2066FEFFFF      	   232: 	bra .0002
                                    	   233: .0003:
02:000000000000037F 50000080007C0004	   234: 	stb r0,CursorRow
02:0000000000000387 FCFF
02:0000000000000389 2048FEFFFF      	   235: 	bra .0002
                                    	   236: .0011:
02:000000000000038E 2648F849007C9900	   237: 	beq a1,0x99,doDelete
02:0000000000000396 0000
02:0000000000000398 2650F82D007C0800	   238: 	beq a1,CTRLH,doBackspace
02:00000000000003A0 0000
02:00000000000003A2 2640F865007C1800	   239: 	beq a1,CTRLX,doCtrlX
02:00000000000003AA 0000
02:00000000000003AC 2640F81F007C0A00	   240: 	beq a1,'\n',.0012				# line feed
02:00000000000003B4 0000
                                    	   241: 	# Regular char
02:00000000000003B6 A05EFCFFFF      	   242: 	bsr CalcScreenLoc				# a0 = screen location
02:00000000000003BB C6010082007C1004	   243: 	ldo a2,TextAttr
02:00000000000003C3 FCFF
02:00000000000003C5 8261100800      	   244: 	or a2,a2,a1
02:00000000000003CA D321000000      	   245: 	sto.io a2,[a0]
02:00000000000003CF A0B8010000      	   246: 	bsr IncCursorPos
                                    	   247: .0004:
02:00000000000003D4 A09C040000      	   248: 	bsr SyncCursor
02:00000000000003D9 B740185002      	   249: 	pop a0,a1,a2,a3
02:00000000000003DE B71C008000      	   250: 	pop lr1
02:00000000000003E3 A304000000      	   251: 	ret
                                    	   252: .0012:										# line feed
02:00000000000003E8 A012020000      	   253: 	bsr IncCursorRow
02:00000000000003ED 20CEFFFFFF      	   254: 	bra .0004
                                    	   255: 			
                                    	   256: 	#---------------------------
                                    	   257: 	# CTRL-H: backspace
                                    	   258: 	#---------------------------
                                    	   259: doBackspace:
02:00000000000003F2 C0002080007C0104	   260: 	ldb a0,CursorCol				# At start of line already?
02:00000000000003FA FCFF
02:00000000000003FC 2720080A00      	   261: 	bne a0,a0,.0001
02:0000000000000401 B740185002      	   262: 	pop a0,a1,a2,a3
02:0000000000000406 B71C008000      	   263: 	pop lr1
02:000000000000040B A304000000      	   264: 	ret
                                    	   265: .0001:
02:0000000000000410 8420F8FF07      	   266: 	sub a0,a0,1							#decrement column
02:0000000000000415 D0002080007C0104	   267: 	stb a0,CursorCol
02:000000000000041D FCFF
                                    	   268: 
                                    	   269: 	#---------------------------
                                    	   270: 	# Delete key
                                    	   271: 	#---------------------------
                                    	   272: doDelete:
02:000000000000041F A08CFBFFFF      	   273: 	bsr	CalcScreenLoc				# a0 = screen location
02:0000000000000424 C0012080007C0104	   274: 	ldb a2,CursorCol
02:000000000000042C FCFF
02:000000000000042E 40146080007C0304	   275: 	ldb a3,TextCols
02:0000000000000436 FCFF
                                    	   276: .0001:
02:0000000000000438 4621000100      	   277: 	ldo a1,8[a0]
02:000000000000043D 5321000000      	   278: 	sto.io a1,[a0]
02:0000000000000442 8420400000      	   279: 	add a0,a0,8
02:0000000000000447 8461080000      	   280: 	add a2,a2,1
02:000000000000044C 286040F7FF      	   281: 	blt a2,a3,.0001
02:0000000000000451 0401000100      	   282: 	ldi a1,' '							# one space
02:0000000000000456 502100FF07      	   283: 	stb.io a1,-8[a0]				# terminate line with space char
02:000000000000045B B740185002      	   284: 	pop a0,a1,a2,a3
02:0000000000000460 B71C008000      	   285: 	pop lr1
02:0000000000000465 A304000000      	   286: 	ret
                                    	   287: 
                                    	   288: 	#---------------------------
                                    	   289: 	# CTRL-X: erase line
                                    	   290: 	#---------------------------
                                    	   291: doCtrlX:
02:000000000000046A 50002080007C0104	   292: 	stb r0,CursorCol			# Reset cursor to start of line
02:0000000000000472 FCFF
02:0000000000000474 C0006080007C0304	   293: 	ldb a0,TextCols				# and display TextCols number of spaces
02:000000000000047C FCFF
02:000000000000047E 0401000100      	   294: 	ldi	a1,' '						# one space
                                    	   295: .0001:
                                    	   296: 	# DisplayChar is called recursively here
                                    	   297: 	# It's safe to do because we know it won't recurse again due to the
                                    	   298: 	# fact we know the character being displayed is a space char
02:0000000000000483 A082FBFFFF      	   299: 	bsr DisplayChar
02:0000000000000488 8420F8FF07      	   300: 	sub a0,a0,1
02:000000000000048D 293000FAFF      	   301: 	bge a0,r0,.0001
02:0000000000000492 50002080007C0104	   302: 	stb r0,CursorCol			# Reset cursor to start of line
02:000000000000049A FCFF
02:000000000000049C B740185002      	   303: 	pop a0,a1,a2,a3
02:00000000000004A1 B71C008000      	   304: 	pop lr1
02:00000000000004A6 A304000000      	   305: 	ret										# we're done
                                    	   306: 
                                    	   307: #------------------------------------------------------------------------------
                                    	   308: # Increment the cursor position, scroll the screen if needed.
                                    	   309: #------------------------------------------------------------------------------
                                    	   310: #
                                    	   311: IncCursorPos:
02:00000000000004AB B640000001      	   312: 	push a0,a1
02:00000000000004B0 C0002080007C0104	   313: 	ldb a0,CursorCol
02:00000000000004B8 FCFF
02:00000000000004BA 8420080000      	   314: 	add a0,a0,1
02:00000000000004BF D0002080007C0104	   315: 	stb a0,CursorCol
02:00000000000004C7 FCFF
02:00000000000004C9 C0006080007C0304	   316: 	ldb a0,TextCols
02:00000000000004D1 FCFF
02:00000000000004D3 40012080007C0104	   317: 	ldb a1,CursorCol
02:00000000000004DB FCFF
02:00000000000004DD 2850083600      	   318: 	blt a1,a0,IncCursorPos1	# return if text cols not exceeded
02:00000000000004E2 50002080007C0104	   319: 	stb r0,CursorCol
02:00000000000004EA FCFF
02:00000000000004EC B740000001      	   320: 	pop a0,a1
                                    	   321: IncCursorRow:
02:00000000000004F1 FFFFFFFFFF      	   322: 	nop
02:00000000000004F6 FFFFFFFFFF      	   323: 	nop
02:00000000000004FB B640000001      	   324: 	push a0,a1
02:0000000000000500 C0000080007C0004	   325: 	ldb a0,CursorRow
02:0000000000000508 FCFF
02:000000000000050A 8420080000      	   326: 	add a0,a0,1
02:000000000000050F D0000080007C0004	   327: 	stb a0,CursorRow
02:0000000000000517 FCFF
02:0000000000000519 40014080007C0204	   328: 	ldb a1,TextRows
02:0000000000000521 FCFF
02:0000000000000523 2820101400      	   329: 	blt a0,a1,IncCursorPos1	# return if text rows not exceeded
02:0000000000000528 0441F8FF07      	   330: 	sub a1,a1,1
02:000000000000052D 50010080007C0004	   331: 	stb a1,CursorRow
02:0000000000000535 FCFF
02:0000000000000537 B61C008000      	   332: 	push lr1
02:000000000000053C A052F9FFFF      	   333: 	bsr CalcScreenLoc
02:0000000000000541 A028000000      	   334: 	bsr ScrollUp
02:0000000000000546 B71C008000      	   335: 	pop lr1
                                    	   336: IncCursorPos1:
02:000000000000054B B740000001      	   337: 	pop	a0,a1
02:0000000000000550 A304000000      	   338: 	ret
                                    	   339: 
                                    	   340: #------------------------------------------------------------------------------
                                    	   341: # Scroll text screen
                                    	   342: #------------------------------------------------------------------------------
                                    	   343: 
                                    	   344: ScrollUp:
02:0000000000000555 B69C000001      	   345: 	push lr1,t0
02:000000000000055A B640185002      	   346: 	push a0,a1,a2,a3
02:000000000000055F C4000081007C0804	   347: 	ldt a0,TextScr				# a0 = pointer to screen
02:0000000000000567 FCFF
02:0000000000000569 40016080007C0304	   348: 	ldb a1,TextCols				# a1 = number of columns
02:0000000000000571 FCFF
02:0000000000000573 C0014080007C0204	   349: 	ldb a2,TextRows
02:000000000000057B FCFF
02:000000000000057D 8461F8FF07      	   350: 	sub a2,a2,1
02:0000000000000582 8241188000      	   351: 	mul a2,a1,a2					# a2 = number of cells to move
02:0000000000000587 0F54000000      	   352: 	mov a3,a1
                                    	   353: .0001:
02:000000000000058C 4F22808101      	   354: 	ldo t0,[a0+a3]
02:0000000000000591 0214152800      	   355: 	sub a3,a3,a1
02:0000000000000596 572280C100      	   356: 	sto.io t0,[a0+a3]
02:000000000000059B 0214152000      	   357: 	add a3,a3,a1
02:00000000000005A0 0214152000      	   358: 	add a3,a3,a1
02:00000000000005A5 8461F8FF07      	   359: 	sub a2,a2,1
02:00000000000005AA 2B7000F0FF      	   360: 	bgt a2,r0,.0001
02:00000000000005AF A028000000      	   361: 	bsr BlankLastLine
02:00000000000005B4 B740185002      	   362: 	pop a0,a1,a2,a3
02:00000000000005B9 B79C000001      	   363: 	pop lr1,t0
02:00000000000005BE A304000000      	   364: 	ret
                                    	   365: 
                                    	   366: #------------------------------------------------------------------------------
                                    	   367: # Blank out the last line of the screen.
                                    	   368: #------------------------------------------------------------------------------
                                    	   369: 
                                    	   370: BlankLastLine:
02:00000000000005C3 3622100602      	   371: 	push t0,a0,a1,a2
02:00000000000005C8 C4000081007C0804	   372: 	ldt a0,TextScr
02:00000000000005D0 FCFF
02:00000000000005D2 40016080007C0304	   373: 	ldb a1,TextCols
02:00000000000005DA FCFF
02:00000000000005DC C0014080007C0204	   374: 	ldb a2,TextRows
02:00000000000005E4 FCFF
02:00000000000005E6 8461F8FF07      	   375: 	sub a2,a2,1
02:00000000000005EB 0241188000      	   376: 	mul a1,a1,a2
02:00000000000005F0 5801180001      	   377: 	asl a1,a1,3
02:00000000000005F5 0402000100      	   378: 	ldi t0,' '
02:00000000000005FA C0016080007C0304	   379: 	ldb a2,TextCols
02:0000000000000602 FCFF
                                    	   380: .0001:
02:0000000000000604 5722100000      	   381: 	stb.io t0,[a0+a1]
02:0000000000000609 0441400000      	   382: 	add a1,a1,8
02:000000000000060E 8461F8FF07      	   383: 	sub a2,a2,1
02:0000000000000613 2B6800F8FF      	   384: 	bgt a2,r0,.0001
02:0000000000000618 3722100602      	   385: 	pop t0,a0,a1,a2
02:000000000000061D A304000000      	   386: 	ret	
                                    	   387: 
                                    	   388: #------------------------------------------------------------------------------
                                    	   389: # SyncCursor:
                                    	   390: #
                                    	   391: # Sync the hardware cursor's position to the text cursor position.
                                    	   392: #
                                    	   393: # Parameters:
                                    	   394: #		<none>
                                    	   395: # Returns:
                                    	   396: #		<none>
                                    	   397: # Registers Affected:
                                    	   398: #		<none>
                                    	   399: #------------------------------------------------------------------------------
                                    	   400: 
                                    	   401: SyncCursor:
02:0000000000000622 B600008000      	   402: 	push a0
02:0000000000000627 C2008080007C0404	   403: 	ldw a0,TextCurpos
02:000000000000062F FCFF
02:0000000000000631 D1008004007C2400	   404: 	stw.io a0,0xfec80024
02:0000000000000639 C8FE
02:000000000000063B B700008000      	   405: 	pop a0
02:0000000000000640 A304000000      	   406: 	ret
                                    	   407: 	
                                    	   408: #------------------------------------------------------------------------------
                                    	   409: # Display string on screen
                                    	   410: #
                                    	   411: # Parameters:
                                    	   412: # 	a0 = pointer to string to display
                                    	   413: # Returns:
                                    	   414: #		<none>
                                    	   415: # Modifies:
                                    	   416: #		<none>
                                    	   417: #------------------------------------------------------------------------------
                                    	   418: 
                                    	   419: DisplayString:
02:0000000000000645 B63C108001      	   420: 	push lr1,a0,a1
                                    	   421: .0002:
02:000000000000064A 4021000000      	   422: 	ldb a1,[a0]
02:000000000000064F 2640000A00      	   423: 	beq a1,r0,.0001
02:0000000000000654 A0E0F7FFFF      	   424: 	bsr DisplayChar
02:0000000000000659 8420080000      	   425: 	add a0,a0,1
02:000000000000065E 20D8FFFFFF      	   426: 	bra .0002
                                    	   427: .0001:
02:0000000000000663 B73C108001      	   428: 	pop lr1,a0,a1
02:0000000000000668 A304000000      	   429: 	ret
                                    	   430: 
                                    	   431: #------------------------------------------------------------------------------
                                    	   432: #------------------------------------------------------------------------------
                                    	   433: CRLF:
02:000000000000066D 3601008000      	   434: 	push a1
02:0000000000000672 0401680000      	   435: 	ldi a1,'\r'
02:0000000000000677 A09AF7FFFF      	   436: 	bsr DisplayChar
02:000000000000067C 0401500000      	   437: 	ldi a1,'\n'
02:0000000000000681 A086F7FFFF      	   438: 	bsr DisplayChar
02:0000000000000686 3701008000      	   439: 	pop a1
02:000000000000068B A304000000      	   440: 	ret
                                    	   441: 
                                    	   442: #------------------------------------------------------------------------------
                                    	   443: # Display nybble in a1
                                    	   444: #------------------------------------------------------------------------------
                                    	   445: 
                                    	   446: DisplayNybble:
02:0000000000000690 3621070001      	   447: 	push a1,lr1
02:0000000000000695 0841780000      	   448: 	and a1,a1,15
02:000000000000069A 0441800100      	   449: 	add a1,a1,'0'
02:000000000000069F 2A58F807007C3900	   450: 	ble a1,'9',.0001
02:00000000000006A7 0000
02:00000000000006A9 0441380000      	   451: 	add a1,a1,7
                                    	   452: .0001:
02:00000000000006AE A02CF7FFFF      	   453: 	bsr DisplayChar
02:00000000000006B3 3721070001      	   454: 	pop a1,lr1
02:00000000000006B8 A304000000      	   455: 	ret
                                    	   456: 
                                    	   457: #------------------------------------------------------------------------------
                                    	   458: # Display the byte in a1
                                    	   459: #------------------------------------------------------------------------------
                                    	   460: 
                                    	   461: DisplayByte:
02:00000000000006BD B61C008000      	   462: 	push lr1
02:00000000000006C2 A09CFFFFFF      	   463: 	bsr DisplayNybble
02:00000000000006C7 5801201001      	   464: 	ror a1,a1,4
02:00000000000006CC A088FFFFFF      	   465: 	bsr DisplayNybble
02:00000000000006D1 5801200C01      	   466: 	rol a1,a1,4
02:00000000000006D6 B71C008000      	   467: 	pop lr1
02:00000000000006DB A304000000      	   468: 	ret
                                    	   469: 
                                    	   470: #------------------------------------------------------------------------------
                                    	   471: # Display the wyde in a0.B
                                    	   472: #------------------------------------------------------------------------------
                                    	   473: 
                                    	   474: DisplayWyde:
02:00000000000006E0 B61C008000      	   475: 	push lr1
02:00000000000006E5 A0B0FFFFFF      	   476: 	bsr DisplayByte
02:00000000000006EA 5801401001      	   477: 	ror a1,a1,8
02:00000000000006EF A09CFFFFFF      	   478: 	bsr DisplayByte
02:00000000000006F4 5801400C01      	   479: 	rol a1,a1,8
02:00000000000006F9 B71C008000      	   480: 	pop lr1
02:00000000000006FE A304000000      	   481: 	ret
                                    	   482: 
                                    	   483: #------------------------------------------------------------------------------
                                    	   484: # Display the tetra in a1
                                    	   485: #------------------------------------------------------------------------------
                                    	   486: 
                                    	   487: DisplayTetra:
02:0000000000000703 B61C008000      	   488: 	push lr1
02:0000000000000708 A0B0FFFFFF      	   489: 	bsr DisplayWyde
02:000000000000070D 5801801001      	   490: 	ror a1,a1,16
02:0000000000000712 A09CFFFFFF      	   491: 	bsr DisplayWyde
02:0000000000000717 5801800C01      	   492: 	rol a1,a1,16
02:000000000000071C B71C008000      	   493: 	pop lr1
02:0000000000000721 A304000000      	   494: 	ret
                                    	   495: 
                                    	   496: #------------------------------------------------------------------------------
                                    	   497: # Display the octa in a1
                                    	   498: #------------------------------------------------------------------------------
                                    	   499: 
                                    	   500: DisplayOcta:
02:0000000000000726 B61C008000      	   501: 	push lr1
02:000000000000072B A0B0FFFFFF      	   502: 	bsr DisplayTetra
02:0000000000000730 5801001101      	   503: 	ror a1,a1,32
02:0000000000000735 A09CFFFFFF      	   504: 	bsr DisplayTetra
02:000000000000073A 5801000D01      	   505: 	rol a1,a1,32
02:000000000000073F B71C008000      	   506: 	pop lr1
02:0000000000000744 A304000000      	   507: 	ret
                                    	   508: 
                                    	   509: Monitor:
02:0000000000000749 2000000000      	   510: 	bra Monitor
                                    	   511: 
                                    	   512: GetNumber:
02:000000000000074E A304000000      	   513: 	ret
                                    	   514: 
                                    	   515: GetRange:
02:0000000000000753 A304000000      	   516: 	ret
                                    	   517: 
                                    	   518: 	.include "serial.asm"

Source: "serial.asm"
                                    	     1: # ============================================================================
                                    	     2: #        __
                                    	     3: #   \\__/ o\    (C) 2022-2023  Robert Finch, Waterloo
                                    	     4: #    \  __ /    All rights reserved.
                                    	     5: #     \/_//     robfinch<remove>@finitron.ca
                                    	     6: #       ||
                                    	     7: #  
                                    	     8: #
                                    	     9: # Serial port routines for a WDC6551 compatible circuit.
                                    	    10: #
                                    	    11: # ============================================================================
                                    	    12: #
                                    	    13: 	.bss
00:000000000000000A 00              	    14: 	.space	10
00:000000000000000B *
                                    	    15: .set XON,0x11
                                    	    16: .set XOFF,0x13
                                    	    17: .set ACIA_RX,0xFED00000
                                    	    18: .set ACIA_TX,0xFED00000
                                    	    19: .set ACIA_STAT,0xFED00004
                                    	    20: .set ACIA_CMD,0xFED00008
                                    	    21: .set ACIA_CTRL,0xFED0000C
                                    	    22: .set SerTailRcv,0xFFFC0000
                                    	    23: .set SerHeadRcv,0xFFFC0004
                                    	    24: .set SerTailXmit,0xFFFC0008
                                    	    25: .set SerHeadXmit,0xFFFC000C
                                    	    26: .set SerRcvXon,0xFFFC0010
                                    	    27: .set SerRcvXoff,0xFFFC0011
                                    	    28: .set SerRcvBuf,0xFFFC1000
                                    	    29: .set uart,0xFED00000
                                    	    30: 
                                    	    31: 	.text
                                    	    32: #------------------------------------------------------------------------------
                                    	    33: # Initialize serial port.
                                    	    34: #
                                    	    35: # Clear buffer indexes. Two bytes are used for the buffer index even though
                                    	    36: # only a single byte is needed. This is for convenience in calculating the
                                    	    37: # number of characters in the buffer, done later. The upper byte remains at
                                    	    38: # zero.
                                    	    39: # The port is initialized for 9600 baud, 1 stop bit and 8 bits data sent.
                                    	    40: # The internal baud rate generator is used.
                                    	    41: #
                                    	    42: # Parameters:
                                    	    43: #		none
                                    	    44: # Modifies:
                                    	    45: #		a0
                                    	    46: # Returns:
                                    	    47: #		none
                                    	    48: #------------------------------------------------------------------------------
                                    	    49: 
                                    	    50: InitSerial:
                                    	    51: SerialInit:
02:0000000000000758 52008000007C0400	    52: 	stt		r0,SerHeadRcv
02:0000000000000760 FCFF
02:0000000000000762 52000000007C0000	    53: 	stt		r0,SerTailRcv
02:000000000000076A FCFF
02:000000000000076C 52008001007C0C00	    54: 	stt		r0,SerHeadXmit
02:0000000000000774 FCFF
02:0000000000000776 52000001007C0800	    55: 	stt		r0,SerTailXmit
02:000000000000077E FCFF
02:0000000000000780 50000002007C1000	    56: 	stb		r0,SerRcvXon
02:0000000000000788 FCFF
02:000000000000078A 50002002007C1100	    57: 	stb		r0,SerRcvXoff
02:0000000000000792 FCFF
                                    	    58: #	lda		COREID
                                    	    59: #sini1:
                                    	    60: #	cmpa	IOFocusID
                                    	    61: #	bne		sini1
                                    	    62: #	orcc	#$290						; mask off interrupts
                                    	    63: #	ldd		#ACIA_MMU				; map ACIA into address space
                                    	    64: #	std		MMU
02:0000000000000794 8400480000      	    65: 	ldi	a0,0x09					# dtr,rts active, rxint enabled (bit 1=0), no parity
02:0000000000000799 D2000001007C0800	    66: 	stt.io a0,ACIA_CMD
02:00000000000007A1 D0FE
02:00000000000007A3 8400F000007C1E00	    67: 	ldi	a0,0x6001E			# baud 9600, 1 stop bit, 8 bit, internal baud gen
02:00000000000007AB 0600
02:00000000000007AD D2008001007C0C00	    68: 	stt.io a0,ACIA_CTRL		# disable fifos (bit zero, one), reset fifos
02:00000000000007B5 D0FE
                                    	    69: #	ldd		#$000F00				; map out ACIA
                                    	    70: #	std		MMU
02:00000000000007B7 A304000000      	    71: 	ret
                                    	    72: 
                                    	    73: #------------------------------------------------------------------------------
                                    	    74: # Calculate number of character in input buffer.
                                    	    75: #
                                    	    76: # Parameters:
                                    	    77: #		none
                                    	    78: # Returns:
                                    	    79: #		a0 = number of bytes in buffer.
                                    	    80: #------------------------------------------------------------------------------
                                    	    81: 
                                    	    82: SerialRcvCount:
02:00000000000007BC 3661000001      	    83: 	push a1,a2
02:00000000000007C1 8F00000000      	    84: 	mov	a0,r0
02:00000000000007C6 45010000007C0000	    85: 	ldtu a1,SerTailRcv
02:00000000000007CE FCFF
02:00000000000007D0 C5018000007C0400	    86: 	ldtu a2,SerHeadRcv
02:00000000000007D8 FCFF
02:00000000000007DA 8240182800      	    87: 	sub	a0,a1,a2
02:00000000000007DF 2920001400      	    88: 	bge	a0,r0,.srcXit
02:00000000000007E4 8400008000      	    89: 	ldi	a0,0x1000
02:00000000000007E9 C5018000007C0400	    90: 	ldtu a2,SerHeadRcv
02:00000000000007F1 FCFF
02:00000000000007F3 45010000007C0000	    91: 	ldtu a1,SerTailRcv
02:00000000000007FB FCFF
02:00000000000007FD 8220182800      	    92: 	sub	a0,a0,a2
02:0000000000000802 8220102000      	    93: 	add	a0,a0,a1
                                    	    94: .srcXit:
02:0000000000000807 3761000001      	    95: 	pop a1,a2
02:000000000000080C A304000000      	    96: 	ret
                                    	    97: 
                                    	    98: #------------------------------------------------------------------------------
                                    	    99: # SerialGetChar
                                    	   100: #
                                    	   101: # Check the serial port buffer to see if there's a char available. If there's
                                    	   102: # a char available then return it. If the buffer is almost empty then send an
                                    	   103: # XON.
                                    	   104: #
                                    	   105: # Stack Space:
                                    	   106: #		4 words
                                    	   107: # Parameters:
                                    	   108: #		none
                                    	   109: # Modifies:
                                    	   110: #		none
                                    	   111: # Returns:
                                    	   112: #		a0 = character or -1
                                    	   113: #------------------------------------------------------------------------------
                                    	   114: 
                                    	   115: SerialGetChar:
02:0000000000000811 B65C188001      	   116: 	push lr1,a1,a2
02:0000000000000816 8400400000      	   117: 	ldi	a0,8							# bit 3=machine interrupt enable, mask off interrupts
02:000000000000081B 8721208007      	   118: 	csrrc	a2,a0,0x3004		# status reg
02:0000000000000820 FFFFFFFFFF      	   119: 	nop
02:0000000000000825 FFFFFFFFFF      	   120: 	nop
02:000000000000082A FFFFFFFFFF      	   121: 	nop
02:000000000000082F FFFFFFFFFF      	   122: 	nop
02:0000000000000834 FFFFFFFFFF      	   123: 	nop
02:0000000000000839 FFFFFFFFFF      	   124: 	nop
02:000000000000083E FFFFFFFFFF      	   125: 	nop
02:0000000000000843 FFFFFFFFFF      	   126: 	nop
02:0000000000000848 A0E8FEFFFF      	   127: 	bsr	SerialRcvCount			# check number of chars in receive buffer
02:000000000000084D 2B38F81B007C0800	   128: 	bgt	a0,8,.sgc2
02:0000000000000855 0000
02:0000000000000857 C0000002007C1000	   129: 	ldb	a0,SerRcvXon			# skip sending XON if already sent
02:000000000000085F FCFF
02:0000000000000861 2738001000      	   130: 	bnez a0,.sgc2        	# XON already sent?
02:0000000000000866 8400880000      	   131: 	ldi	a0,XON						# if <8 send an XON
02:000000000000086B 50002002007C1100	   132: 	stb	r0,SerRcvXoff			# clear XOFF status
02:0000000000000873 FCFF
02:0000000000000875 D0000002007C1000	   133: 	stb	a0,SerRcvXon			# flag so we don't send it multiple times
02:000000000000087D FCFF
02:000000000000087F A0CC010000      	   134: 	bsr	SerialPutChar
                                    	   135: .sgc2:
02:0000000000000884 C5008000007C0400	   136: 	ldtu a0,SerHeadRcv		# check if anything is in buffer
02:000000000000088C FCFF
02:000000000000088E 45010000007C0000	   137: 	ldtu a1,SerTailRcv
02:0000000000000896 FCFF
02:0000000000000898 2620101E00      	   138: 	beq	a0,a1,.sgcNoChars
02:000000000000089D 0F21000000      	   139: 	mov	a1,a0
02:00000000000008A2 C1400000027C0010	   140: 	ldbu a0,SerRcvBuf[a1]	# get byte from buffer
02:00000000000008AA FCFF7C00000000
02:00000000000008B1 0441080000      	   141: 	add	a1,a1,1
02:00000000000008B6 0841F87F00      	   142: 	and	a1,a1,0xfff				# 4k wrap around
02:00000000000008BB 52018000007C0400	   143: 	stt	a1,SerHeadRcv
02:00000000000008C3 FCFF
02:00000000000008C5 0760208003      	   144: 	csrrw	r0,a2,0x3004		# restore interrupts
02:00000000000008CA B75C188001      	   145: 	pop lr1,a1,a2
02:00000000000008CF A304000000      	   146: 	ret
                                    	   147: .sgcNoChars:
02:00000000000008D4 8400F8FF07      	   148: 	ldi	a0,-1							#-1
02:00000000000008D9 0760208003      	   149: 	csrrw	r0,a2,0x3004		# restore interrupts
02:00000000000008DE B75C188001      	   150: 	pop lr1,a1,a2
02:00000000000008E3 A304000000      	   151: 	ret
                                    	   152: 
                                    	   153: #------------------------------------------------------------------------------
                                    	   154: # SerialPeekChar
                                    	   155: #
                                    	   156: # Check the serial port buffer to see if there's a char available. If there's
                                    	   157: # a char available then return it. But don't update the buffer indexes. No need
                                    	   158: # to send an XON here.
                                    	   159: #
                                    	   160: # Stack Space:
                                    	   161: #		3 words
                                    	   162: # Parameters:
                                    	   163: #		none
                                    	   164: # Modifies:
                                    	   165: #		none
                                    	   166: # Returns:
                                    	   167: #		a0 = character or -1
                                    	   168: #------------------------------------------------------------------------------
                                    	   169: 
                                    	   170: SerialPeekChar:
                                    	   171: #	orcc	#$290							; mask off interrupts
02:00000000000008E8 3601008000      	   172: 	push a1
02:00000000000008ED FAFF070000      	   173: 	atom 07777
02:00000000000008F2 C5008000007C0400	   174: 	ldtu a0,SerHeadRcv			# check if anything is in buffer
02:00000000000008FA FCFF
02:00000000000008FC 45010000007C0000	   175: 	ldtu a1,SerTailRcv
02:0000000000000904 FCFF
02:0000000000000906 2630100E00      	   176: 	beq	a0,a1,.spcNoChars		# no?
02:000000000000090B C1200000027C0010	   177: 	ldbu a0,SerRcvBuf[a0]		# get byte from buffer
02:0000000000000913 FCFF7C00000000
02:000000000000091A 3701008000      	   178: 	pop a1
02:000000000000091F A304000000      	   179: 	ret
                                    	   180: .spcNoChars:
02:0000000000000924 8400F8FF07      	   181: 	ldi	a0,-1
02:0000000000000929 3701008000      	   182: 	pop a1
02:000000000000092E A304000000      	   183: 	ret
                                    	   184: 
                                    	   185: #------------------------------------------------------------------------------
                                    	   186: # SerialPeekChar
                                    	   187: #		Get a character directly from the I/O port. This bypasses the input
                                    	   188: # buffer.
                                    	   189: #
                                    	   190: # Stack Space:
                                    	   191: #		3 words
                                    	   192: # Parameters:
                                    	   193: #		none
                                    	   194: # Modifies:
                                    	   195: #		a0
                                    	   196: # Returns:
                                    	   197: #		a0 = character or -1
                                    	   198: #------------------------------------------------------------------------------
                                    	   199: 
                                    	   200: SerialPeekCharDirect:
                                    	   201: #	lda		COREID					; Ensure we have the IO Focus
                                    	   202: #	cmpa	IOFocusID
                                    	   203: #	bne		spcd0001
                                    	   204: # Disallow interrupts between status read and rx read.
                                    	   205: #	orcc	#$290						; mask off interrupts
02:0000000000000933 FAFF3F0000      	   206: 	atom 077777
02:0000000000000938 C1008000007C0400	   207: 	ldbu.io	a0,ACIA_STAT
02:0000000000000940 D0FE
02:0000000000000942 8820400000      	   208: 	and	a0,a0,8					# look for Rx not empty
02:0000000000000947 2620000A00      	   209: 	beq	a0,r0,.spcd0001
02:000000000000094C C1000000007C0000	   210: 	ldbu.io	a0,ACIA_RX
02:0000000000000954 D0FE
02:0000000000000956 A304000000      	   211: 	ret
                                    	   212: .spcd0001:
02:000000000000095B 8400F8FF07      	   213: 	ldi	a0,-1
02:0000000000000960 A304000000      	   214: 	ret
                                    	   215: 
                                    	   216: #------------------------------------------------------------------------------
                                    	   217: # SerialPutChar
                                    	   218: #    Put a character to the serial transmitter. This routine blocks until the
                                    	   219: # transmitter is empty. 
                                    	   220: #
                                    	   221: # Stack Space
                                    	   222: #		1 words
                                    	   223: # Parameters:
                                    	   224: #		a1 = character to put
                                    	   225: # Modifies:
                                    	   226: #		none
                                    	   227: #------------------------------------------------------------------------------
                                    	   228: 
                                    	   229: SerialPutChar:
02:0000000000000965 B600008000      	   230: 	push a0
                                    	   231: .spc0001:
                                    	   232: #	lda		COREID					; Ensure we have the IO Focus
                                    	   233: #	cmpa	IOFocusID
                                    	   234: #	bne		spc0001
02:000000000000096A FFFFFFFFFF      	   235: 	nop										# provide a window for an interrupt to occur
02:000000000000096F FFFFFFFFFF      	   236: 	nop
                                    	   237: 	# Between the status read and the transmit do not allow an
                                    	   238: 	# intervening interrupt.
02:0000000000000974 FAFF000000      	   239: 	atom 0777
02:0000000000000979 C5008000007C0400	   240: 	ldtu.io a0,ACIA_STAT	# wait until the uart indicates tx empty
02:0000000000000981 D0FE
02:0000000000000983 2E3820F2FF      	   241: 	bbc	a0,4,.spc0001			# branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000988 52010000007C0000	   242: 	stt.io a1,ACIA_TX			# send the byte
02:0000000000000990 D0FE
02:0000000000000992 B700008000      	   243: 	pop a0
02:0000000000000997 A304000000      	   244: 	ret
                                    	   245: 
                                    	   246: #------------------------------------------------------------------------------
                                    	   247: # Serial IRQ routine
                                    	   248: #
                                    	   249: # Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                                    	   250: # Received characters are buffered. If the buffer becomes full, new characters
                                    	   251: # will be lost.
                                    	   252: #
                                    	   253: # Stack Space:
                                    	   254: #		1 word
                                    	   255: # Parameters:
                                    	   256: #		none
                                    	   257: # Modifies:
                                    	   258: #		d,x
                                    	   259: # Returns:
                                    	   260: #		none
                                    	   261: #------------------------------------------------------------------------------
                                    	   262: 
                                    	   263: SerialIRQ:
                                    	   264: #	lda		$2000+$D3				; Serial active interrupt flag
                                    	   265: #	beq		notSerInt
                                    	   266: .sirqNxtByte:
02:000000000000099C C4008000007C0400	   267: 	ldt.io a0,ACIA_STAT			# look for IRQs
02:00000000000009A4 D0FE
02:00000000000009A6 2B28005200      	   268: 	bgt	a0,r0,.notSerInt	# quick test for any irqs
02:00000000000009AB 8820400000      	   269: 	and	a0,a0,8						# check bit 3 = rx full (not empty)
02:00000000000009B0 2638004C00      	   270: 	beq	a0,r0,.notRxInt1
02:00000000000009B5 C1000000007C0000	   271: 	ldbu.io	a0,ACIA_RX				# get data from Rx buffer to clear interrupt
02:00000000000009BD D0FE
02:00000000000009BF 45010000007C0000	   272: 	ldtu a1,SerTailRcv			# check if recieve buffer full
02:00000000000009C7 FCFF
02:00000000000009C9 0441080000      	   273: 	add	a1,a1,1
02:00000000000009CE 0841F87F00      	   274: 	and	a1,a1,0xfff
02:00000000000009D3 C5018000007C0400	   275: 	ldtu a2,SerHeadRcv
02:00000000000009DB FCFF
02:00000000000009DD 2650183600      	   276: 	beq	a1,a2,.sirqRxFull
02:00000000000009E2 52010000007C0000	   277: 	stt	a1,SerTailRcv			# update tail pointer
02:00000000000009EA FCFF
02:00000000000009EC 0441F8FF07      	   278: 	sub	a1,a1,1						# backup
02:00000000000009F1 0841F87F00      	   279: 	and	a1,a1,0xfff
02:00000000000009F6 D0400000027C0010	   280: 	stb	a0,SerRcvBuf[a1]	# store recieved byte in buffer
02:00000000000009FE FCFF7C00000000
02:0000000000000A05 C1002002007C1100	   281: 	ldbu a0,SerRcvXoff			# check if xoff already sent
02:0000000000000A0D FCFF
02:0000000000000A0F 272800C6FF      	   282: 	bne	a0,r0,.sirqNxtByte
02:0000000000000A14 A050FBFFFF      	   283: 	bsr	SerialRcvCount		# if more than 4070 chars in buffer
02:0000000000000A19 2838F8C1FF7CE60F	   284: 	blt	a0,4070,.sirqNxtByte
02:0000000000000A21 0000
02:0000000000000A23 8400980000      	   285: 	ldi	a0,XOFF						# send an XOFF
02:0000000000000A28 50000002007C1000	   286: 	stb	r0,SerRcvXon			# clear XON status
02:0000000000000A30 FCFF
02:0000000000000A32 D0002002007C1100	   287: 	stb	a0,SerRcvXoff			# set XOFF status
02:0000000000000A3A FCFF
02:0000000000000A3C D0000000007C0000	   288: 	stb.io a0,ACIA_TX
02:0000000000000A44 D0FE
02:0000000000000A46 20ACFEFFFF      	   289: 	bra	.sirqNxtByte     	# check the status for another byte
                                    	   290: 	# Process other serial IRQs
                                    	   291: .notRxInt1:
                                    	   292: .sirqRxFull:
                                    	   293: .notRxInt:
                                    	   294: .notSerInt:
02:0000000000000A4B A304000000      	   295: 	ret
                                    	   296: 
                                    	   297: #------------------------------------------------------------------------------
                                    	   298: # Put a string to the serial port.
                                    	   299: #
                                    	   300: # Parameters:
                                    	   301: #		a0 = pointer to string
                                    	   302: # Modifies:
                                    	   303: #		none
                                    	   304: # Returns:
                                    	   305: #		none
                                    	   306: #------------------------------------------------------------------------------
                                    	   307: 
                                    	   308: SerialPutString:
02:0000000000000A50 B63C108001      	   309: 	push lr1,a0,a1
                                    	   310: .sps2:
02:0000000000000A55 4021000000      	   311: 	ldb	a1,[a0]
02:0000000000000A5A 8420080000      	   312: 	add	a0,a0,1
02:0000000000000A5F 2658000600      	   313: 	beq	a1,r0,.spsXit
02:0000000000000A64 A002FEFFFF      	   314: 	bsr	SerialPutChar
02:0000000000000A69 20D8FFFFFF      	   315: 	bra	.sps2
                                    	   316: .spsXit:
02:0000000000000A6E B73C108001      	   317: 	pop lr1,a0,a1
02:0000000000000A73 A304000000      	   318: 	ret
                                    	   319: 
                                    	   320: #------------------------------------------------------------------------------
                                    	   321: #------------------------------------------------------------------------------
                                    	   322: 
                                    	   323: SerialTest:
                                    	   324: .0001:
02:0000000000000A78 0401080200      	   325: 	ldi a1,'A'
02:0000000000000A7D A0D0FDFFFF      	   326: 	bsr SerialPutChar
02:0000000000000A82 20ECFFFFFF      	   327: 	bra .0001
                                    	   328: 
                                    	   329: #nmeSerial:
                                    	   330: #	fcb		"Serial",0
                                    	   331: 
                                    	   332: .global SerialInit
                                    	   333: .global SerialPutString
                                    	   334: .global SerialTest
                                    	   335: 

Source: "boot.asm"
                                    	   519: 	.include "xmodem.asm"

Source: "xmodem.asm"
                                    	     1: # ============================================================================
                                    	     2: #        __
                                    	     3: #   \\__/ o\    (C) 2022-2023  Robert Finch, Waterloo
                                    	     4: #    \  __ /    All rights reserved.
                                    	     5: #     \/_//     robfinch<remove>@opencores.org
                                    	     6: #       ||
                                    	     7: #  
                                    	     8: #
                                    	     9: # BSD 3-Clause License
                                    	    10: # Redistribution and use in source and binary forms, with or without
                                    	    11: # modification, are permitted provided that the following conditions are met:
                                    	    12: #
                                    	    13: # 1. Redistributions of source code must retain the above copyright notice, this
                                    	    14: #    list of conditions and the following disclaimer.
                                    	    15: #
                                    	    16: # 2. Redistributions in binary form must reproduce the above copyright notice,
                                    	    17: #    this list of conditions and the following disclaimer in the documentation
                                    	    18: #    and/or other materials provided with the distribution.
                                    	    19: #
                                    	    20: # 3. Neither the name of the copyright holder nor the names of its
                                    	    21: #    contributors may be used to endorse or promote products derived from
                                    	    22: #    this software without specific prior written permission.
                                    	    23: #
                                    	    24: # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                                    	    25: # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                                    	    26: # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                    	    27: # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                                    	    28: # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                                    	    29: # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                                    	    30: # SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                                    	    31: # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                                    	    32: # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                                    	    33: # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                    	    34: #                                                                          
                                    	    35: # ============================================================================
                                    	    36: 
                                    	    37: 	.extern Delay3s
                                    	    38: #
                                    	    39: # Xmodem variables
                                    	    40: #
                                    	    41: .set SOH,1
                                    	    42: .set EOT,4
                                    	    43: .set ACK,6
                                    	    44: .set LF,10
                                    	    45: .set CR,13
                                    	    46: .set NAK,21
                                    	    47: .set ETB,23			# end of transfer block
                                    	    48: .set CAN,24
                                    	    49: .set xm_timer,0xFFFC0020
                                    	    50: .set xm_protocol,0xFFFC0028
                                    	    51: .set xm_flag,0xFFFC0029
                                    	    52: .set xm_checksum,0xFFFC0030
                                    	    53: .set xm_tmp2,0xFFFC0040
                                    	    54: .set xm_tmp,0xFFFC0048
                                    	    55: .set xm_packetnum,0xFFFC0050
                                    	    56: .set xm_crc,0xFFFC0058
                                    	    57: .set xm_ibuf,0xFFFC0080
                                    	    58: .set xm_obuf,0xFFFC0100
                                    	    59: 
                                    	    60: # ------------------------------------------------------------------------------
                                    	    61: # Send data using XModem.
                                    	    62: #
                                    	    63: # Register usage
                                    	    64: #		t2 = xm_flag
                                    	    65: #		t3 = xm_protocol
                                    	    66: #		t5 = xm_packetnum
                                    	    67: # ------------------------------------------------------------------------------
                                    	    68: 
                                    	    69: xm_SendStart:
02:0000000000000A87 A098F9FFFF      	    70: 	bsr	GetRange
02:0000000000000A8C 46140086007C3004	    71: 	ldo a3,mon_r1					# a3 = buffer address
02:0000000000000A94 FCFF
02:0000000000000A96 C6140088007C4004	    72: 	ldo a4,mon_r2					# a4 = last address
02:0000000000000A9E FCFF
02:0000000000000AA0 8404080000      	    73: 	ldi	t5,1							# packet numbers start at one
                                    	    74: 	# Wait for receiver to send a NAK
                                    	    75: xm_send:							
02:0000000000000AA5 A0D8FAFFFF      	    76: 	bsr SerialGetChar			# select blocking input
02:0000000000000AAA 2620F80B007C1500	    77: 	beq a0,NAK,xm_send5		# should have got a NAK
02:0000000000000AB2 0000
02:0000000000000AB4 2728F8F9FF7C4300	    78: 	bne a0,'C',xm_send		# or a 'C'
02:0000000000000ABC 0000
                                    	    79: xm_send5:
02:0000000000000ABE 8F23000000      	    80: 	mov t3,a0
                                    	    81: xm_send4:
02:0000000000000AC3 8400080000      	    82: 	ldi a0,SOH
02:0000000000000AC8 A03AFDFFFF      	    83: 	bsr SerialPutChar			# send start
02:0000000000000ACD 8F20010000      	    84: 	mov a0,t5							# send packet number
02:0000000000000AD2 A026FDFFFF      	    85: 	bsr SerialPutChar
02:0000000000000AD7 8A20F8FF07      	    86: 	xor a0,a0,-1					# one's complement
02:0000000000000ADC A012FDFFFF      	    87: 	bsr SerialPutChar
02:0000000000000AE1 0401000000      	    88: 	ldi a1,0							# a1 = byte count
                                    	    89: xm_send1:
02:0000000000000AE6 CF00160000      	    90: 	ldb a0,[a3+a1]				# grab a byte from the buffer
02:0000000000000AEB A0F4FCFFFF      	    91: 	bsr SerialPutChar			# send it out
02:0000000000000AF0 0441080000      	    92: 	add a1,a1,1
02:0000000000000AF5 2E4838F8FF      	    93: 	bbc a1,7,xm_send1			# number of bytes in payload
02:0000000000000AFA 27F8F811007C4300	    94: 	bne t3,'C',xm_send2		# CRC protocol?
02:0000000000000B02 0000
02:0000000000000B04 A028050000      	    95: 	bsr	xm_calc_crc				# compute CRC
02:0000000000000B09 D800401001      	    96: 	ror a0,a0,8						# transfer high eight bits first, so
02:0000000000000B0E A0AEFCFFFF      	    97: 	bsr SerialPutChar
02:0000000000000B13 D800400C01      	    98: 	rol a0,a0,8
02:0000000000000B18 2014000000      	    99: 	bra	xm_send3
                                    	   100: xm_send2:
02:0000000000000B1D A06A040000      	   101: 	bsr	xm_calc_checksum
                                    	   102: xm_send3:
02:0000000000000B22 A086FCFFFF      	   103: 	bsr SerialPutChar			# send low byte
02:0000000000000B27 A0D4F9FFFF      	   104: 	bsr SerialGetChar			# block until input is present
02:0000000000000B2C 2738F8CBFF7C0600	   105: 	bne a0,ACK,xm_send4		# not an ACK then resend the record
02:0000000000000B34 0000
02:0000000000000B36 8424090000      	   106: 	add t5,t5,1						# increment packet number
02:0000000000000B3B 0414050400      	   107: 	add a3,a3,128					# advance buffer pointer
02:0000000000000B40 28184DC1FF      	   108: 	blt a3,a4,xm_send4		# go send next record
02:0000000000000B45 8400200000      	   109: 	ldi a0,EOT
02:0000000000000B4A A036FCFFFF      	   110: 	bsr SerialPutChar			# send end of transmission
02:0000000000000B4F A02CFCFFFF      	   111: 	bsr SerialPutChar			# send end of transmission
02:0000000000000B54 A022FCFFFF      	   112: 	bsr SerialPutChar			# send end of transmission
02:0000000000000B59 A304000000      	   113: 	ret
                                    	   114: 
                                    	   115: # ------------------------------------------------------------------------------
                                    	   116: # Get a byte, checking for a receive timeout.
                                    	   117: #
                                    	   118: # Returns:
                                    	   119: #		a0 = byte (0 to 255) or -1 if timed out
                                    	   120: # ------------------------------------------------------------------------------
                                    	   121: 
                                    	   122: xm_getbyte:
02:0000000000000B5E 3601008000      	   123: 	push a1
                                    	   124: xm_gb1:
02:0000000000000B63 46010004007C2000	   125: 	ldo a1,xm_timer
02:0000000000000B6B FCFF
02:0000000000000B6D 2F48580C00      	   126: 	bbs a1,11,xm_gb2					# check the timeout - 2048 ticks (3 seconds approx.)
02:0000000000000B72 A082FBFFFF      	   127: 	bsr SerialPeekCharDirect	# non-blocking, try and get a character
02:0000000000000B77 282000F6FF      	   128: 	blt a0,r0,xm_gb1					# if no character, try again
                                    	   129: #	bsr	xm_outbyteAsHex
02:0000000000000B7C 3701008000      	   130: 	pop a1
02:0000000000000B81 A304000000      	   131: 	ret
                                    	   132: xm_gb2:
02:0000000000000B86 8400F8FF07      	   133: 	ldi	a0,-1
02:0000000000000B8B 3701008000      	   134: 	pop a1
02:0000000000000B90 A304000000      	   135: 	ret
                                    	   136: 
                                    	   137: # ------------------------------------------------------------------------------
                                    	   138: # XModem Receive
                                    	   139: #
                                    	   140: # Register usage
                                    	   141: #		t2 = xm_flag
                                    	   142: #		t3 = xm_protocol
                                    	   143: #		t4 = xm_packetnum (last seen)
                                    	   144: #		t5 = xm_packetnum
                                    	   145: # Parameters:
                                    	   146: #		none
                                    	   147: # Modifies:
                                    	   148: #		All
                                    	   149: #	Returns:
                                    	   150: #		none
                                    	   151: # ------------------------------------------------------------------------------
                                    	   152: 
                                    	   153: xm_ReceiveStart:
02:0000000000000B95 041E0000007C0000	   154: 	ldi gp,0xffff0000
02:0000000000000B9D FFFF7C00000000
02:0000000000000BA4 A0BAEBFFFF      	   155: 	bsr	Delay3s				# give a little bit of time for sender
02:0000000000000BA9 A0B0EBFFFF      	   156: 	bsr	Delay3s
02:0000000000000BAE A0A6EBFFFF      	   157: 	bsr	Delay3s
02:0000000000000BB3 A036F7FFFF      	   158: 	bsr	GetNumber			# Get the transfer address
02:0000000000000BB8 262800C8FD      	   159: 	beq a0,r0,Monitor	# Make sure we got a value
02:0000000000000BBD 0F34000000      	   160: 	mov a3,a0					# a3 = transfer address
                                    	   161: #	ldx	mon_numwka+2	; X = transfer address
02:0000000000000BC2 0404000000      	   162: 	ldi t4,0					# packet num = 0
02:0000000000000BC7 8404000000      	   163: 	ldi t5,0
02:0000000000000BCC 8400180200      	   164: 	ldi	a0,'C'				# try for CRC first
02:0000000000000BD1 8F23000000      	   165: 	mov t3,a0
                                    	   166: xm_receive:
02:0000000000000BD6 0401100000      	   167: 	ldi	a1,2					# number of times to retry -1
                                    	   168: xm_rcv5:
02:0000000000000BDB 8FE0000000      	   169: 	mov	a0,t3					# indicate we want a transfer (send protocol byte)
02:0000000000000BE0 A00AFBFFFF      	   170: 	bsr SerialPutChar
                                    	   171: xm_rcv4:
02:0000000000000BE5 53000004007C2000	   172: 	sto r0,xm_timer		# clear the timeout
02:0000000000000BED FCFF
                                    	   173: xm_rcv1:
02:0000000000000BEF A0DEFEFFFF      	   174: 	bsr	xm_getbyte
02:0000000000000BF4 2838009200      	   175: 	blt a0,r0,xm_retry1	# timeout on protocol id?
02:0000000000000BF9 2638F81B007C0100	   176: 	beq a0,SOH,xm_SOH	# it should be start of a transfer
02:0000000000000C01 0000
02:0000000000000C03 2628F885007C0400	   177: 	beq a0,EOT,xm_EOT	# or end of transfer (EOT)
02:0000000000000C0B 0000
02:0000000000000C0D 2628F8E5FF7C1800	   178: 	beq a0,CAN,xm_receive	# might be a cancel
02:0000000000000C15 0000
02:0000000000000C17 2628F87B007C1700	   179: 	beq a0,ETB,xm_EOT
02:0000000000000C1F 0000
                                    	   180: xm_rcv_nak:					# wasn't a valid start so
02:0000000000000C21 8400A80000      	   181: 	ldi a0,NAK				# send a NAK
02:0000000000000C26 A07EFAFFFF      	   182: 	bsr SerialPutChar	# and try again
02:0000000000000C2B 2074FFFFFF      	   183: 	bra	xm_rcv4
                                    	   184: xm_SOH:
02:0000000000000C30 A05CFEFFFF      	   185: 	bsr	xm_getbyte		# get packet number
02:0000000000000C35 2820006400      	   186: 	blt a0,r0,xm_rcv_to1
02:0000000000000C3A 8F24000000      	   187: 	mov t5,a0					# t5 = packet num
02:0000000000000C3F 8F21000000      	   188: 	mov a2,a0					# save it
02:0000000000000C44 A034FEFFFF      	   189: 	bsr	xm_getbyte		# get complement of packet number
02:0000000000000C49 2820005A00      	   190: 	blt a0,r0,xm_rcv_to2
02:0000000000000C4E 8220182000      	   191: 	add a0,a0,a2			# add the two values
02:0000000000000C53 8820F80700      	   192: 	and a0,a0,0xff		# the sum should be $FF
02:0000000000000C58 842008F807      	   193: 	sub a0,a0,0xff
02:0000000000000C5D 0F23000000      	   194: 	mov	t2,a0					# xm_flag, should be storing a zero if there is no error
02:0000000000000C62 8401000000      	   195: 	ldi a2,0					# a2 = payload byte counter
                                    	   196: xm_rcv2:
02:0000000000000C67 A0EEFDFFFF      	   197: 	bsr	xm_getbyte
02:0000000000000C6C 2828004800      	   198: 	blt a0,r0,xm_rcv_to1
02:0000000000000C71 D7001E0000      	   199: 	stb a0,[a3+a2]		# store the byte to memory
02:0000000000000C76 8461080000      	   200: 	add a2,a2,1
02:0000000000000C7B 2E6038F6FF      	   201: 	bbc a2,7,xm_rcv2	# 128 bytes per payload
02:0000000000000C80 A0BCFDFFFF      	   202: 	bsr	xm_getbyte		# get checksum or CRC byte
02:0000000000000C85 2820003C00      	   203: 	blt a0,r0,xm_rcv_to1
02:0000000000000C8A 8F22000000      	   204: 	mov	t1,a0					# stuff checksum/CRC byte
02:0000000000000C8F 27F8F81B007C4300	   205: 	bne t3,'C',xm_rcv_chksum	# check protocol
02:0000000000000C97 0000
02:0000000000000C99 A08AFDFFFF      	   206: 	bsr	xm_getbyte		# get low order CRC byte
02:0000000000000C9E 2838002E00      	   207: 	blt a0,r0,xm_rcv_to1
02:0000000000000CA3 08A1F80700      	   208: 	and a1,t1,0xff		# get the high byte
02:0000000000000CA8 5801400001      	   209: 	asl a1,a1,8
02:0000000000000CAD 0228100800      	   210: 	or s0,a0,a1				# combine high and low byte
02:0000000000000CB2 0401000400      	   211: 	ldi a1,128				# number of bytes in buffer
02:0000000000000CB7 A0C2010000      	   212: 	bsr	xm_calc_crc		# compute the CRC-16 for the received data
02:0000000000000CBC 0F01020000      	   213: 	mov a1,s0					# and compare to received value
02:0000000000000CC1 201E000000      	   214: 	bra	xm_rcv3
                                    	   215: xm_rcv_chksum:
02:0000000000000CC6 A018010000      	   216: 	bsr	xm_calc_checksum
02:0000000000000CCB 08A1F80700      	   217: 	and a1,t1,0xff		# where we stuffed the byte
                                    	   218: xm_rcv3:
02:0000000000000CD0 272810A8FF      	   219: 	bne a0,a1,xm_rcv_nak	# if not the same, NAK
02:0000000000000CD5 8FC0000000      	   220: 	mov a0,t2					# get back flag value
02:0000000000000CDA 273800A2FF      	   221: 	bne	a0,r0,xm_rcv_nak	# bad packet number?
02:0000000000000CDF 8400300000      	   222: 	ldi a0,ACK				# packet recieved okay, send back an ACK
02:0000000000000CE4 A002F9FFFF      	   223: 	bsr SerialPutChar
02:0000000000000CE9 2600497EFF      	   224: 	beq	t4,t5,xm_rcv4		# same packet received, dont update buffer pointer
02:0000000000000CEE 0F24010000      	   225: 	mov t4,t5						# update last seen packet number
02:0000000000000CF3 0414050400      	   226: 	add a3,a3,128				# increment buffer pointer
02:0000000000000CF8 20DAFDFFFF      	   227: 	bra	xm_rcv4					# and go back for next packet
                                    	   228: xm_rcv_to2:
                                    	   229: xm_rcv_to1:
02:0000000000000CFD CA80070000      	   230: 	lda a0,msgXmTimeout[gp]
02:0000000000000D02 A086F2FFFF      	   231: 	bsr DisplayString
02:0000000000000D07 2084F4FFFF      	   232: 	bra	Monitor
                                    	   233: xm_EOT:								# end of transmission received, return
02:0000000000000D0C 8400300000      	   234: 	ldi a0,ACK
02:0000000000000D11 A0A8F8FFFF      	   235: 	bsr SerialPutChar		# ACK the EOT
02:0000000000000D16 2066F4FFFF      	   236: 	bra	Monitor
                                    	   237: xm_retry1:
02:0000000000000D1B 0441F8FF07      	   238: 	sub a1,a1,1
02:0000000000000D20 2B58005CFF      	   239: 	bgt a1,r0,xm_rcv5
02:0000000000000D25 8FE0000000      	   240: 	mov a0,t3						# are we already lowered down to checksum protocol?
02:0000000000000D2A 2628F80D007C1500	   241: 	beq a0,NAK,xm_noTransmitter		# did we try both checksum and CRC?
02:0000000000000D32 0000
02:0000000000000D34 8400A80000      	   242: 	ldi a0,NAK
02:0000000000000D39 8F23000000      	   243: 	mov t3,a0						# set protocol
02:0000000000000D3E 2030FDFFFF      	   244: 	bra xm_receive
                                    	   245: xm_noTransmitter:
02:0000000000000D43 CA80870200      	   246: 	lda a0,msgXmNoTransmitter[gp]
02:0000000000000D48 A0FAF1FFFF      	   247: 	bsr DisplayString
02:0000000000000D4D 20F8F3FFFF      	   248: 	bra	Monitor	
                                    	   249: 
                                    	   250: 	.rodata
                                    	   251: msgXmTimeout:
03:0000000000000000 586D6F64656D3A20	   252: 	.byte "Xmodem: timed out",CR,LF,0
03:0000000000000008 74696D6564206F75
03:0000000000000010 74
03:0000000000000011 0D
03:0000000000000012 0A
03:0000000000000013 00
                                    	   253: msgXmNoTransmitter:
03:0000000000000014 584D6F64656D3A20	   254: 	.byte "XModem: transmitter not responding",CR,LF,0
03:000000000000001C 7472616E736D6974
03:0000000000000024 746572206E6F7420
03:000000000000002C 726573706F6E6469
03:0000000000000034 6E67
03:0000000000000036 0D
03:0000000000000037 0A
03:0000000000000038 00
                                    	   255: 
                                    	   256: 	.text
                                    	   257: # ------------------------------------------------------------------------------
                                    	   258: # Calculate checksum value. The checksum is simply the low order eight bits of
                                    	   259: # the sum of all the bytes in the payload area.
                                    	   260: #
                                    	   261: # Stack space:
                                    	   262: #		two words
                                    	   263: #	Modifies:
                                    	   264: #		xm_checksum		contains the checksum value for the record
                                    	   265: # Parameters:
                                    	   266: #		a0 = buffer address
                                    	   267: #	Returns:
                                    	   268: #		a0 = checksum
                                    	   269: # ------------------------------------------------------------------------------
                                    	   270: 
                                    	   271: xm_calc_checksum:
02:0000000000000D52 3661408101      	   272: 	push a1,a2,a3
02:0000000000000D57 0401000000      	   273: 	ldi a1,0
02:0000000000000D5C 0414000000      	   274: 	ldi a3,0
                                    	   275: xm_cs1:
02:0000000000000D61 CF21800100      	   276: 	ldb a2,[a0+a3]
02:0000000000000D66 04140D0000      	   277: 	add a3,a3,1
02:0000000000000D6B 0241182000      	   278: 	add a1,a1,a2
02:0000000000000D70 2808FDF9FF7C8000	   279: 	blt a3,128,xm_cs1
02:0000000000000D78 0000
02:0000000000000D7A 0841F80700      	   280: 	and a1,a1,0xff
02:0000000000000D7F 50010006007C3000	   281: 	stb	a1,xm_checksum
02:0000000000000D87 FCFF
02:0000000000000D89 8F40000000      	   282: 	mov a0,a1
02:0000000000000D8E 3761408101      	   283: 	pop a1,a2,a3
02:0000000000000D93 A304000000      	   284: 	ret
                                    	   285: 
                                    	   286: # ------------------------------------------------------------------------------
                                    	   287: # Compute CRC-16 of buffer.
                                    	   288: #
                                    	   289: #int calcrc(char *ptr, int count)
                                    	   290: #{
                                    	   291: #    int  crc;
                                    	   292: #    char i;
                                    	   293: #    crc = 0;
                                    	   294: #    while (--count >= 0)
                                    	   295: #    {
                                    	   296: #        crc = crc ^ (int) (*ptr++ << 8);
                                    	   297: #        i = 8;
                                    	   298: #        do
                                    	   299: #        {
                                    	   300: #            if (crc & 0x8000)
                                    	   301: #                crc = crc << 1 ^ 0x1021;
                                    	   302: #            else
                                    	   303: #                crc = crc << 1;
                                    	   304: #        } while(--i);
                                    	   305: #    }
                                    	   306: #    return (crc);
                                    	   307: #}
                                    	   308: #
                                    	   309: # Modifies:
                                    	   310: #		xm_crc variable
                                    	   311: # Parameters:
                                    	   312: #		a0 = buffer address
                                    	   313: #		a1 = buffer length
                                    	   314: # Returns:
                                    	   315: #		a0 = crc
                                    	   316: # ------------------------------------------------------------------------------
                                    	   317: 
                                    	   318: xm_calc_crc:
02:0000000000000D98 B6014D5502      	   319: 	push a2,a3,a4,a5
02:0000000000000D9D 8401000000      	   320: 	ldi a2,0					# crc = 0
02:0000000000000DA2 0415000000      	   321: 	ldi	a5,0					# a5 = byte count
                                    	   322: xm_crc1:
02:0000000000000DA7 4F34900100      	   323: 	ldbu a3,[a0+a5]		# get byte
02:0000000000000DAC 5814400001      	   324: 	asl a3,a3,8
02:0000000000000DB1 8261401100      	   325: 	xor a2,a2,a3			# crc = crc ^ tmp
02:0000000000000DB6 8414000000      	   326: 	ldi a4,0					# iter count
                                    	   327: xm_crc4:
02:0000000000000DBB D801080001      	   328: 	asl a2,a2,1
02:0000000000000DC0 2E70800400      	   329: 	bbc	a2,16,xm_crc3	# check for $10000, no?
02:0000000000000DC5 8A61088100      	   330: 	xor a2,a2,0x1021	# and xor
                                    	   331: xm_crc3:
02:0000000000000DCA 84340D0000      	   332: 	add a4,a4,1
02:0000000000000DCF 2820FDF7FF7C0800	   333: 	blt a4,8,xm_crc4	# repeat eight times
02:0000000000000DD7 0000
02:0000000000000DD9 04550D0000      	   334: 	add a5,a5,1				# increment byte count
02:0000000000000DDE 284815E4FF      	   335: 	blt a5,a1,xm_crc1
02:0000000000000DE3 8860F8FF077CFFFF	   336: 	and a0,a2,0xffff	# we want only a 16-bit CRC
02:0000000000000DEB 0000
02:0000000000000DED D100000B007C5800	   337: 	stw a0,xm_crc
02:0000000000000DF5 FCFF
02:0000000000000DF7 B7014D5502      	   338: 	pop a2,a3,a4,a5
02:0000000000000DFC A304000000      	   339: 	ret
                                    	   340: 
                                    	   341: #xm_outbyteAsHex:
                                    	   342: #	pshs	d
                                    	   343: #	ldd		CharOutVec						; get current char out vector
                                    	   344: #	pshs	d											; save it
                                    	   345: #	ldd		#ScreenDisplayChar		; set output vector to screen display
                                    	   346: #	std		CharOUtVec
                                    	   347: #	ldd		2,s										; get passed data
                                    	   348: #	lbsr	DispByteAsHex					; and display on-screen
                                    	   349: #	ldb		#' '
                                    	   350: #	lbsr	ScreenDisplayChar
                                    	   351: #	puls	d											; get back old char out vector
                                    	   352: #	std		CharOutVec						; and restore it
                                    	   353: #	puls	d											; restore input arguments
                                    	   354: #	rts
                                    	   355: 
                                    	   356: 	

Source: "boot.asm"
                                    	   520: 	.include "keyboard.asm"

Source: "keyboard.asm"
                                    	     1: #==============================================================================
                                    	     2: # Keyboard stuff
                                    	     3: #
                                    	     4: # KeyState2_
                                    	     5: # 876543210
                                    	     6: # ||||||||+ = shift
                                    	     7: # |||||||+- = alt
                                    	     8: # ||||||+-- = control
                                    	     9: # |||||+--- = numlock
                                    	    10: # ||||+---- = capslock
                                    	    11: # |||+----- = scrolllock
                                    	    12: # ||+------ =
                                    	    13: # |+------- = 
                                    	    14: # +-------- = extended
                                    	    15: #
                                    	    16: #==============================================================================
                                    	    17: 
                                    	    18: 	.set KEYBD,0xFEDC0000
                                    	    19: 	.set _KeyState1,0xFFFC0420
                                    	    20: 	.set _KeyState2,0xFFFC0421
                                    	    21: 	.set _KeybdEcho,0xFFFC0422
                                    	    22: 	.set KeybdWaitFlag,0xFFFC0423
                                    	    23: 	.set KeybdLEDs,0xFFFC0424
                                    	    24: 	.set SC_F12,7
                                    	    25: 	.set SC_C,0x21
                                    	    26: 	.set SC_T,0x2c
                                    	    27: 	.set SC_Z,0x1a
                                    	    28: 	.set SC_KEYUP,0xf0
                                    	    29: 	.set SC_EXTEND,0xE0
                                    	    30: 	.set SC_CTRL,0x14
                                    	    31: 	.set SC_RSHIFT,0x59
                                    	    32: 	.set SC_NUMLOCK,0x77
                                    	    33: 	.set SC_SCROLLLOCK,0x7E
                                    	    34: 	.set SC_CAPSLOCK,0x58
                                    	    35: 	.set SC_ALT,0x11
                                    	    36: 	.set SC_LSHIFT,0x12
                                    	    37: 	.set SC_DEL,0x71				# extend
                                    	    38: 	.set SC_LCTRL,0x58
                                    	    39: 	.set SC_TAB,0x0D
                                    	    40: 
                                    	    41: 	.text
                                    	    42: _KeybdInit:
02:0000000000000E01 50000084007C2004	    43: 	stb r0,_KeyState1
02:0000000000000E09 FCFF
02:0000000000000E0B 50002084007C2104	    44: 	stb r0,_KeyState2
02:0000000000000E13 FCFF
02:0000000000000E15 A304000000      	    45: 	ret
                                    	    46: 
                                    	    47: _KeybdGetStatus:
02:0000000000000E1A 44018000007C0400	    48: 	ldt.io a1,KEYBD+4
02:0000000000000E22 DCFE
02:0000000000000E24 A304000000      	    49: 	ret
                                    	    50: 
                                    	    51: # Get the scancode from the keyboard port
                                    	    52: 
                                    	    53: _KeybdGetScancode:
02:0000000000000E29 0401000000      	    54: 	ldi a1,0
02:0000000000000E2E 44010000007C0000	    55: 	ldt.io a1,KEYBD				# get the scan code
02:0000000000000E36 DCFE
02:0000000000000E38 52008000007C0400	    56: 	stt.io r0,KEYBD+4			# clear receive register
02:0000000000000E40 DCFE
02:0000000000000E42 A304000000      	    57: 	ret
                                    	    58: 
                                    	    59: # Recieve a byte from the keyboard, used after a command is sent to the
                                    	    60: # keyboard in order to wait for a response.
                                    	    61: 
                                    	    62: KeybdRecvByte:
02:0000000000000E47 3614008000      	    63: 	push a3
02:0000000000000E4C 0414200300      	    64: 	ldi a3,100					# wait up to 1s
                                    	    65: .0003:
02:0000000000000E51 A092FFFFFF      	    66: 	bsr	_KeybdGetStatus	# wait for response from keyboard
02:0000000000000E56 2858001000      	    67: 	blt a1,r0,.0004			# is input buffer full ? yes, branch
02:0000000000000E5B A06A090000      	    68: 	bsr	Wait10ms				# wait a bit
02:0000000000000E60 0414FDFF07      	    69: 	sub a3,a3,1
02:0000000000000E65 2B000DF6FF      	    70: 	bgt a3,a0,.0003			# go back and try again
02:0000000000000E6A 3714008000      	    71: 	pop a3
02:0000000000000E6F 0401F8FF07      	    72: 	ldi a1,-1
02:0000000000000E74 A304000000      	    73: 	ret
                                    	    74: .0004:
02:0000000000000E79 A060FFFFFF      	    75: 	bsr	_KeybdGetScancode
02:0000000000000E7E 3714008000      	    76: 	pop a3
02:0000000000000E83 A304000000      	    77: 	ret
                                    	    78: 
                                    	    79: # Wait until the keyboard transmit is complete
                                    	    80: 
                                    	    81: KeybdWaitTx:
02:0000000000000E88 3614008000      	    82: 	push a3
02:0000000000000E8D 0414200300      	    83: 	ldi a3,100		# wait a max of 1s
                                    	    84: .0001:
02:0000000000000E92 A010FFFFFF      	    85: 	bsr	_KeybdGetStatus
02:0000000000000E97 2F58301000      	    86: 	bbs a1,6,.0002	# check for transmit complete bit
02:0000000000000E9C A0E8080000      	    87: 	bsr	Wait10ms		# delay a little bit
02:0000000000000EA1 0414FDFF07      	    88: 	sub a3,a3,1
02:0000000000000EA6 2B0005F6FF      	    89: 	bgt a3,r0,.0001	# go back and try again
02:0000000000000EAB 3714008000      	    90: 	pop a3
02:0000000000000EB0 0401F8FF07      	    91: 	ldi a1,-1
02:0000000000000EB5 A304000000      	    92: 	ret
                                    	    93: .0002:
02:0000000000000EBA 3714008000      	    94: 	pop a3
02:0000000000000EBF 0401000000      	    95: 	ldi a1,0
02:0000000000000EC4 A304000000      	    96: 	ret
                                    	    97: 
                                    	    98: 
                                    	    99: #------------------------------------------------------------------------------
                                    	   100: # Get key pending status into a1
                                    	   101: #------------------------------------------------------------------------------
                                    	   102: 
                                    	   103: CheckForKey:
02:0000000000000EC9 44018000007C0400	   104: 	ldt.io a1,KEYBD+4
02:0000000000000ED1 DCFE
02:0000000000000ED3 5801380401      	   105: 	lsr a1,a1,7
02:0000000000000ED8 0841080000      	   106: 	and a1,a1,1
02:0000000000000EDD A304000000      	   107: 	ret
                                    	   108: 
                                    	   109: #------------------------------------------------------------------------------
                                    	   110: #------------------------------------------------------------------------------
                                    	   111: 
                                    	   112: GetKey:
02:0000000000000EE2 B660000001      	   113: 	push a0,a2
02:0000000000000EE7 A082000000      	   114: 	bsr	KeybdGetCharWait
02:0000000000000EEC C0014084007C2204	   115: 	ldb a2,_KeybdEcho			# is keyboard echo on ?
02:0000000000000EF4 FCFF
02:0000000000000EF6 2668000C00      	   116: 	beq a2,r0,.0001
02:0000000000000EFB 2758F807007C0D00	   117: 	bne a1,'\r',.0002
02:0000000000000F03 0000
02:0000000000000F05 A0D0EEFFFF      	   118: 	bsr CRLF							# convert CR keystroke into CRLF
                                    	   119: .0002:
02:0000000000000F0A A074E6FFFF      	   120: 	bsr DisplayChar
                                    	   121: .0001:
02:0000000000000F0F B760000001      	   122: 	pop a0,a2
02:0000000000000F14 A304000000      	   123: 	ret
                                    	   124: 
                                    	   125: 
                                    	   126: #------------------------------------------------------------------------------
                                    	   127: #------------------------------------------------------------------------------
                                    	   128: 
                                    	   129: KeybdGetCharNoWait:
02:0000000000000F19 50006084007C2304	   130: 	stb r0,KeybdWaitFlag
02:0000000000000F21 FCFF
02:0000000000000F23 2028000000      	   131: 	bra	KeybdGetChar
                                    	   132: 
                                    	   133: KeybdGetCharWait:
02:0000000000000F28 0401F8FF07      	   134: 	ldi a1,-1
02:0000000000000F2D 50016084007C2304	   135: 	stb a1,KeybdWaitFlag
02:0000000000000F35 FCFF
                                    	   136: 
                                    	   137: KeybdGetChar:
02:0000000000000F37 B600008000      	   138: 	push a0
                                    	   139: B0003:
02:0000000000000F3C A0BCFDFFFF      	   140: 	bsr	_KeybdGetStatus			# check keyboard status for key available
02:0000000000000F41 2850000E00      	   141: 	blt a1,r0,.0006					# yes, go process
02:0000000000000F46 40016084007C2304	   142: 	ldb a1,KeybdWaitFlag		# are we willing to wait for a key ?
02:0000000000000F4E FCFF
02:0000000000000F50 284000F6FF      	   143: 	blt a1,r0,B0003					# yes, branch back
02:0000000000000F55 0401F8FF07      	   144: 	ldi a1,-1								# flag no char available
02:0000000000000F5A A304000000      	   145: 	ret
                                    	   146: .0006:
02:0000000000000F5F A094FDFFFF      	   147: 	bsr	_KeybdGetScancode
                                    	   148: .0001:
02:0000000000000F64 8400080000      	   149: 	ldi a0,1
02:0000000000000F69 D20000E0077C00FF	   150: 	stt.io a0,leds
02:0000000000000F71 DFFE
02:0000000000000F73 2658F893007CF000	   151: 	beq a1,SC_KEYUP,doKeyup
02:0000000000000F7B 0000
02:0000000000000F7D 2648F899007CE000	   152: 	beq a1,SC_EXTEND,doExtend
02:0000000000000F85 0000
02:0000000000000F87 2648F8A3007C1400	   153: 	beq a1,SC_CTRL,doCtrl
02:0000000000000F8F 0000
02:0000000000000F91 2648F807017C1200	   154: 	beq a1,SC_LSHIFT,doShift
02:0000000000000F99 0000
02:0000000000000F9B 2658F801017C5900	   155: 	beq a1,SC_RSHIFT,doShift
02:0000000000000FA3 0000
02:0000000000000FA5 2650F827017C7700	   156: 	beq a1,SC_NUMLOCK,doNumLock
02:0000000000000FAD 0000
02:0000000000000FAF 2658F833017C5800	   157: 	beq a1,SC_CAPSLOCK,doCapsLock
02:0000000000000FB7 0000
02:0000000000000FB9 2640F841017C7E00	   158: 	beq a1,SC_SCROLLLOCK,doScrollLock
02:0000000000000FC1 0000
02:0000000000000FC3 2650F8AF007C1100	   159: 	beq a1,SC_ALT,doAlt
02:0000000000000FCB 0000
02:0000000000000FCD C0000084007C2004	   160: 	ldb a0,_KeyState1			# check key up/down
02:0000000000000FD5 FCFF
02:0000000000000FD7 50000084007C2004	   161: 	stb r0,_KeyState1			# clear keyup status
02:0000000000000FDF FCFF
02:0000000000000FE1 273800ACFF      	   162: 	bne a0,r0,B0003				# ignore key up
02:0000000000000FE6 2640F8C9007C0D00	   163: 	beq a1,SC_TAB,doTab
02:0000000000000FEE 0000
                                    	   164: B0013:
02:0000000000000FF0 C0002084007C2104	   165: 	ldb a0,_KeyState2
02:0000000000000FF8 FCFF
02:0000000000000FFA 2930001800      	   166: 	bge a0,r0,.0010				# is it extended code ?
02:0000000000000FFF 8820F80300      	   167: 	and a0,a0,0x7f				# clear extended bit
02:0000000000001004 D0002084007C2104	   168: 	stb a0,_KeyState2
02:000000000000100C FCFF
02:000000000000100E 50000084007C2004	   169: 	stb r0,_KeyState1			# clear keyup
02:0000000000001016 FCFF
02:0000000000001018 CA002057007CB902	   170: 	lda a0,_keybdExtendedCodes
02:0000000000001020 0000
02:0000000000001022 4F21100000      	   171: 	ldb a1,[a0+a1]
02:0000000000001027 20B4000000      	   172: 	bra	.0008
                                    	   173: .0010:
02:000000000000102C 2E30100E00      	   174: 	bbc a0,2,.0009				# is it CTRL code ?
02:0000000000001031 0841F80300      	   175: 	and a1,a1,0x7f
02:0000000000001036 CA002047007C3902	   176: 	lda	a0,_keybdControlCodes
02:000000000000103E 0000
02:0000000000001040 4F21100000      	   177: 	ldb a1,[a0+a1]
02:0000000000001045 2078000000      	   178: 	bra	.0008
                                    	   179: .0009:
02:000000000000104A 2E28000C00      	   180: 	bbc a0,0,.0007				# is it shift down ?
02:000000000000104F CA002027007C3901	   181: 	lda	a0,_shiftedScanCodes
02:0000000000001057 0000
02:0000000000001059 4F21100000      	   182: 	ldb a1,[a0+a1]
02:000000000000105E 2046000000      	   183: 	bra	.0008
                                    	   184: .0007:
02:0000000000001063 CA002007007C3900	   185: 	lda	a0,_unshiftedScanCodes
02:000000000000106B 0000
02:000000000000106D 4F21100000      	   186: 	ldb a1,[a0+a1]
02:0000000000001072 8400101000      	   187: 	ldi a0,0x0202
02:0000000000001077 D20000E0077C00FF	   188: 	stt.io a0,leds
02:000000000000107F DFFE
                                    	   189: .0008:
02:0000000000001081 8400181800      	   190: 	ldi a0,0x0303
02:0000000000001086 D20000E0077C00FF	   191: 	stt.io a0,leds
02:000000000000108E DFFE
02:0000000000001090 B700008000      	   192: 	pop a0
02:0000000000001095 A304000000      	   193: 	ret
                                    	   194: doKeyup:
02:000000000000109A 8400F8FF07      	   195: 	ldi a0,-1
02:000000000000109F D0000084007C2004	   196: 	stb a0,_KeyState1
02:00000000000010A7 FCFF
02:00000000000010A9 2026FDFFFF      	   197: 	bra	B0003
                                    	   198: doExtend:
02:00000000000010AE C0002084007C2104	   199: 	ldb a0,_KeyState2
02:00000000000010B6 FCFF
02:00000000000010B8 8920000400      	   200: 	or a0,a0,0x80
02:00000000000010BD D0002084007C2104	   201: 	stb a0,_KeyState2
02:00000000000010C5 FCFF
02:00000000000010C7 20EAFCFFFF      	   202: 	bra	B0003
                                    	   203: doCtrl:
02:00000000000010CC 40010084007C2004	   204: 	ldb a1,_KeyState1
02:00000000000010D4 FCFF
02:00000000000010D6 50000084007C2004	   205: 	stb r0,_KeyState1
02:00000000000010DE FCFF
02:00000000000010E0 2958001000      	   206: 	bge a1,r0,.0004
02:00000000000010E5 C0002084007C2104	   207: 	ldb a0,_KeyState2
02:00000000000010ED FCFF
02:00000000000010EF 8820D80700      	   208: 	and a0,a0,0xfb
02:00000000000010F4 D0002084007C2104	   209: 	stb a0,_KeyState2
02:00000000000010FC FCFF
02:00000000000010FE 207CFCFFFF      	   210: 	bra	B0003
                                    	   211: .0004:
02:0000000000001103 C0002084007C2104	   212: 	ldb a0,_KeyState2
02:000000000000110B FCFF
02:000000000000110D 8920200000      	   213: 	or a0,a0,4
02:0000000000001112 D0002084007C2104	   214: 	stb a0,_KeyState2
02:000000000000111A FCFF
02:000000000000111C 2040FCFFFF      	   215: 	bra	B0003
                                    	   216: doAlt:
02:0000000000001121 40010084007C2004	   217: 	ldb a1,_KeyState1
02:0000000000001129 FCFF
02:000000000000112B 50000084007C2004	   218: 	stb r0,_KeyState1
02:0000000000001133 FCFF
02:0000000000001135 2958001000      	   219: 	bge a1,r0,.0011
02:000000000000113A C0002084007C2104	   220: 	ldb a0,_KeyState2
02:0000000000001142 FCFF
02:0000000000001144 8820E80700      	   221: 	and a0,a0,0xfd
02:0000000000001149 D0002084007C2104	   222: 	stb a0,_KeyState2
02:0000000000001151 FCFF
02:0000000000001153 20D2FBFFFF      	   223: 	bra	B0003
                                    	   224: .0011:
02:0000000000001158 C0002084007C2104	   225: 	ldb a0,_KeyState2
02:0000000000001160 FCFF
02:0000000000001162 8920100000      	   226: 	or a0,a0,2
02:0000000000001167 D0002084007C2104	   227: 	stb a0,_KeyState2
02:000000000000116F FCFF
02:0000000000001171 2096FBFFFF      	   228: 	bra	B0003
                                    	   229: doTab:
02:0000000000001176 3601008000      	   230: 	push a1
02:000000000000117B 40012084007C2104	   231: 	ldb a1,_KeyState2
02:0000000000001183 FCFF
02:0000000000001185 2E58000600      	   232: 	bbc a1,0,.0012				# is ALT down ?
                                    	   233: #    	inc     _iof_switch
02:000000000000118A 3701008000      	   234: 	pop a1
02:000000000000118F 205AFBFFFF      	   235:   bra B0003
                                    	   236: .0012:
02:0000000000001194 3701008000      	   237: 	pop a1
02:0000000000001199 20AEFCFFFF      	   238:   bra B0013
                                    	   239: doShift:
02:000000000000119E 40010084007C2004	   240: 	ldb a1,_KeyState1
02:00000000000011A6 FCFF
02:00000000000011A8 50000084007C2004	   241: 	stb r0,_KeyState1
02:00000000000011B0 FCFF
02:00000000000011B2 2958001000      	   242: 	bge a1,r0,.0005
02:00000000000011B7 C0002084007C2104	   243: 	ldb a0,_KeyState2
02:00000000000011BF FCFF
02:00000000000011C1 8820F00700      	   244: 	and a0,a0,0xfe
02:00000000000011C6 D0002084007C2104	   245: 	stb a0,_KeyState2
02:00000000000011CE FCFF
02:00000000000011D0 20D8FAFFFF      	   246: 	bra	B0003
                                    	   247: .0005:
02:00000000000011D5 C0002084007C2104	   248: 	ldb a0,_KeyState2
02:00000000000011DD FCFF
02:00000000000011DF 8920080000      	   249: 	or a0,a0,1
02:00000000000011E4 D0002084007C2104	   250: 	stb a0,_KeyState2
02:00000000000011EC FCFF
02:00000000000011EE 209CFAFFFF      	   251: 	bra	B0003
                                    	   252: doNumLock:
02:00000000000011F3 C0002084007C2104	   253: 	ldb a0,_KeyState2
02:00000000000011FB FCFF
02:00000000000011FD 8A20800000      	   254: 	xor a0,a0,16
02:0000000000001202 D0002084007C2104	   255: 	stb a0,_KeyState2
02:000000000000120A FCFF
02:000000000000120C A0A0000000      	   256: 	bsr	KeybdSetLEDStatus
02:0000000000001211 2056FAFFFF      	   257: 	bra	B0003
                                    	   258: doCapsLock:
02:0000000000001216 C0002084007C2104	   259: 	ldb a0,_KeyState2
02:000000000000121E FCFF
02:0000000000001220 8A20000100      	   260: 	xor a0,a0,32
02:0000000000001225 D0002084007C2104	   261: 	stb a0,_KeyState2
02:000000000000122D FCFF
02:000000000000122F A05A000000      	   262: 	bsr	KeybdSetLEDStatus
02:0000000000001234 2010FAFFFF      	   263: 	bra	B0003
                                    	   264: doScrollLock:
02:0000000000001239 C0002084007C2104	   265: 	ldb a0,_KeyState2
02:0000000000001241 FCFF
02:0000000000001243 8A20000200      	   266: 	xor a0,a0,64
02:0000000000001248 D0002084007C2104	   267: 	stb a0,_KeyState2
02:0000000000001250 FCFF
02:0000000000001252 A014000000      	   268: 	bsr	KeybdSetLEDStatus
02:0000000000001257 20CAF9FFFF      	   269: 	bra	B0003
                                    	   270: 
                                    	   271: KeybdSetLEDStatus:
02:000000000000125C B640000001      	   272: 	push a0,a1
02:0000000000001261 50008084007C2404	   273: 	stb r0,KeybdLEDs	
02:0000000000001269 FCFF
02:000000000000126B C0002084007C2104	   274: 	ldb a0,_KeyState2
02:0000000000001273 FCFF
02:0000000000001275 2E20200A00      	   275: 	bbc a0,4,.0002
02:000000000000127A 0401100000      	   276: 	ldi a1,2
02:000000000000127F 50018084007C2404	   277: 	stb a1,KeybdLEDs
02:0000000000001287 FCFF
                                    	   278: .0002:
02:0000000000001289 2E30280E00      	   279: 	bbc a0,5,.0003
02:000000000000128E 40018084007C2404	   280: 	ldb a1,KeybdLEDs
02:0000000000001296 FCFF
02:0000000000001298 0941200000      	   281: 	or a1,a1,4
02:000000000000129D 50018084007C2404	   282: 	stb a1,KeybdLEDs
02:00000000000012A5 FCFF
                                    	   283: .0003:
02:00000000000012A7 2E30300E00      	   284: 	bbc a0,6,.0004
02:00000000000012AC 40018084007C2404	   285: 	ldb a1,KeybdLEDs
02:00000000000012B4 FCFF
02:00000000000012B6 0941080000      	   286: 	or a1,a1,1
02:00000000000012BB 50018084007C2404	   287: 	stb a1,KeybdLEDs
02:00000000000012C3 FCFF
                                    	   288: .0004:
02:00000000000012C5 0401680700      	   289: 	ldi a1,0xED
02:00000000000012CA A06E000000      	   290: 	bsr	KeybdSendByte
02:00000000000012CF A072F7FFFF      	   291: 	bsr	KeybdWaitTx
02:00000000000012D4 A0E6F6FFFF      	   292: 	bsr	KeybdRecvByte
02:00000000000012D9 2850000E00      	   293: 	blt a1,r0,.0001
                                    	   294: #		cmp		#$FA,d1
02:00000000000012DE 40018084007C2404	   295: 	ldb a1,KeybdLEDs
02:00000000000012E6 FCFF
02:00000000000012E8 A032000000      	   296: 	bsr	KeybdSendByte
02:00000000000012ED A036F7FFFF      	   297: 	bsr	KeybdWaitTx
02:00000000000012F2 A0AAF6FFFF      	   298: 	bsr	KeybdRecvByte
                                    	   299: .0001:
02:00000000000012F7 B740000001      	   300: 	pop a0,a1
02:00000000000012FC A304000000      	   301: 	ret
                                    	   302: 
                                    	   303: KeybdSendByte:
02:0000000000001301 52010000007C0000	   304: 	stt.io a1,KEYBD
02:0000000000001309 DCFE
02:000000000000130B A304000000      	   305: 	ret
                                    	   306: 	
                                    	   307: Wait10ms:
02:0000000000001310 B600008000      	   308: 	push a0
02:0000000000001315 8400401F00      	   309: 	ldi a0,1000
                                    	   310: .0001:
02:000000000000131A 8220102800      	   311: 	sub a0,a0,a1
02:000000000000131F 2B3800FCFF      	   312: 	bgt a0,r0,.0001
02:0000000000001324 B700008000      	   313: 	pop a0
02:0000000000001329 A304000000      	   314: 	ret
                                    	   315: 
                                    	   316: 
                                    	   317: 		.rodata
                                    	   318: #--------------------------------------------------------------------------
                                    	   319: # PS2 scan codes to ascii conversion tables.
                                    	   320: #--------------------------------------------------------------------------
                                    	   321: 
                                    	   322: _unshiftedScanCodes:
03:0000000000000039 2E              	   323: 	.byte	0x2e,0xa9,0x2e,0xa5,0xa3,0xa1,0xa2,0xac
03:000000000000003A A9
03:000000000000003B 2E
03:000000000000003C A5
03:000000000000003D A3
03:000000000000003E A1
03:000000000000003F A2
03:0000000000000040 AC
03:0000000000000041 2E              	   324: 	.byte	0x2e,0xaa,0xa8,0xa6,0xa4,0x09,0x60,0x2e
03:0000000000000042 AA
03:0000000000000043 A8
03:0000000000000044 A6
03:0000000000000045 A4
03:0000000000000046 09
03:0000000000000047 60
03:0000000000000048 2E
03:0000000000000049 2E              	   325: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x71,0x31,0x2e
03:000000000000004A 2E
03:000000000000004B 2E
03:000000000000004C 2E
03:000000000000004D 2E
03:000000000000004E 71
03:000000000000004F 31
03:0000000000000050 2E
03:0000000000000051 2E              	   326: 	.byte	0x2e,0x2e,0x7a,0x73,0x61,0x77,0x32,0x2e
03:0000000000000052 2E
03:0000000000000053 7A
03:0000000000000054 73
03:0000000000000055 61
03:0000000000000056 77
03:0000000000000057 32
03:0000000000000058 2E
03:0000000000000059 2E              	   327: 	.byte	0x2e,0x63,0x78,0x64,0x65,0x34,0x33,0x2e
03:000000000000005A 63
03:000000000000005B 78
03:000000000000005C 64
03:000000000000005D 65
03:000000000000005E 34
03:000000000000005F 33
03:0000000000000060 2E
03:0000000000000061 2E              	   328: 	.byte	0x2e,0x20,0x76,0x66,0x74,0x72,0x35,0x2e
03:0000000000000062 20
03:0000000000000063 76
03:0000000000000064 66
03:0000000000000065 74
03:0000000000000066 72
03:0000000000000067 35
03:0000000000000068 2E
03:0000000000000069 2E              	   329: 	.byte	0x2e,0x6e,0x62,0x68,0x67,0x79,0x36,0x2e
03:000000000000006A 6E
03:000000000000006B 62
03:000000000000006C 68
03:000000000000006D 67
03:000000000000006E 79
03:000000000000006F 36
03:0000000000000070 2E
03:0000000000000071 2E              	   330: 	.byte	0x2e,0x2e,0x6d,0x6a,0x75,0x37,0x38,0x2e
03:0000000000000072 2E
03:0000000000000073 6D
03:0000000000000074 6A
03:0000000000000075 75
03:0000000000000076 37
03:0000000000000077 38
03:0000000000000078 2E
03:0000000000000079 2E              	   331: 	.byte	0x2e,0x2c,0x6b,0x69,0x6f,0x30,0x39,0x2e
03:000000000000007A 2C
03:000000000000007B 6B
03:000000000000007C 69
03:000000000000007D 6F
03:000000000000007E 30
03:000000000000007F 39
03:0000000000000080 2E
03:0000000000000081 2E              	   332: 	.byte	0x2e,0x2e,0x2f,0x6c,0x3b,0x70,0x2d,0x2e
03:0000000000000082 2E
03:0000000000000083 2F
03:0000000000000084 6C
03:0000000000000085 3B
03:0000000000000086 70
03:0000000000000087 2D
03:0000000000000088 2E
03:0000000000000089 2E              	   333: 	.byte	0x2e,0x2e,0x27,0x2e,0x5b,0x3d,0x2e,0x2e
03:000000000000008A 2E
03:000000000000008B 27
03:000000000000008C 2E
03:000000000000008D 5B
03:000000000000008E 3D
03:000000000000008F 2E
03:0000000000000090 2E
03:0000000000000091 AD              	   334: 	.byte	0xad,0x2e,0x0d,0x5d,0x2e,0x5c,0x2e,0x2e
03:0000000000000092 2E
03:0000000000000093 0D
03:0000000000000094 5D
03:0000000000000095 2E
03:0000000000000096 5C
03:0000000000000097 2E
03:0000000000000098 2E
03:0000000000000099 2E              	   335: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:000000000000009A 2E
03:000000000000009B 2E
03:000000000000009C 2E
03:000000000000009D 2E
03:000000000000009E 2E
03:000000000000009F 08
03:00000000000000A0 2E
03:00000000000000A1 2E              	   336: 	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
03:00000000000000A2 95
03:00000000000000A3 2E
03:00000000000000A4 93
03:00000000000000A5 94
03:00000000000000A6 2E
03:00000000000000A7 2E
03:00000000000000A8 2E
03:00000000000000A9 98              	   337: 	.byte	0x98,0x7f,0x92,0x2e,0x91,0x90,0x1b,0xaf
03:00000000000000AA 7F
03:00000000000000AB 92
03:00000000000000AC 2E
03:00000000000000AD 91
03:00000000000000AE 90
03:00000000000000AF 1B
03:00000000000000B0 AF
03:00000000000000B1 AB              	   338: 	.byte	0xab,0x2e,0x97,0x2e,0x2e,0x96,0xae,0x2e
03:00000000000000B2 2E
03:00000000000000B3 97
03:00000000000000B4 2E
03:00000000000000B5 2E
03:00000000000000B6 96
03:00000000000000B7 AE
03:00000000000000B8 2E
                                    	   339: 
03:00000000000000B9 2E              	   340: 	.byte	0x2e,0x2e,0x2e,0xa7,0x2e,0x2e,0x2e,0x2e
03:00000000000000BA 2E
03:00000000000000BB 2E
03:00000000000000BC A7
03:00000000000000BD 2E
03:00000000000000BE 2E
03:00000000000000BF 2E
03:00000000000000C0 2E
03:00000000000000C1 2E              	   341: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000C2 2E
03:00000000000000C3 2E
03:00000000000000C4 2E
03:00000000000000C5 2E
03:00000000000000C6 2E
03:00000000000000C7 2E
03:00000000000000C8 2E
03:00000000000000C9 2E              	   342: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000CA 2E
03:00000000000000CB 2E
03:00000000000000CC 2E
03:00000000000000CD 2E
03:00000000000000CE 2E
03:00000000000000CF 2E
03:00000000000000D0 2E
03:00000000000000D1 2E              	   343: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000D2 2E
03:00000000000000D3 2E
03:00000000000000D4 2E
03:00000000000000D5 2E
03:00000000000000D6 2E
03:00000000000000D7 2E
03:00000000000000D8 2E
03:00000000000000D9 2E              	   344: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000DA 2E
03:00000000000000DB 2E
03:00000000000000DC 2E
03:00000000000000DD 2E
03:00000000000000DE 2E
03:00000000000000DF 2E
03:00000000000000E0 2E
03:00000000000000E1 2E              	   345: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000E2 2E
03:00000000000000E3 2E
03:00000000000000E4 2E
03:00000000000000E5 2E
03:00000000000000E6 2E
03:00000000000000E7 2E
03:00000000000000E8 2E
03:00000000000000E9 2E              	   346: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000EA 2E
03:00000000000000EB 2E
03:00000000000000EC 2E
03:00000000000000ED 2E
03:00000000000000EE 2E
03:00000000000000EF 2E
03:00000000000000F0 2E
03:00000000000000F1 2E              	   347: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000F2 2E
03:00000000000000F3 2E
03:00000000000000F4 2E
03:00000000000000F5 2E
03:00000000000000F6 2E
03:00000000000000F7 2E
03:00000000000000F8 2E
03:00000000000000F9 2E              	   348: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000FA 2E
03:00000000000000FB 2E
03:00000000000000FC 2E
03:00000000000000FD 2E
03:00000000000000FE 2E
03:00000000000000FF 2E
03:0000000000000100 2E
03:0000000000000101 2E              	   349: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000102 2E
03:0000000000000103 2E
03:0000000000000104 2E
03:0000000000000105 2E
03:0000000000000106 2E
03:0000000000000107 2E
03:0000000000000108 2E
03:0000000000000109 2E              	   350: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000010A 2E
03:000000000000010B 2E
03:000000000000010C 2E
03:000000000000010D 2E
03:000000000000010E 2E
03:000000000000010F 2E
03:0000000000000110 2E
03:0000000000000111 2E              	   351: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000112 2E
03:0000000000000113 2E
03:0000000000000114 2E
03:0000000000000115 2E
03:0000000000000116 2E
03:0000000000000117 2E
03:0000000000000118 2E
03:0000000000000119 2E              	   352: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000011A 2E
03:000000000000011B 2E
03:000000000000011C 2E
03:000000000000011D 2E
03:000000000000011E 2E
03:000000000000011F 2E
03:0000000000000120 2E
03:0000000000000121 2E              	   353: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000122 2E
03:0000000000000123 2E
03:0000000000000124 2E
03:0000000000000125 2E
03:0000000000000126 2E
03:0000000000000127 2E
03:0000000000000128 2E
03:0000000000000129 2E              	   354: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000012A 2E
03:000000000000012B 2E
03:000000000000012C 2E
03:000000000000012D 2E
03:000000000000012E 2E
03:000000000000012F 2E
03:0000000000000130 2E
03:0000000000000131 2E              	   355: 	.byte	0x2e,0x2e,0xfa,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000132 2E
03:0000000000000133 FA
03:0000000000000134 2E
03:0000000000000135 2E
03:0000000000000136 2E
03:0000000000000137 2E
03:0000000000000138 2E
                                    	   356: 
                                    	   357: _shiftedScanCodes:
03:0000000000000139 2E              	   358: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000013A 2E
03:000000000000013B 2E
03:000000000000013C 2E
03:000000000000013D 2E
03:000000000000013E 2E
03:000000000000013F 2E
03:0000000000000140 2E
03:0000000000000141 2E              	   359: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
03:0000000000000142 2E
03:0000000000000143 2E
03:0000000000000144 2E
03:0000000000000145 2E
03:0000000000000146 09
03:0000000000000147 7E
03:0000000000000148 2E
03:0000000000000149 2E              	   360: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x51,0x21,0x2e
03:000000000000014A 2E
03:000000000000014B 2E
03:000000000000014C 2E
03:000000000000014D 2E
03:000000000000014E 51
03:000000000000014F 21
03:0000000000000150 2E
03:0000000000000151 2E              	   361: 	.byte	0x2e,0x2e,0x5a,0x53,0x41,0x57,0x40,0x2e
03:0000000000000152 2E
03:0000000000000153 5A
03:0000000000000154 53
03:0000000000000155 41
03:0000000000000156 57
03:0000000000000157 40
03:0000000000000158 2E
03:0000000000000159 2E              	   362: 	.byte	0x2e,0x43,0x58,0x44,0x45,0x24,0x23,0x2e
03:000000000000015A 43
03:000000000000015B 58
03:000000000000015C 44
03:000000000000015D 45
03:000000000000015E 24
03:000000000000015F 23
03:0000000000000160 2E
03:0000000000000161 2E              	   363: 	.byte	0x2e,0x20,0x56,0x46,0x54,0x52,0x25,0x2e
03:0000000000000162 20
03:0000000000000163 56
03:0000000000000164 46
03:0000000000000165 54
03:0000000000000166 52
03:0000000000000167 25
03:0000000000000168 2E
03:0000000000000169 2E              	   364: 	.byte	0x2e,0x4e,0x42,0x48,0x47,0x59,0x5e,0x2e
03:000000000000016A 4E
03:000000000000016B 42
03:000000000000016C 48
03:000000000000016D 47
03:000000000000016E 59
03:000000000000016F 5E
03:0000000000000170 2E
03:0000000000000171 2E              	   365: 	.byte	0x2e,0x2e,0x4d,0x4a,0x55,0x26,0x2a,0x2e
03:0000000000000172 2E
03:0000000000000173 4D
03:0000000000000174 4A
03:0000000000000175 55
03:0000000000000176 26
03:0000000000000177 2A
03:0000000000000178 2E
03:0000000000000179 2E              	   366: 	.byte	0x2e,0x3c,0x4b,0x49,0x4f,0x29,0x28,0x2e
03:000000000000017A 3C
03:000000000000017B 4B
03:000000000000017C 49
03:000000000000017D 4F
03:000000000000017E 29
03:000000000000017F 28
03:0000000000000180 2E
03:0000000000000181 2E              	   367: 	.byte	0x2e,0x3e,0x3f,0x4c,0x3a,0x50,0x5f,0x2e
03:0000000000000182 3E
03:0000000000000183 3F
03:0000000000000184 4C
03:0000000000000185 3A
03:0000000000000186 50
03:0000000000000187 5F
03:0000000000000188 2E
03:0000000000000189 2E              	   368: 	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
03:000000000000018A 2E
03:000000000000018B 22
03:000000000000018C 2E
03:000000000000018D 7B
03:000000000000018E 2B
03:000000000000018F 2E
03:0000000000000190 2E
03:0000000000000191 2E              	   369: 	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
03:0000000000000192 2E
03:0000000000000193 0D
03:0000000000000194 7D
03:0000000000000195 2E
03:0000000000000196 7C
03:0000000000000197 2E
03:0000000000000198 2E
03:0000000000000199 2E              	   370: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:000000000000019A 2E
03:000000000000019B 2E
03:000000000000019C 2E
03:000000000000019D 2E
03:000000000000019E 2E
03:000000000000019F 08
03:00000000000001A0 2E
03:00000000000001A1 2E              	   371: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001A2 2E
03:00000000000001A3 2E
03:00000000000001A4 2E
03:00000000000001A5 2E
03:00000000000001A6 2E
03:00000000000001A7 2E
03:00000000000001A8 2E
03:00000000000001A9 2E              	   372: 	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
03:00000000000001AA 7F
03:00000000000001AB 2E
03:00000000000001AC 2E
03:00000000000001AD 2E
03:00000000000001AE 2E
03:00000000000001AF 1B
03:00000000000001B0 2E
03:00000000000001B1 2E              	   373: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001B2 2E
03:00000000000001B3 2E
03:00000000000001B4 2E
03:00000000000001B5 2E
03:00000000000001B6 2E
03:00000000000001B7 2E
03:00000000000001B8 2E
                                    	   374: 
03:00000000000001B9 2E              	   375: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001BA 2E
03:00000000000001BB 2E
03:00000000000001BC 2E
03:00000000000001BD 2E
03:00000000000001BE 2E
03:00000000000001BF 2E
03:00000000000001C0 2E
03:00000000000001C1 2E              	   376: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001C2 2E
03:00000000000001C3 2E
03:00000000000001C4 2E
03:00000000000001C5 2E
03:00000000000001C6 2E
03:00000000000001C7 2E
03:00000000000001C8 2E
03:00000000000001C9 2E              	   377: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001CA 2E
03:00000000000001CB 2E
03:00000000000001CC 2E
03:00000000000001CD 2E
03:00000000000001CE 2E
03:00000000000001CF 2E
03:00000000000001D0 2E
03:00000000000001D1 2E              	   378: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001D2 2E
03:00000000000001D3 2E
03:00000000000001D4 2E
03:00000000000001D5 2E
03:00000000000001D6 2E
03:00000000000001D7 2E
03:00000000000001D8 2E
03:00000000000001D9 2E              	   379: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001DA 2E
03:00000000000001DB 2E
03:00000000000001DC 2E
03:00000000000001DD 2E
03:00000000000001DE 2E
03:00000000000001DF 2E
03:00000000000001E0 2E
03:00000000000001E1 2E              	   380: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001E2 2E
03:00000000000001E3 2E
03:00000000000001E4 2E
03:00000000000001E5 2E
03:00000000000001E6 2E
03:00000000000001E7 2E
03:00000000000001E8 2E
03:00000000000001E9 2E              	   381: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001EA 2E
03:00000000000001EB 2E
03:00000000000001EC 2E
03:00000000000001ED 2E
03:00000000000001EE 2E
03:00000000000001EF 2E
03:00000000000001F0 2E
03:00000000000001F1 2E              	   382: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001F2 2E
03:00000000000001F3 2E
03:00000000000001F4 2E
03:00000000000001F5 2E
03:00000000000001F6 2E
03:00000000000001F7 2E
03:00000000000001F8 2E
03:00000000000001F9 2E              	   383: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001FA 2E
03:00000000000001FB 2E
03:00000000000001FC 2E
03:00000000000001FD 2E
03:00000000000001FE 2E
03:00000000000001FF 2E
03:0000000000000200 2E
03:0000000000000201 2E              	   384: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000202 2E
03:0000000000000203 2E
03:0000000000000204 2E
03:0000000000000205 2E
03:0000000000000206 2E
03:0000000000000207 2E
03:0000000000000208 2E
03:0000000000000209 2E              	   385: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000020A 2E
03:000000000000020B 2E
03:000000000000020C 2E
03:000000000000020D 2E
03:000000000000020E 2E
03:000000000000020F 2E
03:0000000000000210 2E
03:0000000000000211 2E              	   386: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000212 2E
03:0000000000000213 2E
03:0000000000000214 2E
03:0000000000000215 2E
03:0000000000000216 2E
03:0000000000000217 2E
03:0000000000000218 2E
03:0000000000000219 2E              	   387: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000021A 2E
03:000000000000021B 2E
03:000000000000021C 2E
03:000000000000021D 2E
03:000000000000021E 2E
03:000000000000021F 2E
03:0000000000000220 2E
03:0000000000000221 2E              	   388: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000222 2E
03:0000000000000223 2E
03:0000000000000224 2E
03:0000000000000225 2E
03:0000000000000226 2E
03:0000000000000227 2E
03:0000000000000228 2E
03:0000000000000229 2E              	   389: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000022A 2E
03:000000000000022B 2E
03:000000000000022C 2E
03:000000000000022D 2E
03:000000000000022E 2E
03:000000000000022F 2E
03:0000000000000230 2E
03:0000000000000231 2E              	   390: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000232 2E
03:0000000000000233 2E
03:0000000000000234 2E
03:0000000000000235 2E
03:0000000000000236 2E
03:0000000000000237 2E
03:0000000000000238 2E
                                    	   391: 
                                    	   392: # control
                                    	   393: _keybdControlCodes:
03:0000000000000239 2E              	   394: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000023A 2E
03:000000000000023B 2E
03:000000000000023C 2E
03:000000000000023D 2E
03:000000000000023E 2E
03:000000000000023F 2E
03:0000000000000240 2E
03:0000000000000241 2E              	   395: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
03:0000000000000242 2E
03:0000000000000243 2E
03:0000000000000244 2E
03:0000000000000245 2E
03:0000000000000246 09
03:0000000000000247 7E
03:0000000000000248 2E
03:0000000000000249 2E              	   396: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x11,0x21,0x2e
03:000000000000024A 2E
03:000000000000024B 2E
03:000000000000024C 2E
03:000000000000024D 2E
03:000000000000024E 11
03:000000000000024F 21
03:0000000000000250 2E
03:0000000000000251 2E              	   397: 	.byte	0x2e,0x2e,0x1a,0x13,0x01,0x17,0x40,0x2e
03:0000000000000252 2E
03:0000000000000253 1A
03:0000000000000254 13
03:0000000000000255 01
03:0000000000000256 17
03:0000000000000257 40
03:0000000000000258 2E
03:0000000000000259 2E              	   398: 	.byte	0x2e,0x03,0x18,0x04,0x05,0x24,0x23,0x2e
03:000000000000025A 03
03:000000000000025B 18
03:000000000000025C 04
03:000000000000025D 05
03:000000000000025E 24
03:000000000000025F 23
03:0000000000000260 2E
03:0000000000000261 2E              	   399: 	.byte	0x2e,0x20,0x16,0x06,0x14,0x12,0x25,0x2e
03:0000000000000262 20
03:0000000000000263 16
03:0000000000000264 06
03:0000000000000265 14
03:0000000000000266 12
03:0000000000000267 25
03:0000000000000268 2E
03:0000000000000269 2E              	   400: 	.byte	0x2e,0x0e,0x02,0x08,0x07,0x19,0x5e,0x2e
03:000000000000026A 0E
03:000000000000026B 02
03:000000000000026C 08
03:000000000000026D 07
03:000000000000026E 19
03:000000000000026F 5E
03:0000000000000270 2E
03:0000000000000271 2E              	   401: 	.byte	0x2e,0x2e,0x0d,0x0a,0x15,0x26,0x2a,0x2e
03:0000000000000272 2E
03:0000000000000273 0D
03:0000000000000274 0A
03:0000000000000275 15
03:0000000000000276 26
03:0000000000000277 2A
03:0000000000000278 2E
03:0000000000000279 2E              	   402: 	.byte	0x2e,0x3c,0x0b,0x09,0x0f,0x29,0x28,0x2e
03:000000000000027A 3C
03:000000000000027B 0B
03:000000000000027C 09
03:000000000000027D 0F
03:000000000000027E 29
03:000000000000027F 28
03:0000000000000280 2E
03:0000000000000281 2E              	   403: 	.byte	0x2e,0x3e,0x3f,0x0c,0x3a,0x10,0x5f,0x2e
03:0000000000000282 3E
03:0000000000000283 3F
03:0000000000000284 0C
03:0000000000000285 3A
03:0000000000000286 10
03:0000000000000287 5F
03:0000000000000288 2E
03:0000000000000289 2E              	   404: 	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
03:000000000000028A 2E
03:000000000000028B 22
03:000000000000028C 2E
03:000000000000028D 7B
03:000000000000028E 2B
03:000000000000028F 2E
03:0000000000000290 2E
03:0000000000000291 2E              	   405: 	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
03:0000000000000292 2E
03:0000000000000293 0D
03:0000000000000294 7D
03:0000000000000295 2E
03:0000000000000296 7C
03:0000000000000297 2E
03:0000000000000298 2E
03:0000000000000299 2E              	   406: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:000000000000029A 2E
03:000000000000029B 2E
03:000000000000029C 2E
03:000000000000029D 2E
03:000000000000029E 2E
03:000000000000029F 08
03:00000000000002A0 2E
03:00000000000002A1 2E              	   407: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002A2 2E
03:00000000000002A3 2E
03:00000000000002A4 2E
03:00000000000002A5 2E
03:00000000000002A6 2E
03:00000000000002A7 2E
03:00000000000002A8 2E
03:00000000000002A9 2E              	   408: 	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
03:00000000000002AA 7F
03:00000000000002AB 2E
03:00000000000002AC 2E
03:00000000000002AD 2E
03:00000000000002AE 2E
03:00000000000002AF 1B
03:00000000000002B0 2E
03:00000000000002B1 2E              	   409: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002B2 2E
03:00000000000002B3 2E
03:00000000000002B4 2E
03:00000000000002B5 2E
03:00000000000002B6 2E
03:00000000000002B7 2E
03:00000000000002B8 2E
                                    	   410: 
                                    	   411: _keybdExtendedCodes:
03:00000000000002B9 2E              	   412: 	.byte	0x2e,0x2e,0x2e,0x2e,0xa3,0xa1,0xa2,0x2e
03:00000000000002BA 2E
03:00000000000002BB 2E
03:00000000000002BC 2E
03:00000000000002BD A3
03:00000000000002BE A1
03:00000000000002BF A2
03:00000000000002C0 2E
03:00000000000002C1 2E              	   413: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002C2 2E
03:00000000000002C3 2E
03:00000000000002C4 2E
03:00000000000002C5 2E
03:00000000000002C6 2E
03:00000000000002C7 2E
03:00000000000002C8 2E
03:00000000000002C9 2E              	   414: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002CA 2E
03:00000000000002CB 2E
03:00000000000002CC 2E
03:00000000000002CD 2E
03:00000000000002CE 2E
03:00000000000002CF 2E
03:00000000000002D0 2E
03:00000000000002D1 2E              	   415: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002D2 2E
03:00000000000002D3 2E
03:00000000000002D4 2E
03:00000000000002D5 2E
03:00000000000002D6 2E
03:00000000000002D7 2E
03:00000000000002D8 2E
03:00000000000002D9 2E              	   416: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002DA 2E
03:00000000000002DB 2E
03:00000000000002DC 2E
03:00000000000002DD 2E
03:00000000000002DE 2E
03:00000000000002DF 2E
03:00000000000002E0 2E
03:00000000000002E1 2E              	   417: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002E2 2E
03:00000000000002E3 2E
03:00000000000002E4 2E
03:00000000000002E5 2E
03:00000000000002E6 2E
03:00000000000002E7 2E
03:00000000000002E8 2E
03:00000000000002E9 2E              	   418: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002EA 2E
03:00000000000002EB 2E
03:00000000000002EC 2E
03:00000000000002ED 2E
03:00000000000002EE 2E
03:00000000000002EF 2E
03:00000000000002F0 2E
03:00000000000002F1 2E              	   419: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002F2 2E
03:00000000000002F3 2E
03:00000000000002F4 2E
03:00000000000002F5 2E
03:00000000000002F6 2E
03:00000000000002F7 2E
03:00000000000002F8 2E
03:00000000000002F9 2E              	   420: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002FA 2E
03:00000000000002FB 2E
03:00000000000002FC 2E
03:00000000000002FD 2E
03:00000000000002FE 2E
03:00000000000002FF 2E
03:0000000000000300 2E
03:0000000000000301 2E              	   421: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000302 2E
03:0000000000000303 2E
03:0000000000000304 2E
03:0000000000000305 2E
03:0000000000000306 2E
03:0000000000000307 2E
03:0000000000000308 2E
03:0000000000000309 2E              	   422: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000030A 2E
03:000000000000030B 2E
03:000000000000030C 2E
03:000000000000030D 2E
03:000000000000030E 2E
03:000000000000030F 2E
03:0000000000000310 2E
03:0000000000000311 2E              	   423: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000312 2E
03:0000000000000313 2E
03:0000000000000314 2E
03:0000000000000315 2E
03:0000000000000316 2E
03:0000000000000317 2E
03:0000000000000318 2E
03:0000000000000319 2E              	   424: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:000000000000031A 2E
03:000000000000031B 2E
03:000000000000031C 2E
03:000000000000031D 2E
03:000000000000031E 2E
03:000000000000031F 2E
03:0000000000000320 2E
03:0000000000000321 2E              	   425: 	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
03:0000000000000322 95
03:0000000000000323 2E
03:0000000000000324 93
03:0000000000000325 94
03:0000000000000326 2E
03:0000000000000327 2E
03:0000000000000328 2E
03:0000000000000329 98              	   426: 	.byte	0x98,0x99,0x92,0x2e,0x91,0x90,0x2e,0x2e
03:000000000000032A 99
03:000000000000032B 92
03:000000000000032C 2E
03:000000000000032D 91
03:000000000000032E 90
03:000000000000032F 2E
03:0000000000000330 2E
03:0000000000000331 2E              	   427: 	.byte	0x2e,0x2e,0x97,0x2e,0x2e,0x96,0x2e,0x2e
03:0000000000000332 2E
03:0000000000000333 97
03:0000000000000334 2E
03:0000000000000335 2E
03:0000000000000336 96
03:0000000000000337 2E
03:0000000000000338 2E
                                    	   428: 
                                    	   429: 
                                    	   430: 

Source: "boot.asm"
                                    	   521: 
                                    	   522: 	.balign	0x100,0xff
                                    	   523: 	
                                    	   524: 	.rodata
                                    	   525: msgStart:
03:0000000000000400 54686F7232303234	   526: 	.byte "Thor2024 System Starting.",0
03:0000000000000408 2053797374656D20
03:0000000000000410 5374617274696E67
03:0000000000000418 2E
03:0000000000000419 00
                                    	   527: 
03:000000000000041A 00              	   528: 	.org 0xffe0
03:000000000000041B *
                                    	   529: 	# initial machine stack pointer
03:000000000000FFE0 F0FFFCFFFFFFFFFF	   530: 	.8byte	0xFFFFFFFFFFFCFFF0
03:000000000000FFE8 FFFFFFFFFFFFFFFF	   531: 	.8byte	0xFFFFFFFFFFFFFFFF
                                    	   532: 	# initial program counter
03:000000000000FFF0 000000D0FFFFFFFF	   533: 	.8byte	0xFFFFFFFFD0000000
03:000000000000FFF8 FFFFFFFFFFFFFFFF	   534: 	.8byte	0xFFFFFFFFFFFFFFFF
                                    	   535: 
                                    	   536: 	.global Delay3s
                                    	   537: 
                                    	   538: 


Symbols by name:
.notRxInt                       02:0000000000000A4B
.notRxInt1                      02:0000000000000A4B
.notSerInt                      02:0000000000000A4B
.sgc2                           02:0000000000000884
.sgcNoChars                     02:00000000000008D4
.sirqNxtByte                    02:000000000000099C
.sirqRxFull                     02:0000000000000A4B
.spc0001                        02:000000000000096A
.spcNoChars                     02:0000000000000924
.spcd0001                       02:000000000000095B
.sps2                           02:0000000000000A55
.spsXit                         02:0000000000000A6E
.srcXit                         02:0000000000000807
.st1                            02:00000000000001C7
.st2                            02:00000000000000D7
ACIA_CMD                         S:00000000FED00008
ACIA_CTRL                        S:00000000FED0000C
ACIA_RX                          S:00000000FED00000
ACIA_STAT                        S:00000000FED00004
ACIA_TX                          S:00000000FED00000
ACK                              S:0000000000000006
B0003                           02:0000000000000F3C
B0013                           02:0000000000000FF0
BlankLastLine                   02:00000000000005C3
CAN                              S:0000000000000018
CR                               S:000000000000000D
CRLF                            02:000000000000066D
CTRLH                            S:0000000000000008
CTRLX                            S:0000000000000018
CalcScreenLoc                   02:00000000000001E5
CheckForKey                     02:0000000000000EC9
ClearScreen                     02:00000000000001A9
CursorCol                        S:00000000FFFC0401
CursorRow                        S:00000000FFFC0400
Delay3s                         02:0000000000000181 EXP
DisplayByte                     02:00000000000006BD
DisplayChar                     02:0000000000000244
DisplayNybble                   02:0000000000000690
DisplayOcta                     02:0000000000000726
DisplayString                   02:0000000000000645
DisplayTetra                    02:0000000000000703
DisplayWyde                     02:00000000000006E0
EOT                              S:0000000000000004
ETB                              S:0000000000000017
GetKey                          02:0000000000000EE2
GetNumber                       02:000000000000074E
GetRange                        02:0000000000000753
IncCursorPos                    02:00000000000004AB
IncCursorPos1                   02:000000000000054B
IncCursorRow                    02:00000000000004F1
InitSerial                      02:0000000000000758
KEYBD                            S:00000000FEDC0000
KeybdGetChar                    02:0000000000000F37
KeybdGetCharNoWait              02:0000000000000F19
KeybdGetCharWait                02:0000000000000F28
KeybdLEDs                        S:00000000FFFC0424
KeybdRecvByte                   02:0000000000000E47
KeybdSendByte                   02:0000000000001301
KeybdSetLEDStatus               02:000000000000125C
KeybdWaitFlag                    S:00000000FFFC0423
KeybdWaitTx                     02:0000000000000E88
LF                               S:000000000000000A
Monitor                         02:0000000000000749
NAK                              S:0000000000000015
SC_ALT                           S:0000000000000011
SC_CAPSLOCK                      S:0000000000000058
SC_CTRL                          S:0000000000000014
SC_EXTEND                        S:00000000000000E0
SC_KEYUP                         S:00000000000000F0
SC_LSHIFT                        S:0000000000000012
SC_NUMLOCK                       S:0000000000000077
SC_RSHIFT                        S:0000000000000059
SC_SCROLLLOCK                    S:000000000000007E
SC_TAB                           S:000000000000000D
SOH                              S:0000000000000001
ScrollUp                        02:0000000000000555
SerHeadRcv                       S:00000000FFFC0004
SerHeadXmit                      S:00000000FFFC000C
SerRcvBuf                        S:00000000FFFC1000
SerRcvXoff                       S:00000000FFFC0011
SerRcvXon                        S:00000000FFFC0010
SerTailRcv                       S:00000000FFFC0000
SerTailXmit                      S:00000000FFFC0008
SerialGetChar                   02:0000000000000811
SerialIRQ                       02:000000000000099C
SerialInit                      02:0000000000000758 EXP
SerialPeekChar                  02:00000000000008E8
SerialPeekCharDirect            02:0000000000000933
SerialPutChar                   02:0000000000000965
SerialPutString                 02:0000000000000A50 EXP
SerialRcvCount                  02:00000000000007BC
SerialTest                      02:0000000000000A78 EXP
SyncCursor                      02:0000000000000622
TextAttr                         S:00000000FFFC0410
TextCols                         S:00000000FFFC0403
TextCurpos                       S:00000000FFFC0404
TextRows                         S:00000000FFFC0402
TextScr                          S:00000000FFFC0408
Wait10ms                        02:0000000000001310
XOFF                             S:0000000000000013
XON                              S:0000000000000011
_KeyState1                       S:00000000FFFC0420
_KeyState2                       S:00000000FFFC0421
_KeybdEcho                       S:00000000FFFC0422
_KeybdGetScancode               02:0000000000000E29
_KeybdGetStatus                 02:0000000000000E1A
_KeybdInit                      02:0000000000000E01
_keybdControlCodes              03:0000000000000239
_keybdExtendedCodes             03:00000000000002B9
_shiftedScanCodes               03:0000000000000139
_unshiftedScanCodes             03:0000000000000039
ary                              S:00000000FFFC0000
doAlt                           02:0000000000001121
doBackspace                     02:00000000000003F2
doCapsLock                      02:0000000000001216
doCtrl                          02:00000000000010CC
doCtrlX                         02:000000000000046A
doDelete                        02:000000000000041F
doExtend                        02:00000000000010AE
doKeyup                         02:000000000000109A
doNumLock                       02:00000000000011F3
doRet                           02:00000000000001A4
doScrollLock                    02:0000000000001239
doShift                         02:000000000000119E
doTab                           02:0000000000001176
floop                           02:0000000000000131
leds                             S:00000000FEDFFF00
mon_r1                           S:00000000FFFC0430
mon_r2                           S:00000000FFFC0440
msgStart                        03:0000000000000400
msgXmNoTransmitter              03:0000000000000014
msgXmTimeout                    03:0000000000000000
stall                           02:000000000000017C
start                           02:0000000000000000
txtscreen                        S:00000000FEC00000
xm_EOT                          02:0000000000000D0C
xm_ReceiveStart                 02:0000000000000B95
xm_SOH                          02:0000000000000C30
xm_SendStart                    02:0000000000000A87
xm_calc_checksum                02:0000000000000D52
xm_calc_crc                     02:0000000000000D98
xm_checksum                      S:00000000FFFC0030
xm_crc                           S:00000000FFFC0058
xm_crc1                         02:0000000000000DA7
xm_crc3                         02:0000000000000DCA
xm_crc4                         02:0000000000000DBB
xm_cs1                          02:0000000000000D61
xm_gb1                          02:0000000000000B63
xm_gb2                          02:0000000000000B86
xm_getbyte                      02:0000000000000B5E
xm_noTransmitter                02:0000000000000D43
xm_rcv1                         02:0000000000000BEF
xm_rcv2                         02:0000000000000C67
xm_rcv3                         02:0000000000000CD0
xm_rcv4                         02:0000000000000BE5
xm_rcv5                         02:0000000000000BDB
xm_rcv_chksum                   02:0000000000000CC6
xm_rcv_nak                      02:0000000000000C21
xm_rcv_to1                      02:0000000000000CFD
xm_rcv_to2                      02:0000000000000CFD
xm_receive                      02:0000000000000BD6
xm_retry1                       02:0000000000000D1B
xm_send                         02:0000000000000AA5
xm_send1                        02:0000000000000AE6
xm_send2                        02:0000000000000B1D
xm_send3                        02:0000000000000B22
xm_send4                        02:0000000000000AC3
xm_send5                        02:0000000000000ABE
xm_timer                         S:00000000FFFC0020

Symbols by value:
00000000FEC00000 txtscreen
00000000FED00000 ACIA_RX
00000000FED00000 ACIA_TX
00000000FED00004 ACIA_STAT
00000000FED00008 ACIA_CMD
00000000FED0000C ACIA_CTRL
00000000FEDC0000 KEYBD
00000000FEDFFF00 leds
00000000FFFC0000 ary
00000000FFFC0000 SerTailRcv
00000000FFFC0004 SerHeadRcv
00000000FFFC0008 SerTailXmit
00000000FFFC000C SerHeadXmit
00000000FFFC0010 SerRcvXon
00000000FFFC0011 SerRcvXoff
00000000FFFC0020 xm_timer
00000000FFFC0030 xm_checksum
00000000FFFC0058 xm_crc
00000000FFFC0400 CursorRow
00000000FFFC0401 CursorCol
00000000FFFC0402 TextRows
00000000FFFC0403 TextCols
00000000FFFC0404 TextCurpos
00000000FFFC0408 TextScr
00000000FFFC0410 TextAttr
00000000FFFC0420 _KeyState1
00000000FFFC0421 _KeyState2
00000000FFFC0422 _KeybdEcho
00000000FFFC0423 KeybdWaitFlag
00000000FFFC0424 KeybdLEDs
00000000FFFC0430 mon_r1
00000000FFFC0440 mon_r2
00000000FFFC1000 SerRcvBuf
0000000000000000 msgXmTimeout
0000000000000000 start
0000000000000001 SOH
0000000000000004 EOT
0000000000000006 ACK
0000000000000008 CTRLH
000000000000000A LF
000000000000000D SC_TAB
000000000000000D CR
0000000000000011 XON
0000000000000011 SC_ALT
0000000000000012 SC_LSHIFT
0000000000000013 XOFF
0000000000000014 SC_CTRL
0000000000000014 msgXmNoTransmitter
0000000000000015 NAK
0000000000000017 ETB
0000000000000018 CAN
0000000000000018 CTRLX
0000000000000039 _unshiftedScanCodes
0000000000000058 SC_CAPSLOCK
0000000000000059 SC_RSHIFT
0000000000000077 SC_NUMLOCK
000000000000007E SC_SCROLLLOCK
00000000000000D7 .st2
00000000000000E0 SC_EXTEND
00000000000000F0 SC_KEYUP
0000000000000131 floop
0000000000000139 _shiftedScanCodes
000000000000017C stall
0000000000000181 Delay3s
00000000000001A4 doRet
00000000000001A9 ClearScreen
00000000000001C7 .st1
00000000000001E5 CalcScreenLoc
0000000000000239 _keybdControlCodes
0000000000000244 DisplayChar
00000000000002B9 _keybdExtendedCodes
00000000000003F2 doBackspace
0000000000000400 msgStart
000000000000041F doDelete
000000000000046A doCtrlX
00000000000004AB IncCursorPos
00000000000004F1 IncCursorRow
000000000000054B IncCursorPos1
0000000000000555 ScrollUp
00000000000005C3 BlankLastLine
0000000000000622 SyncCursor
0000000000000645 DisplayString
000000000000066D CRLF
0000000000000690 DisplayNybble
00000000000006BD DisplayByte
00000000000006E0 DisplayWyde
0000000000000703 DisplayTetra
0000000000000726 DisplayOcta
0000000000000749 Monitor
000000000000074E GetNumber
0000000000000753 GetRange
0000000000000758 SerialInit
0000000000000758 InitSerial
00000000000007BC SerialRcvCount
0000000000000807 .srcXit
0000000000000811 SerialGetChar
0000000000000884 .sgc2
00000000000008D4 .sgcNoChars
00000000000008E8 SerialPeekChar
0000000000000924 .spcNoChars
0000000000000933 SerialPeekCharDirect
000000000000095B .spcd0001
0000000000000965 SerialPutChar
000000000000096A .spc0001
000000000000099C SerialIRQ
000000000000099C .sirqNxtByte
0000000000000A4B .notRxInt1
0000000000000A4B .sirqRxFull
0000000000000A4B .notSerInt
0000000000000A4B .notRxInt
0000000000000A50 SerialPutString
0000000000000A55 .sps2
0000000000000A6E .spsXit
0000000000000A78 SerialTest
0000000000000A87 xm_SendStart
0000000000000AA5 xm_send
0000000000000ABE xm_send5
0000000000000AC3 xm_send4
0000000000000AE6 xm_send1
0000000000000B1D xm_send2
0000000000000B22 xm_send3
0000000000000B5E xm_getbyte
0000000000000B63 xm_gb1
0000000000000B86 xm_gb2
0000000000000B95 xm_ReceiveStart
0000000000000BD6 xm_receive
0000000000000BDB xm_rcv5
0000000000000BE5 xm_rcv4
0000000000000BEF xm_rcv1
0000000000000C21 xm_rcv_nak
0000000000000C30 xm_SOH
0000000000000C67 xm_rcv2
0000000000000CC6 xm_rcv_chksum
0000000000000CD0 xm_rcv3
0000000000000CFD xm_rcv_to1
0000000000000CFD xm_rcv_to2
0000000000000D0C xm_EOT
0000000000000D1B xm_retry1
0000000000000D43 xm_noTransmitter
0000000000000D52 xm_calc_checksum
0000000000000D61 xm_cs1
0000000000000D98 xm_calc_crc
0000000000000DA7 xm_crc1
0000000000000DBB xm_crc4
0000000000000DCA xm_crc3
0000000000000E01 _KeybdInit
0000000000000E1A _KeybdGetStatus
0000000000000E29 _KeybdGetScancode
0000000000000E47 KeybdRecvByte
0000000000000E88 KeybdWaitTx
0000000000000EC9 CheckForKey
0000000000000EE2 GetKey
0000000000000F19 KeybdGetCharNoWait
0000000000000F28 KeybdGetCharWait
0000000000000F37 KeybdGetChar
0000000000000F3C B0003
0000000000000FF0 B0013
000000000000109A doKeyup
00000000000010AE doExtend
00000000000010CC doCtrl
0000000000001121 doAlt
0000000000001176 doTab
000000000000119E doShift
00000000000011F3 doNumLock
0000000000001216 doCapsLock
0000000000001239 doScrollLock
000000000000125C KeybdSetLEDStatus
0000000000001301 KeybdSendByte
0000000000001310 Wait10ms
