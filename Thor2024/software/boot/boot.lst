Sections:
00: ".bss" (0-A)
01: ".data" (0-A)
02: ".text" (0-700)
03: ".rodata" (0-10000)


Source: "boot.asm"
                                    	     1: # boot.asm Thor2024 assembly language
                                    	     2: 
                                    	     3: 	.bss
00:0000000000000000 00              	     4: 	.space	10
00:0000000000000001 *
                                    	     5: .set ary,0xFFFC0000
                                    	     6: .set txtscreen,0xFEC00000
                                    	     7: .set leds,0xFEDFFF00
                                    	     8: .set keybd,0xFEDCFE00
                                    	     9: .set rand,0xFEE1FD00
                                    	    10: .set CTRLH,8
                                    	    11: .set CTRLX,24
                                    	    12: 
                                    	    13: .set CursorRow,0xFFFC0400
                                    	    14: .set CursorCol,0xFFFC0401
                                    	    15: .set TextRows,0xFFFC0402
                                    	    16: .set TextCols,0xFFFC0403
                                    	    17: .set TextCurpos,0xFFFC0404
                                    	    18: .set TextScr,0xFFFC0408
                                    	    19: 
                                    	    20: .extern	SerialInit
                                    	    21: .extern SerialPutString
                                    	    22: 
                                    	    23: 	.data
01:0000000000000000 00              	    24: 	.space	10
01:0000000000000001 *
                                    	    25: 
                                    	    26: #	.org	0xFFFFFFFFFFFD0000
                                    	    27: 	.text
                                    	    28: #	.align	0
                                    	    29: start:
02:0000000000000000 0402F8FF07      	    30: 	ldi t0,-1
02:0000000000000005 520200E0077C00FF	    31: 	stt t0,leds
02:000000000000000D DFFE
02:000000000000000F 04020000007C0000	    32: 	ldi	t0,txtscreen
02:0000000000000017 C0FE7C00000000
02:000000000000001E 52020081007C0804	    33: 	stt t0,TextScr
02:0000000000000026 FCFF
02:0000000000000028 0402000100      	    34: 	ldi t0,32
02:000000000000002D 50024080007C0204	    35: 	stb t0,TextRows
02:0000000000000035 FCFF
02:0000000000000037 0402000200      	    36: 	ldi t0,64
02:000000000000003C 50026080007C0304	    37: 	stb t0,TextCols
02:0000000000000044 FCFF
02:0000000000000046 50000080007C0004	    38: 	stb r0,CursorRow
02:000000000000004E FCFF
02:0000000000000050 50002080007C0104	    39: 	stb r0,CursorCol
02:0000000000000058 FCFF
02:000000000000005A 51008080007C0404	    40: 	stw r0,TextCurpos
02:0000000000000062 FCFF
02:0000000000000064 8400000000      	    41: 	ldi a0,0
02:0000000000000069 0401080000      	    42: 	ldi a1,1
02:000000000000006E 8401100000      	    43: 	ldi a2,2
02:0000000000000073 0414180000      	    44: 	ldi a3,3
02:0000000000000078 B640185002      	    45: 	push a0,a1,a2,a3
02:000000000000007D 8400F80700      	    46: 	ldi a0,255
02:0000000000000082 0401F80700      	    47: 	ldi a1,255
02:0000000000000087 8401F80700      	    48: 	ldi a2,255
02:000000000000008C 0414F80700      	    49: 	ldi a3,255
02:0000000000000091 3774100202      	    50: 	pop	a3,a2,a1,a0
                                    	    51: 	
02:0000000000000096 A000000000      	    52: 	bsr SerialInit
                                    	    53: 
                                    	    54: #	ldi	a0,msgStart
                                    	    55: #	bsr	SerialPutString
                                    	    56: 
                                    	    57: 	# clearscreen
02:000000000000009B 04020001007C2000	    58: 	ldi t0,0x43FFFFE0003F0020
02:00000000000000A3 3F007CE0FFFF43
02:00000000000000AA 8F03000000      	    59: 	mov t3,r0
02:00000000000000AF 0403000002      	    60: 	ldi t2,16384
                                    	    61: .st1:
02:00000000000000B4 570238C0007C0000	    62: 	sto t0,txtscreen[r0+t3]
02:00000000000000BC C0FE
02:00000000000000BE 84E3400000      	    63: 	add t3,t3,8
02:00000000000000C3 28E830F8FF      	    64: 	blt t3,t2,.st1
                                    	    65: 
02:00000000000000C8 8400000000      	    66: 	ldi a0,msgStart
02:00000000000000CD A0780A0000      	    67: 	bsr DisplayString
                                    	    68: 
02:00000000000000D2 A072010000      	    69: 	bsr	Delay3s
                                    	    70: 
02:00000000000000D7 8F03000000      	    71: 	mov t3,r0
02:00000000000000DC 0403400100      	    72: 	ldi t2,40
                                    	    73: .st2:
02:00000000000000E1 570038C0007C0000	    74: 	sto r0,0xfffc0000[r0+t3]
02:00000000000000E9 FCFF
02:00000000000000EB 84E3400000      	    75: 	add t3,t3,8
02:00000000000000F0 28E830F8FF      	    76: 	blt t3,t2,.st2
                                    	    77: 	
02:00000000000000F5 0701088001      	    78: 	csrrd r2,r0,0x3001	# get the thread number
02:00000000000000FA 0841780000      	    79: 	and r2,r2,15				# 0 to 3
02:00000000000000FF 0402080000      	    80: 	ldi t0,1
02:0000000000000104 2750204000      	    81: 	bne r2,t0,stall			# Allow only thread 1 to work
                                    	    82: 
02:0000000000000109 0401E80700      	    83: 	ldi r2,0xFD
02:000000000000010E 0401080000      	    84: 	ldi r2,0x01					# x = 1
02:0000000000000113 52010000007C0000	    85: 	stt r2,ary@got
02:000000000000011B FCFF
                                    	    86: 
02:000000000000011D 8401800000      	    87: 	ldi r3,0x10		# calculates 16th fibonacci number (13 = D in hex) (CHANGE HERE IF YOU WANT TO CALCULATE ANOTHER NUMBER)
02:0000000000000122 8260000800      	    88: 	or r1,r3,r0	# transfer y register to accumulator
02:0000000000000127 8461E8FF07      	    89: 	add r3,r3,-3	# handles the algorithm iteration counting
                                    	    90: 
02:000000000000012C 8400100000      	    91: 	ldi r1,2		# a = 2
02:0000000000000131 D2008000007C0400	    92: 	stt r1,0xFFFC0004		# stores a
02:0000000000000139 FCFF
                                    	    93: 
                                    	    94: floop: 
02:000000000000013B 44018000007C0400	    95: 	LDT r2,0xFFFC0004		# x = a
02:0000000000000143 FCFF
02:0000000000000145 8220102000      	    96: 	ADD r1,r1,r2					# a += x
02:000000000000014A D2008000007C0400	    97: 	STT r1,0xFFFC0004		# stores a
02:0000000000000152 FCFF
02:0000000000000154 52010000007C0000	    98: 	STT r2,0xFFFC0000		# stores x
02:000000000000015C FCFF
02:000000000000015E 8461F8FF07      	    99: 	ADD r3,r3,-1					# y -= 1
02:0000000000000163 276000ECFF      	   100:   bnez r3,floop		# jumps back to loop if Z bit != 0 (y's decremention isn't zero yet)
02:0000000000000168 FFFFFFFFFF      	   101:   NOP
02:000000000000016D FFFFFFFFFF      	   102:   NOP
02:0000000000000172 FFFFFFFFFF      	   103:   NOP
02:0000000000000177 FFFFFFFFFF      	   104:   NOP
02:000000000000017C FFFFFFFFFF      	   105:   NOP
02:0000000000000181 FFFFFFFFFF      	   106: 	NOP  
                                    	   107: 	
                                    	   108: stall:
02:0000000000000186 2000000000      	   109: 	BRA	stall
                                    	   110: 
                                    	   111: # ------------------------------------------------------------------------------
                                    	   112: # Delay for a few seconds at startup.
                                    	   113: # ------------------------------------------------------------------------------
                                    	   114: 
                                    	   115: Delay3s:
02:000000000000018B 84000012027C4042	   116: 	ldi		a0,1000000
02:0000000000000193 0F00
                                    	   117: .0001:
02:0000000000000195 5800000401      	   118: 	lsr		a1,a0,8
02:000000000000019A 520100E0077C00FF	   119: 	stt		a1,leds
02:00000000000001A2 DFFE
02:00000000000001A4 8420F8FF07      	   120: 	sub		a0,a0,1
02:00000000000001A9 2B2000F6FF      	   121: 	bgt		a0,r0,.0001	
                                    	   122: doRet:
02:00000000000001AE A304000000      	   123: 	ret
                                    	   124: 
                                    	   125: #------------------------------------------------------------------------------
                                    	   126: # Calculate screen memory location from CursorRow,CursorCol.
                                    	   127: # Destroys d0,d2,a0
                                    	   128: #------------------------------------------------------------------------------
                                    	   129: #
                                    	   130: CalcScreenLoc:
02:00000000000001B3 C0000080007C0004	   131: 	ldb	a0,CursorRow			# cursor row
02:00000000000001BB FCFF
02:00000000000001BD 8820F80300      	   132: 	and a0,a0,0x7f
02:00000000000001C2 40016080007C0304	   133: 	ldb a1,TextCols				# times number of columns
02:00000000000001CA FCFF
02:00000000000001CC 8220103000      	   134: 	mul a0,a0,a1
02:00000000000001D1 40012080007C0104	   135: 	ldb a1,CursorCol			# plus cursor col
02:00000000000001D9 FCFF
02:00000000000001DB 0841F80300      	   136: 	and a1,a1,0x7f
02:00000000000001E0 8220102000      	   137: 	add a0,a0,a1
02:00000000000001E5 D1008080007C0404	   138: 	stw a0,TextCurpos			# update text position
02:00000000000001ED FCFF
02:00000000000001EF 5800800101      	   139: 	asl a0,a0,3						# multiply by text cell size
02:00000000000001F4 45010081007C0804	   140: 	ldtu a1,TextScr				# add in text screen location
02:00000000000001FC FCFF
02:00000000000001FE 8220102000      	   141: 	add a0,a0,a1
02:0000000000000203 A304000000      	   142: 	ret
                                    	   143: 
                                    	   144: #------------------------------------------------------------------------------
                                    	   145: # Display a character on the screen
                                    	   146: # d1.b = char to display
                                    	   147: #------------------------------------------------------------------------------
                                    	   148: #
                                    	   149: DisplayChar:
02:0000000000000208 2748F80D007C0D00	   150: 	bne a1,'\r',.0010				# carriage return?
02:0000000000000210 0000
02:0000000000000212 50002080007C0104	   151: 	stb r0,CursorCol				# just set cursor column to zero on a CR
02:000000000000021A FCFF
02:000000000000021C A304000000      	   152: 	ret
                                    	   153: .0010:
02:0000000000000221 B61C008000      	   154: 	push lr1
02:0000000000000226 B640185002      	   155: 	push a0,a1,a2,a3
02:000000000000022B 2758F825007C9100	   156: 	bne a1,0x91,.0005				# cursor right?
02:0000000000000233 0000
02:0000000000000235 C0002080007C0104	   157: 	ldb a0,CursorCol				# Is rightmost column reached?
02:000000000000023D FCFF
02:000000000000023F C0016080007C0304	   158: 	ldb a2,TextCols
02:0000000000000247 FCFF
02:0000000000000249 8461F8FF07      	   159: 	sub a2,a2,1
02:000000000000024E 2928180C00      	   160: 	bge a0,a2,.0001
02:0000000000000253 8420080000      	   161: 	add	a0,a0,1							# not rightmost, add 1 to column
02:0000000000000258 D0002080007C0104	   162: 	stb a0,CursorCol
02:0000000000000260 FCFF
                                    	   163: .0002:
02:0000000000000262 A008070000      	   164: 	bsr SyncCursor
                                    	   165: .0001:
02:0000000000000267 3774100202      	   166: 	pop a3,a2,a1,a0
02:000000000000026C B71C008000      	   167: 	pop lr1
02:0000000000000271 A304000000      	   168: 	ret
                                    	   169: .0005:
02:0000000000000276 2748F817007C9000	   170: 	bne a1,0x90,.0006
02:000000000000027E 0000
02:0000000000000280 C0000080007C0004	   171: 	ldb a0,CursorRow				# can the cursor move up?
02:0000000000000288 FCFF
02:000000000000028A 262800EEFF      	   172: 	beq a0,r0,.0001
02:000000000000028F 8420F8FF07      	   173: 	sub a0,a0,1
02:0000000000000294 D0000080007C0004	   174: 	stb a0,CursorRow
02:000000000000029C FCFF
02:000000000000029E 2088FFFFFF      	   175: 	bra .0002
                                    	   176: .0006:
02:00000000000002A3 2748F817007C9300	   177: 	bne a1,0x93,.0007
02:00000000000002AB 0000
02:00000000000002AD C0002080007C0104	   178: 	ldb a0,CursorCol				# can the cursor move left?
02:00000000000002B5 FCFF
02:00000000000002B7 262000D8FF      	   179: 	beq a0,r0,.0001	
02:00000000000002BC 8420F8FF07      	   180: 	sub a0,a0,1
02:00000000000002C1 D0002080007C0104	   181: 	stb a0,CursorCol
02:00000000000002C9 FCFF
02:00000000000002CB 202EFFFFFF      	   182: 	bra .0002
                                    	   183: .0007:
02:00000000000002D0 2740F81F007C9200	   184: 	bne a1,0x92,.0008
02:00000000000002D8 0000
02:00000000000002DA C0000080007C0004	   185: 	ldb a0,CursorRow				# can cursor move down?
02:00000000000002E2 FCFF
02:00000000000002E4 C0014080007C0204	   186: 	ldb a2,TextRows
02:00000000000002EC FCFF
02:00000000000002EE 8461F8FF07      	   187: 	sub a2,a2,1
02:00000000000002F3 292018BAFF      	   188: 	bge a0,a2,.0001
02:00000000000002F8 8420080000      	   189: 	add a0,a0,1
02:00000000000002FD D0000080007C0004	   190: 	stb a0,CursorRow
02:0000000000000305 FCFF
02:0000000000000307 20B6FEFFFF      	   191: 	bra .0002
                                    	   192: .0008:
02:000000000000030C 2758F81B007C9400	   193: 	bne a1,0x94,.0011
02:0000000000000314 0000
02:0000000000000316 C0002080007C0104	   194: 	ldb a0,CursorCol
02:000000000000031E FCFF
02:0000000000000320 2620000A00      	   195: 	beq a0,r0,.0003
02:0000000000000325 50002080007C0104	   196: 	stb r0,CursorCol
02:000000000000032D FCFF
02:000000000000032F 2066FEFFFF      	   197: 	bra .0002
                                    	   198: .0003:
02:0000000000000334 50000080007C0004	   199: 	stb r0,CursorRow
02:000000000000033C FCFF
02:000000000000033E 2048FEFFFF      	   200: 	bra .0002
                                    	   201: .0011:
02:0000000000000343 2658F843007C9900	   202: 	beq a1,0x99,doDelete
02:000000000000034B 0000
02:000000000000034D 2640F829007C0800	   203: 	beq a1,CTRLH,doBackspace
02:0000000000000355 0000
02:0000000000000357 2650F85F007C1800	   204: 	beq a1,CTRLX,doCtrlX
02:000000000000035F 0000
02:0000000000000361 2650F819007C0A00	   205: 	beq a1,'\n',.0012
02:0000000000000369 0000
                                    	   206: 	# Regular char
02:000000000000036B 8F41000000      	   207: 	mov a2,a1
02:0000000000000370 A086FCFFFF      	   208: 	bsr CalcScreenLoc				# a0 = screen location
02:0000000000000375 D001080000      	   209: 	stb a2,[a0]
02:000000000000037A A0B8010000      	   210: 	bsr IncCursorPos
                                    	   211: .0004:
02:000000000000037F A0CE040000      	   212: 	bsr SyncCursor
02:0000000000000384 3774100202      	   213: 	pop a3,a2,a1,a0
02:0000000000000389 B71C008000      	   214: 	pop lr1
02:000000000000038E A304000000      	   215: 	ret
                                    	   216: .0012:
02:0000000000000393 A044020000      	   217: 	bsr IncCursorRow
02:0000000000000398 20CEFFFFFF      	   218: 	bra .0004
                                    	   219: 			
                                    	   220: 	#---------------------------
                                    	   221: 	# CTRL-H: backspace
                                    	   222: 	#---------------------------
                                    	   223: doBackspace:
02:000000000000039D C0002080007C0104	   224: 	ldb a0,CursorCol				# At start of line already?
02:00000000000003A5 FCFF
02:00000000000003A7 2720080A00      	   225: 	bne a0,a0,.0001
02:00000000000003AC 3774100202      	   226: 	pop a3,a2,a1,a0
02:00000000000003B1 B71C008000      	   227: 	pop lr1
02:00000000000003B6 A304000000      	   228: 	ret
                                    	   229: .0001:
02:00000000000003BB 8420F8FF07      	   230: 	sub a0,a0,1							#decrement column
02:00000000000003C0 D0002080007C0104	   231: 	stb a0,CursorCol
02:00000000000003C8 FCFF
                                    	   232: 
                                    	   233: 	#---------------------------
                                    	   234: 	# Delete key
                                    	   235: 	#---------------------------
                                    	   236: doDelete:
02:00000000000003CA A0D2FBFFFF      	   237: 	bsr	CalcScreenLoc				# a0 = screen location
02:00000000000003CF C0012080007C0104	   238: 	ldb a2,CursorCol
02:00000000000003D7 FCFF
02:00000000000003D9 40146080007C0304	   239: 	ldb a3,TextCols
02:00000000000003E1 FCFF
                                    	   240: .0001:
02:00000000000003E3 4601080100      	   241: 	ldo a1,8[a0]
02:00000000000003E8 5301080000      	   242: 	sto a1,[a0]
02:00000000000003ED 8420400000      	   243: 	add a0,a0,8
02:00000000000003F2 8461080000      	   244: 	add a2,a2,1
02:00000000000003F7 286040F7FF      	   245: 	blt a2,a3,.0001
02:00000000000003FC 0401000100      	   246: 	ldi a1,' '							# one space
02:0000000000000401 500108FF07      	   247: 	stb a1,-8[a0]						# terminate line with space char
02:0000000000000406 3774100202      	   248: 	pop a3,a2,a1,a0
02:000000000000040B B71C008000      	   249: 	pop lr1
02:0000000000000410 A304000000      	   250: 	ret
                                    	   251: 
                                    	   252: 	#---------------------------
                                    	   253: 	# CTRL-X: erase line
                                    	   254: 	#---------------------------
                                    	   255: doCtrlX:
02:0000000000000415 B640C88101      	   256: 	push a0,a1,lr1
02:000000000000041A 50002080007C0104	   257: 	stb r0,CursorCol			# Reset cursor to start of line
02:0000000000000422 FCFF
02:0000000000000424 C0006080007C0304	   258: 	ldb a0,TextCols				# and display TextCols number of spaces
02:000000000000042C FCFF
02:000000000000042E 0401000100      	   259: 	ldi	a1,' '						# one space
                                    	   260: .0001:
                                    	   261: 	# DisplayChar is called recursively here
                                    	   262: 	# It's safe to do because we know it won't recurse again due to the
                                    	   263: 	# fact we know the character being displayed is a space char
02:0000000000000433 A0AAFBFFFF      	   264: 	bsr DisplayChar
02:0000000000000438 8420F8FF07      	   265: 	sub a0,a0,1
02:000000000000043D 293000FAFF      	   266: 	bge a0,r0,.0001
02:0000000000000442 50002080007C0104	   267: 	stb r0,CursorCol			# Reset cursor to start of line
02:000000000000044A FCFF
02:000000000000044C B75C088001      	   268: 	pop lr1,a1,a0
02:0000000000000451 A304000000      	   269: 	ret										# we're done
                                    	   270: 
                                    	   271: #------------------------------------------------------------------------------
                                    	   272: # Increment the cursor position, scroll the screen if needed.
                                    	   273: #------------------------------------------------------------------------------
                                    	   274: #
                                    	   275: IncCursorPos:
02:0000000000000456 B640000001      	   276: 	push a0,a1
02:000000000000045B C2008080007C0404	   277: 	ldw a0,TextCurpos
02:0000000000000463 FCFF
02:0000000000000465 8420080000      	   278: 	add a0,a0,1
02:000000000000046A D1008080007C0404	   279: 	stw a0,TextCurpos
02:0000000000000472 FCFF
02:0000000000000474 C0002080007C0104	   280: 	ldb a0,CursorCol
02:000000000000047C FCFF
02:000000000000047E 8420080000      	   281: 	add a0,a0,1
02:0000000000000483 D0002080007C0104	   282: 	stb a0,CursorCol
02:000000000000048B FCFF
02:000000000000048D C0006080007C0304	   283: 	ldb a0,TextCols
02:0000000000000495 FCFF
02:0000000000000497 40012080007C0104	   284: 	ldb a1,CursorCol
02:000000000000049F FCFF
02:00000000000004A1 2840083200      	   285: 	blt a1,a0,IncCursorPos1	# return if text cols not exceeded
02:00000000000004A6 50002080007C0104	   286: 	stb r0,CursorCol
02:00000000000004AE FCFF
02:00000000000004B0 3721000001      	   287: 	pop a1,a0
                                    	   288: IncCursorRow:
02:00000000000004B5 B640000001      	   289: 	push a0,a1
02:00000000000004BA C0000080007C0004	   290: 	ldb a0,CursorRow
02:00000000000004C2 FCFF
02:00000000000004C4 8420080000      	   291: 	add a0,a0,1
02:00000000000004C9 D0000080007C0004	   292: 	stb a0,CursorRow
02:00000000000004D1 FCFF
02:00000000000004D3 40014080007C0204	   293: 	ldb a1,TextRows
02:00000000000004DB FCFF
02:00000000000004DD 2820101400      	   294: 	blt a0,a1,IncCursorPos1	# return if text rows not exceeded
02:00000000000004E2 0441F8FF07      	   295: 	sub a1,a1,1
02:00000000000004E7 50010080007C0004	   296: 	stb a1,CursorRow
02:00000000000004EF FCFF
02:00000000000004F1 B61C008000      	   297: 	push lr1
02:00000000000004F6 A07AF9FFFF      	   298: 	bsr CalcScreenLoc
02:00000000000004FB A028000000      	   299: 	bsr ScrollUp
02:0000000000000500 B71C008000      	   300: 	pop lr1
                                    	   301: IncCursorPos1:
02:0000000000000505 3721000001      	   302: 	pop	a1,a0
02:000000000000050A A304000000      	   303: 	ret
                                    	   304: 
                                    	   305: #------------------------------------------------------------------------------
                                    	   306: # Scroll text screen
                                    	   307: #------------------------------------------------------------------------------
                                    	   308: 
                                    	   309: ScrollUp:
02:000000000000050F 3602008000      	   310: 	push t0
02:0000000000000514 B640185002      	   311: 	push a0,a1,a2,a3
02:0000000000000519 C4000081007C0804	   312: 	ldt a0,TextScr				# a0 = pointer to screen
02:0000000000000521 FCFF
02:0000000000000523 40016080007C0304	   313: 	ldb a1,TextCols				# a1 = number of columns
02:000000000000052B FCFF
02:000000000000052D C0014080007C0204	   314: 	ldb a2,TextRows
02:0000000000000535 FCFF
02:0000000000000537 8461F8FF07      	   315: 	sub a2,a2,1
02:000000000000053C 8241183000      	   316: 	mul a2,a1,a2					# a2 = number of cells to move
02:0000000000000541 0F54000000      	   317: 	mov a3,a1
                                    	   318: .0001:
02:0000000000000546 4F22808101      	   319: 	ldo t0,[a0+a3]
02:000000000000054B 0214152800      	   320: 	sub a3,a3,a1
02:0000000000000550 572280C100      	   321: 	sto t0,[a0+a3]
02:0000000000000555 0214152000      	   322: 	add a3,a3,a1
02:000000000000055A 0214152000      	   323: 	add a3,a3,a1
02:000000000000055F 8461F8FF07      	   324: 	sub a2,a2,1
02:0000000000000564 2B7000F0FF      	   325: 	bgt a2,r0,.0001
02:0000000000000569 3774100202      	   326: 	pop a3,a2,a1,a0
02:000000000000056E 3702008000      	   327: 	pop t0
02:0000000000000573 B61C008000      	   328: 	push lr1
02:0000000000000578 A01E000000      	   329: 	bsr BlankLastLine
02:000000000000057D B71C008000      	   330: 	pop lr1
02:0000000000000582 A304000000      	   331: 	ret
                                    	   332: 
                                    	   333: #------------------------------------------------------------------------------
                                    	   334: # Blank out the last line of the screen.
                                    	   335: #------------------------------------------------------------------------------
                                    	   336: 
                                    	   337: BlankLastLine:
02:0000000000000587 3622100602      	   338: 	push t0,a0,a1,a2
02:000000000000058C C4000081007C0804	   339: 	ldt a0,TextScr
02:0000000000000594 FCFF
02:0000000000000596 40016080007C0304	   340: 	ldb a1,TextCols
02:000000000000059E FCFF
02:00000000000005A0 C0014080007C0204	   341: 	ldb a2,TextRows
02:00000000000005A8 FCFF
02:00000000000005AA 8461F8FF07      	   342: 	sub a2,a2,1
02:00000000000005AF 0241183000      	   343: 	mul a1,a1,a2
02:00000000000005B4 5800800101      	   344: 	asl a1,a1,3
02:00000000000005B9 0402000100      	   345: 	ldi t0,' '
02:00000000000005BE C0016080007C0304	   346: 	ldb a2,TextCols
02:00000000000005C6 FCFF
                                    	   347: .0001:
02:00000000000005C8 5722100000      	   348: 	stb t0,[a0+a1]
02:00000000000005CD 0441400000      	   349: 	add a1,a1,8
02:00000000000005D2 8461F8FF07      	   350: 	sub a2,a2,1
02:00000000000005D7 2B6800F8FF      	   351: 	bgt a2,r0,.0001
02:00000000000005DC B741080802      	   352: 	pop a2,a1,a0,t0
02:00000000000005E1 A304000000      	   353: 	ret	
                                    	   354: 
                                    	   355: #------------------------------------------------------------------------------
                                    	   356: # SyncCursor:
                                    	   357: #
                                    	   358: # Sync the hardware cursor's position to the text cursor position.
                                    	   359: #
                                    	   360: # Parameters:
                                    	   361: #		<none>
                                    	   362: # Returns:
                                    	   363: #		<none>
                                    	   364: # Registers Affected:
                                    	   365: #		<none>
                                    	   366: #------------------------------------------------------------------------------
                                    	   367: 
                                    	   368: SyncCursor:
02:00000000000005E6 B600008000      	   369: 	push a0
02:00000000000005EB C2008080007C0404	   370: 	ldw a0,TextCurpos
02:00000000000005F3 FCFF
02:00000000000005F5 D1008004007C2400	   371: 	stw a0,0xfec80024
02:00000000000005FD C8FE
02:00000000000005FF B700008000      	   372: 	pop a0
02:0000000000000604 A304000000      	   373: 	ret
                                    	   374: 	
                                    	   375: #------------------------------------------------------------------------------
                                    	   376: # Display string on screen
                                    	   377: #
                                    	   378: # Parameters:
                                    	   379: # 	a0 = pointer to string to display
                                    	   380: # Returns:
                                    	   381: #		<none>
                                    	   382: # Modifies:
                                    	   383: #		<none>
                                    	   384: #------------------------------------------------------------------------------
                                    	   385: 
                                    	   386: DisplayString:
02:0000000000000609 B640C88101      	   387: 	push a0,a1,lr1
                                    	   388: .0002:
02:000000000000060E 4001080000      	   389: 	ldb a1,[a0]
02:0000000000000613 2640000A00      	   390: 	beq a1,r0,.0001
02:0000000000000618 A0E0F7FFFF      	   391: 	bsr DisplayChar
02:000000000000061D 8420080000      	   392: 	add a0,a0,1
02:0000000000000622 20D8FFFFFF      	   393: 	bra .0002
                                    	   394: .0001:
02:0000000000000627 B75C088001      	   395: 	pop lr1,a1,a0
02:000000000000062C A304000000      	   396: 	ret
                                    	   397: 
                                    	   398: 	.balign	0x100,0xff
                                    	   399: 	
                                    	   400: 	.rodata
                                    	   401: msgStart:
03:0000000000000000 54686F7232303234	   402: 	.byte "Thor2024 System Starting.",0
03:0000000000000008 2053797374656D20
03:0000000000000010 5374617274696E67
03:0000000000000018 2E
03:0000000000000019 00
                                    	   403: 
03:000000000000001A 00              	   404: 	.org 0xffe0
03:000000000000001B *
03:000000000000FFE0 F0FFFCFFFFFFFFFF	   405: 	.8byte	0xFFFFFFFFFFFCFFF0
03:000000000000FFE8 FFFFFFFFFFFFFFFF	   406: 	.8byte	0xFFFFFFFFFFFFFFFF
03:000000000000FFF0 000000D0FFFFFFFF	   407: 	.8byte	0xFFFFFFFFD0000000
03:000000000000FFF8 FFFFFFFFFFFFFFFF	   408: 	.8byte	0xFFFFFFFFFFFFFFFF
                                    	   409: 
                                    	   410: 
                                    	   411: 


Symbols by name:
.st1                            02:00000000000000B4
.st2                            02:00000000000000E1
BlankLastLine                   02:0000000000000587
CTRLH                            S:0000000000000008
CTRLX                            S:0000000000000018
CalcScreenLoc                   02:00000000000001B3
CursorCol                        S:00000000FFFC0401
CursorRow                        S:00000000FFFC0400
Delay3s                         02:000000000000018B
DisplayChar                     02:0000000000000208
DisplayString                   02:0000000000000609
IncCursorPos                    02:0000000000000456
IncCursorPos1                   02:0000000000000505
IncCursorRow                    02:00000000000004B5
ScrollUp                        02:000000000000050F
SerialInit                      external EXP
SerialPutString                 external EXP
SyncCursor                      02:00000000000005E6
TextCols                         S:00000000FFFC0403
TextCurpos                       S:00000000FFFC0404
TextRows                         S:00000000FFFC0402
TextScr                          S:00000000FFFC0408
ary                              S:00000000FFFC0000
doBackspace                     02:000000000000039D
doCtrlX                         02:0000000000000415
doDelete                        02:00000000000003CA
doRet                           02:00000000000001AE
floop                           02:000000000000013B
leds                             S:00000000FEDFFF00
msgStart                        03:0000000000000000
stall                           02:0000000000000186
start                           02:0000000000000000
txtscreen                        S:00000000FEC00000

Symbols by value:
00000000FEC00000 txtscreen
00000000FEDFFF00 leds
00000000FFFC0000 ary
00000000FFFC0400 CursorRow
00000000FFFC0401 CursorCol
00000000FFFC0402 TextRows
00000000FFFC0403 TextCols
00000000FFFC0404 TextCurpos
00000000FFFC0408 TextScr
0000000000000000 start
0000000000000000 msgStart
0000000000000008 CTRLH
0000000000000018 CTRLX
00000000000000B4 .st1
00000000000000E1 .st2
000000000000013B floop
0000000000000186 stall
000000000000018B Delay3s
00000000000001AE doRet
00000000000001B3 CalcScreenLoc
0000000000000208 DisplayChar
000000000000039D doBackspace
00000000000003CA doDelete
0000000000000415 doCtrlX
0000000000000456 IncCursorPos
00000000000004B5 IncCursorRow
0000000000000505 IncCursorPos1
000000000000050F ScrollUp
0000000000000587 BlankLastLine
00000000000005E6 SyncCursor
0000000000000609 DisplayString
