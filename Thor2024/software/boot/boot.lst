Sections:
00: ".bss" (0-14)
01: ".data" (0-A)
02: ".text" (0-1900)
03: ".rodata" (0-10000)


Source: "boot.asm"
                                    	     1: # boot.asm Thor2024 assembly language
                                    	     2: 
                                    	     3: 	.bss
00:0000000000000000 00              	     4: 	.space	10
00:0000000000000001 *
                                    	     5: .set ary,0xFFFC0000
                                    	     6: .set txtscreen,0xFEC00000
                                    	     7: .set leds,0xFEDFFF00
                                    	     8: .set keybd,0xFEDCFE00
                                    	     9: .set rand,0xFEE1FD00
                                    	    10: .set CTRLH,8
                                    	    11: .set CTRLX,24
                                    	    12: 
                                    	    13: .set CursorRow,0xFFFC0400
                                    	    14: .set CursorCol,0xFFFC0401
                                    	    15: .set TextRows,0xFFFC0402
                                    	    16: .set TextCols,0xFFFC0403
                                    	    17: .set TextCurpos,0xFFFC0404
                                    	    18: .set TextScr,0xFFFC0408
                                    	    19: .set TextAttr,0xFFFC0410
                                    	    20: 
                                    	    21: .set mon_r1,0xFFFC0430
                                    	    22: .set mon_r2,0xFFFC0440
                                    	    23: 
                                    	    24: .extern	SerialInit
                                    	    25: .extern SerialPutString
                                    	    26: .extern SerialTest
                                    	    27: 
                                    	    28: 	.data
01:0000000000000000 00              	    29: 	.space	10
01:0000000000000001 *
                                    	    30: 	.sdreg 60
                                    	    31: 
                                    	    32: #	.org	0xFFFFFFFFFFFD0000
                                    	    33: 	.text
                                    	    34: #	.align	0
                                    	    35: start:
02:0000000000000000 0402F8FF07      	    36: 	ldi t0,-1
02:0000000000000005 520200E0077C00FF	    37: 	stt.io t0,leds
02:000000000000000D DFFE
02:000000000000000F 0402803800      	    38: 	ldi t0,ExcHandler
02:0000000000000014 0780988103      	    39: 	csrrw r0,t0,0x3033					# set kernel exception vector
02:0000000000000019 04020000007C0000	    40: 	ldi	t0,txtscreen
02:0000000000000021 C0FE7C00000000
02:0000000000000028 52020081007C0804	    41: 	stt t0,TextScr
02:0000000000000030 FCFF
02:0000000000000032 04020000007C0000	    42: 	ldi t0,0x43FFFFE0003F0000		# white foreground, blue background
02:000000000000003A 3F007CE0FFFF43
02:0000000000000041 53020082007C1004	    43: 	sto t0,TextAttr
02:0000000000000049 FCFF
02:000000000000004B 0402000100      	    44: 	ldi t0,32
02:0000000000000050 50024080007C0204	    45: 	stb t0,TextRows
02:0000000000000058 FCFF
02:000000000000005A 0402000200      	    46: 	ldi t0,64
02:000000000000005F 50026080007C0304	    47: 	stb t0,TextCols
02:0000000000000067 FCFF
02:0000000000000069 50000080007C0004	    48: 	stb r0,CursorRow
02:0000000000000071 FCFF
02:0000000000000073 50002080007C0104	    49: 	stb r0,CursorCol
02:000000000000007B FCFF
02:000000000000007D 51008080007C0404	    50: 	stw r0,TextCurpos
02:0000000000000085 FCFF
                                    	    51: 	
02:0000000000000087 A0C2010000      	    52: 	bsr	Delay3s
02:000000000000008C A0120D0000      	    53: 	bsr SerialInit
02:0000000000000091 041E0000007C0000	    54: 	ldi gp,0xffff0000
02:0000000000000099 FFFF7C00000000
02:00000000000000A0 CA80677B00      	    55: 	lda a0,msgStart[gp]
                                    	    56: #	bsr	SerialPutString
                                    	    57: #	bsr SerialTest
02:00000000000000A5 A0D6010000      	    58: 	bsr ClearScreen
02:00000000000000AA CA80677B00      	    59: 	lda a0,msgStart[gp]
02:00000000000000AF A0AA0A0000      	    60: 	bsr DisplayString
                                    	    61: 
02:00000000000000B4 8F03000000      	    62: 	mov t3,r0
02:00000000000000B9 0403400100      	    63: 	ldi t2,40
                                    	    64: .st2:
02:00000000000000BE 570038C0007C0000	    65: 	sto r0,0xfffc0000[r0+t3]
02:00000000000000C6 FCFF
02:00000000000000C8 84E3400000      	    66: 	add t3,t3,8
02:00000000000000CD 28E830F8FF      	    67: 	blt t3,t2,.st2
                                    	    68: 	
02:00000000000000D2 0701088001      	    69: 	csrrd r2,r0,0x3001	# get the thread number
02:00000000000000D7 0841780000      	    70: 	and r2,r2,15				# 0 to 3
02:00000000000000DC 0402080000      	    71: 	ldi t0,1
02:00000000000000E1 2750204000      	    72: 	bne r2,t0,stall			# Allow only thread 1 to work
                                    	    73: 
02:00000000000000E6 0401E80700      	    74: 	ldi r2,0xFD
02:00000000000000EB 0401080000      	    75: 	ldi r2,0x01					# x = 1
02:00000000000000F0 52010000007C0000	    76: 	stt r2,ary@got
02:00000000000000F8 FCFF
                                    	    77: 
02:00000000000000FA 8401800000      	    78: 	ldi r3,0x10		# calculates 16th fibonacci number (13 = D in hex) (CHANGE HERE IF YOU WANT TO CALCULATE ANOTHER NUMBER)
02:00000000000000FF 8260000800      	    79: 	or r1,r3,r0	# transfer y register to accumulator
02:0000000000000104 8461E8FF07      	    80: 	add r3,r3,-3	# handles the algorithm iteration counting
                                    	    81: 
02:0000000000000109 8400100000      	    82: 	ldi r1,2		# a = 2
02:000000000000010E D2008000007C0400	    83: 	stt r1,0xFFFC0004		# stores a
02:0000000000000116 FCFF
                                    	    84: 
                                    	    85: floop: 
02:0000000000000118 44018000007C0400	    86: 	LDT r2,0xFFFC0004		# x = a
02:0000000000000120 FCFF
02:0000000000000122 8220102000      	    87: 	ADD r1,r1,r2					# a += x
02:0000000000000127 D2008000007C0400	    88: 	STT r1,0xFFFC0004		# stores a
02:000000000000012F FCFF
02:0000000000000131 52010000007C0000	    89: 	STT r2,0xFFFC0000		# stores x
02:0000000000000139 FCFF
02:000000000000013B 8461F8FF07      	    90: 	ADD r3,r3,-1					# y -= 1
02:0000000000000140 276000ECFF      	    91:   bnez r3,floop		# jumps back to loop if Z bit != 0 (y's decremention isn't zero yet)
02:0000000000000145 FFFFFFFFFF      	    92:   NOP
02:000000000000014A FFFFFFFFFF      	    93:   NOP
02:000000000000014F FFFFFFFFFF      	    94:   NOP
02:0000000000000154 FFFFFFFFFF      	    95:   NOP
02:0000000000000159 FFFFFFFFFF      	    96:   NOP
02:000000000000015E FFFFFFFFFF      	    97: 	NOP  
                                    	    98: 	
                                    	    99: stall:
02:0000000000000163 2000000000      	   100: 	BRA	stall
                                    	   101: 
                                    	   102: # ------------------------------------------------------------------------------
                                    	   103: # Delay for a few seconds at startup.
                                    	   104: # ------------------------------------------------------------------------------
                                    	   105: 
                                    	   106: Delay3s:
02:0000000000000168 840000B4047C8096	   107: 	ldi	a0,10000000
02:0000000000000170 9800
                                    	   108: Delay:
                                    	   109: .0001:
02:0000000000000172 5801400401      	   110: 	lsr	a1,a0,8
02:0000000000000177 520100E0077C00FF	   111: 	stt.io a1,leds
02:000000000000017F DFFE
02:0000000000000181 8420F8FF07      	   112: 	sub	a0,a0,1
02:0000000000000186 2B2000F6FF      	   113: 	bgt	a0,r0,.0001	
                                    	   114: doRet:
02:000000000000018B A304000000      	   115: 	ret
                                    	   116: 
                                    	   117: #------------------------------------------------------------------------------
                                    	   118: # clearscreen
                                    	   119: # Parameters:
                                    	   120: # 	none
                                    	   121: # Modifies:
                                    	   122: #		mc0,mc1,mc2
                                    	   123: # Stack space:
                                    	   124: #		none
                                    	   125: #------------------------------------------------------------------------------
                                    	   126: 
                                    	   127: ClearScreen:
02:0000000000000190 46180082007C1004	   128: 	ldo mc0,TextAttr
02:0000000000000198 FCFF
02:000000000000019A 0918060100      	   129: 	or mc0,mc0,' '
02:000000000000019F C6180081007C0804	   130: 	ldo mc1,TextScr
02:00000000000001A7 FCFF
02:00000000000001A9 0439060002      	   131: 	add mc2,mc1,64*8*32						# 64x32x8
                                    	   132: .st1:
02:00000000000001AE 5338060000      	   133: 	sto.io mc0,[mc1]
02:00000000000001B3 8438460000      	   134: 	add mc1,mc1,8
02:00000000000001B8 283096FBFF      	   135: 	blt mc1,mc2,.st1
02:00000000000001BD A304000000      	   136: 	ret
                                    	   137: 
                                    	   138: #------------------------------------------------------------------------------
                                    	   139: # Calculate screen memory location from CursorRow,CursorCol.
                                    	   140: # Returns:
                                    	   141: #		a0 = screen location
                                    	   142: # Stack space:
                                    	   143: #		1 word
                                    	   144: #------------------------------------------------------------------------------
                                    	   145: 
                                    	   146: CalcScreenLoc:
02:00000000000001C2 C0000080007C0004	   147: 	ldb	a0,CursorRow			# cursor row
02:00000000000001CA FCFF
02:00000000000001CC 8820F80300      	   148: 	and a0,a0,0x7f
02:00000000000001D1 40186080007C0304	   149: 	ldb mc0,TextCols			# times number of columns
02:00000000000001D9 FCFF
02:00000000000001DB 8220808100      	   150: 	mul a0,a0,mc0
02:00000000000001E0 40182080007C0104	   151: 	ldb mc0,CursorCol			# plus cursor col
02:00000000000001E8 FCFF
02:00000000000001EA 0818FE0300      	   152: 	and mc0,mc0,0x7f
02:00000000000001EF 8220802100      	   153: 	add a0,a0,mc0
02:00000000000001F4 D1008080007C0404	   154: 	stw a0,TextCurpos			# update text position
02:00000000000001FC FCFF
02:00000000000001FE D800180001      	   155: 	asl a0,a0,3						# multiply by text cell size
02:0000000000000203 45180081007C0804	   156: 	ldtu mc0,TextScr			# add in text screen location
02:000000000000020B FCFF
02:000000000000020D 8220802100      	   157: 	add a0,a0,mc0
02:0000000000000212 A304000000      	   158: 	ret
                                    	   159: 
                                    	   160: #------------------------------------------------------------------------------
                                    	   161: # Display a character on the screen
                                    	   162: #
                                    	   163: # Parameters:
                                    	   164: # 	a1 = char to display
                                    	   165: # Modifies:
                                    	   166: #		screen and text cursor position updated
                                    	   167: #------------------------------------------------------------------------------
                                    	   168: 
                                    	   169: DisplayChar:
02:0000000000000217 B61C008000      	   170: 	push lr1
02:000000000000021C 2758F811007C0D00	   171: 	bne a1,'\r',.0010				# carriage return?
02:0000000000000224 0000
02:0000000000000226 50002080007C0104	   172: 	stb r0,CursorCol				# just set cursor column to zero on a CR
02:000000000000022E FCFF
02:0000000000000230 A076070000      	   173: 	bsr SyncCursor
02:0000000000000235 B71C008000      	   174: 	pop lr1
02:000000000000023A A304000000      	   175: 	ret
                                    	   176: .0010:
02:000000000000023F B640185002      	   177: 	push a0,a1,a2,a3
02:0000000000000244 0841F80700      	   178: 	and a1,a1,0xff					# make char unsigned
02:0000000000000249 2758F825007C9100	   179: 	bne a1,0x91,.0005				# cursor right?
02:0000000000000251 0000
                                    	   180: 	# Cursor right
02:0000000000000253 C0002080007C0104	   181: 	ldb a0,CursorCol				# Is rightmost column reached?
02:000000000000025B FCFF
02:000000000000025D C0016080007C0304	   182: 	ldb a2,TextCols
02:0000000000000265 FCFF
02:0000000000000267 8461F8FF07      	   183: 	sub a2,a2,1
02:000000000000026C 2928180C00      	   184: 	bge a0,a2,.0001
02:0000000000000271 8420080000      	   185: 	add	a0,a0,1							# not rightmost, add 1 to column
02:0000000000000276 D0002080007C0104	   186: 	stb a0,CursorCol
02:000000000000027E FCFF
                                    	   187: .0002:
02:0000000000000280 A0D6060000      	   188: 	bsr SyncCursor
                                    	   189: .0001:
02:0000000000000285 B740185002      	   190: 	pop a0,a1,a2,a3
02:000000000000028A B71C008000      	   191: 	pop lr1
02:000000000000028F A304000000      	   192: 	ret
                                    	   193: .0005:
02:0000000000000294 2748F817007C9000	   194: 	bne a1,0x90,.0006
02:000000000000029C 0000
                                    	   195: 	# Cursor up
02:000000000000029E C0000080007C0004	   196: 	ldb a0,CursorRow				# can the cursor move up?
02:00000000000002A6 FCFF
02:00000000000002A8 262800EEFF      	   197: 	beq a0,r0,.0001
02:00000000000002AD 8420F8FF07      	   198: 	sub a0,a0,1
02:00000000000002B2 D0000080007C0004	   199: 	stb a0,CursorRow
02:00000000000002BA FCFF
02:00000000000002BC 2088FFFFFF      	   200: 	bra .0002
                                    	   201: .0006:
02:00000000000002C1 2748F817007C9300	   202: 	bne a1,0x93,.0007
02:00000000000002C9 0000
                                    	   203: 	# Cursor left
02:00000000000002CB C0002080007C0104	   204: 	ldb a0,CursorCol				# can the cursor move left?
02:00000000000002D3 FCFF
02:00000000000002D5 262000D8FF      	   205: 	beq a0,r0,.0001	
02:00000000000002DA 8420F8FF07      	   206: 	sub a0,a0,1
02:00000000000002DF D0002080007C0104	   207: 	stb a0,CursorCol
02:00000000000002E7 FCFF
02:00000000000002E9 202EFFFFFF      	   208: 	bra .0002
                                    	   209: .0007:
02:00000000000002EE 2740F81F007C9200	   210: 	bne a1,0x92,.0008
02:00000000000002F6 0000
                                    	   211: 	# Cursor down
02:00000000000002F8 C0000080007C0004	   212: 	ldb a0,CursorRow				# can cursor move down?
02:0000000000000300 FCFF
02:0000000000000302 C0014080007C0204	   213: 	ldb a2,TextRows
02:000000000000030A FCFF
02:000000000000030C 8461F8FF07      	   214: 	sub a2,a2,1
02:0000000000000311 292018BAFF      	   215: 	bge a0,a2,.0001
02:0000000000000316 8420080000      	   216: 	add a0,a0,1
02:000000000000031B D0000080007C0004	   217: 	stb a0,CursorRow
02:0000000000000323 FCFF
02:0000000000000325 20B6FEFFFF      	   218: 	bra .0002
                                    	   219: .0008:										# home cursor
02:000000000000032A 2758F81B007C9400	   220: 	bne a1,0x94,.0011
02:0000000000000332 0000
                                    	   221: 	# Home cursor
02:0000000000000334 C0002080007C0104	   222: 	ldb a0,CursorCol
02:000000000000033C FCFF
02:000000000000033E 2620000A00      	   223: 	beq a0,r0,.0003
02:0000000000000343 50002080007C0104	   224: 	stb r0,CursorCol
02:000000000000034B FCFF
02:000000000000034D 2066FEFFFF      	   225: 	bra .0002
                                    	   226: .0003:
02:0000000000000352 50000080007C0004	   227: 	stb r0,CursorRow
02:000000000000035A FCFF
02:000000000000035C 2048FEFFFF      	   228: 	bra .0002
                                    	   229: .0011:
02:0000000000000361 2648F849007C9900	   230: 	beq a1,0x99,doDelete
02:0000000000000369 0000
02:000000000000036B 2650F82D007C0800	   231: 	beq a1,CTRLH,doBackspace
02:0000000000000373 0000
02:0000000000000375 2640F865007C1800	   232: 	beq a1,CTRLX,doCtrlX
02:000000000000037D 0000
02:000000000000037F 2640F81F007C0A00	   233: 	beq a1,'\n',.0012				# line feed
02:0000000000000387 0000
                                    	   234: 	# Regular char
02:0000000000000389 A072FCFFFF      	   235: 	bsr CalcScreenLoc				# a0 = screen location
02:000000000000038E C6010082007C1004	   236: 	ldo a2,TextAttr
02:0000000000000396 FCFF
02:0000000000000398 8261100800      	   237: 	or a2,a2,a1
02:000000000000039D D321000000      	   238: 	sto.io a2,[a0]
02:00000000000003A2 A0B8010000      	   239: 	bsr IncCursorPos
                                    	   240: .0004:
02:00000000000003A7 A088040000      	   241: 	bsr SyncCursor
02:00000000000003AC B740185002      	   242: 	pop a0,a1,a2,a3
02:00000000000003B1 B71C008000      	   243: 	pop lr1
02:00000000000003B6 A304000000      	   244: 	ret
                                    	   245: .0012:										# line feed
02:00000000000003BB A012020000      	   246: 	bsr IncCursorRow
02:00000000000003C0 20CEFFFFFF      	   247: 	bra .0004
                                    	   248: 			
                                    	   249: 	#---------------------------
                                    	   250: 	# CTRL-H: backspace
                                    	   251: 	#---------------------------
                                    	   252: doBackspace:
02:00000000000003C5 C0002080007C0104	   253: 	ldb a0,CursorCol				# At start of line already?
02:00000000000003CD FCFF
02:00000000000003CF 2720080A00      	   254: 	bne a0,a0,.0001
02:00000000000003D4 B740185002      	   255: 	pop a0,a1,a2,a3
02:00000000000003D9 B71C008000      	   256: 	pop lr1
02:00000000000003DE A304000000      	   257: 	ret
                                    	   258: .0001:
02:00000000000003E3 8420F8FF07      	   259: 	sub a0,a0,1							#decrement column
02:00000000000003E8 D0002080007C0104	   260: 	stb a0,CursorCol
02:00000000000003F0 FCFF
                                    	   261: 
                                    	   262: 	#---------------------------
                                    	   263: 	# Delete key
                                    	   264: 	#---------------------------
                                    	   265: doDelete:
02:00000000000003F2 A0A0FBFFFF      	   266: 	bsr	CalcScreenLoc				# a0 = screen location
02:00000000000003F7 C0012080007C0104	   267: 	ldb a2,CursorCol
02:00000000000003FF FCFF
02:0000000000000401 40146080007C0304	   268: 	ldb a3,TextCols
02:0000000000000409 FCFF
                                    	   269: .0001:
02:000000000000040B 4621000100      	   270: 	ldo a1,8[a0]
02:0000000000000410 5321000000      	   271: 	sto.io a1,[a0]
02:0000000000000415 8420400000      	   272: 	add a0,a0,8
02:000000000000041A 8461080000      	   273: 	add a2,a2,1
02:000000000000041F 286040F7FF      	   274: 	blt a2,a3,.0001
02:0000000000000424 0401000100      	   275: 	ldi a1,' '							# one space
02:0000000000000429 502100FF07      	   276: 	stb.io a1,-8[a0]				# terminate line with space char
02:000000000000042E B740185002      	   277: 	pop a0,a1,a2,a3
02:0000000000000433 B71C008000      	   278: 	pop lr1
02:0000000000000438 A304000000      	   279: 	ret
                                    	   280: 
                                    	   281: 	#---------------------------
                                    	   282: 	# CTRL-X: erase line
                                    	   283: 	#---------------------------
                                    	   284: doCtrlX:
02:000000000000043D 50002080007C0104	   285: 	stb r0,CursorCol			# Reset cursor to start of line
02:0000000000000445 FCFF
02:0000000000000447 C0006080007C0304	   286: 	ldb a0,TextCols				# and display TextCols number of spaces
02:000000000000044F FCFF
02:0000000000000451 0401000100      	   287: 	ldi	a1,' '						# one space
                                    	   288: .0001:
                                    	   289: 	# DisplayChar is called recursively here
                                    	   290: 	# It's safe to do because we know it won't recurse again due to the
                                    	   291: 	# fact we know the character being displayed is a space char
02:0000000000000456 A082FBFFFF      	   292: 	bsr DisplayChar
02:000000000000045B 8420F8FF07      	   293: 	sub a0,a0,1
02:0000000000000460 293000FAFF      	   294: 	bge a0,r0,.0001
02:0000000000000465 50002080007C0104	   295: 	stb r0,CursorCol			# Reset cursor to start of line
02:000000000000046D FCFF
02:000000000000046F B740185002      	   296: 	pop a0,a1,a2,a3
02:0000000000000474 B71C008000      	   297: 	pop lr1
02:0000000000000479 A304000000      	   298: 	ret										# we're done
                                    	   299: 
                                    	   300: #------------------------------------------------------------------------------
                                    	   301: # Increment the cursor position, scroll the screen if needed.
                                    	   302: #------------------------------------------------------------------------------
                                    	   303: #
                                    	   304: IncCursorPos:
02:000000000000047E B640000001      	   305: 	push a0,a1
02:0000000000000483 C0002080007C0104	   306: 	ldb a0,CursorCol
02:000000000000048B FCFF
02:000000000000048D 8420080000      	   307: 	add a0,a0,1
02:0000000000000492 D0002080007C0104	   308: 	stb a0,CursorCol
02:000000000000049A FCFF
02:000000000000049C C0006080007C0304	   309: 	ldb a0,TextCols
02:00000000000004A4 FCFF
02:00000000000004A6 40012080007C0104	   310: 	ldb a1,CursorCol
02:00000000000004AE FCFF
02:00000000000004B0 2850083600      	   311: 	blt a1,a0,IncCursorPos1	# return if text cols not exceeded
02:00000000000004B5 50002080007C0104	   312: 	stb r0,CursorCol
02:00000000000004BD FCFF
02:00000000000004BF B740000001      	   313: 	pop a0,a1
                                    	   314: IncCursorRow:
02:00000000000004C4 FFFFFFFFFF      	   315: 	nop
02:00000000000004C9 FFFFFFFFFF      	   316: 	nop
02:00000000000004CE B640000001      	   317: 	push a0,a1
02:00000000000004D3 C0000080007C0004	   318: 	ldb a0,CursorRow
02:00000000000004DB FCFF
02:00000000000004DD 8420080000      	   319: 	add a0,a0,1
02:00000000000004E2 D0000080007C0004	   320: 	stb a0,CursorRow
02:00000000000004EA FCFF
02:00000000000004EC 40014080007C0204	   321: 	ldb a1,TextRows
02:00000000000004F4 FCFF
02:00000000000004F6 2820101400      	   322: 	blt a0,a1,IncCursorPos1	# return if text rows not exceeded
02:00000000000004FB 0441F8FF07      	   323: 	sub a1,a1,1
02:0000000000000500 50010080007C0004	   324: 	stb a1,CursorRow
02:0000000000000508 FCFF
02:000000000000050A B61C008000      	   325: 	push lr1
02:000000000000050F A066F9FFFF      	   326: 	bsr CalcScreenLoc
02:0000000000000514 A028000000      	   327: 	bsr ScrollUp
02:0000000000000519 B71C008000      	   328: 	pop lr1
                                    	   329: IncCursorPos1:
02:000000000000051E B740000001      	   330: 	pop	a0,a1
02:0000000000000523 A304000000      	   331: 	ret
                                    	   332: 
                                    	   333: #------------------------------------------------------------------------------
                                    	   334: # Scroll text screen
                                    	   335: #------------------------------------------------------------------------------
                                    	   336: 
                                    	   337: ScrollUp:
02:0000000000000528 B69C000001      	   338: 	push lr1,t0
02:000000000000052D B640185002      	   339: 	push a0,a1,a2,a3
02:0000000000000532 C4000081007C0804	   340: 	ldt a0,TextScr				# a0 = pointer to screen
02:000000000000053A FCFF
02:000000000000053C 40016080007C0304	   341: 	ldb a1,TextCols				# a1 = number of columns
02:0000000000000544 FCFF
02:0000000000000546 C0014080007C0204	   342: 	ldb a2,TextRows
02:000000000000054E FCFF
02:0000000000000550 8461F8FF07      	   343: 	sub a2,a2,1
02:0000000000000555 8241188000      	   344: 	mul a2,a1,a2					# a2 = number of cells to move
02:000000000000055A 0F54000000      	   345: 	mov a3,a1
                                    	   346: .0001:
02:000000000000055F 4F22808101      	   347: 	ldo t0,[a0+a3]
02:0000000000000564 0214152800      	   348: 	sub a3,a3,a1
02:0000000000000569 572280C100      	   349: 	sto.io t0,[a0+a3]
02:000000000000056E 0214152000      	   350: 	add a3,a3,a1
02:0000000000000573 0214152000      	   351: 	add a3,a3,a1
02:0000000000000578 8461F8FF07      	   352: 	sub a2,a2,1
02:000000000000057D 2B7000F0FF      	   353: 	bgt a2,r0,.0001
02:0000000000000582 A028000000      	   354: 	bsr BlankLastLine
02:0000000000000587 B740185002      	   355: 	pop a0,a1,a2,a3
02:000000000000058C B79C000001      	   356: 	pop lr1,t0
02:0000000000000591 A304000000      	   357: 	ret
                                    	   358: 
                                    	   359: #------------------------------------------------------------------------------
                                    	   360: # Blank out the last line of the screen.
                                    	   361: #------------------------------------------------------------------------------
                                    	   362: 
                                    	   363: BlankLastLine:
02:0000000000000596 44180081007C0804	   364: 	ldt mc0,TextScr
02:000000000000059E FCFF
02:00000000000005A0 C0186080007C0304	   365: 	ldb mc1,TextCols
02:00000000000005A8 FCFF
02:00000000000005AA 40194080007C0204	   366: 	ldb mc2,TextRows
02:00000000000005B2 FCFF
02:00000000000005B4 0459FEFF07      	   367: 	sub mc2,mc2,1
02:00000000000005B9 8238968100      	   368: 	mul mc1,mc1,mc2
02:00000000000005BE D818180001      	   369: 	asl mc1,mc1,3
02:00000000000005C3 8419000100      	   370: 	ldi mc3,' '
02:00000000000005C8 40196080007C0304	   371: 	ldb mc2,TextCols
02:00000000000005D0 FCFF
                                    	   372: .0001:
02:00000000000005D2 D7198E0100      	   373: 	stb.io mc3,[mc0+mc1]
02:00000000000005D7 8438460000      	   374: 	add mc1,mc1,8
02:00000000000005DC 0459FEFF07      	   375: 	sub mc2,mc2,1
02:00000000000005E1 2B4806F8FF      	   376: 	bgt mc2,r0,.0001
02:00000000000005E6 A304000000      	   377: 	ret	
                                    	   378: 
                                    	   379: #------------------------------------------------------------------------------
                                    	   380: # SyncCursor:
                                    	   381: #
                                    	   382: # Sync the hardware cursor's position to the text cursor position.
                                    	   383: #
                                    	   384: # Parameters:
                                    	   385: #		none
                                    	   386: # Returns:
                                    	   387: #		none
                                    	   388: # Registers Affected:
                                    	   389: #		mc0
                                    	   390: #------------------------------------------------------------------------------
                                    	   391: 
                                    	   392: SyncCursor:
02:00000000000005EB 42188080007C0404	   393: 	ldw mc0,TextCurpos
02:00000000000005F3 FCFF
02:00000000000005F5 51188004007C2400	   394: 	stw.io mc0,0xfec80024
02:00000000000005FD C8FE
02:00000000000005FF A304000000      	   395: 	ret
                                    	   396: 	
                                    	   397: #------------------------------------------------------------------------------
                                    	   398: # Display string on screen
                                    	   399: #
                                    	   400: # Parameters:
                                    	   401: # 	a0 = pointer to string to display
                                    	   402: # Returns:
                                    	   403: #		<none>
                                    	   404: # Modifies:
                                    	   405: #		<none>
                                    	   406: #------------------------------------------------------------------------------
                                    	   407: 
                                    	   408: DisplayString:
02:0000000000000604 B63C108001      	   409: 	push lr1,a0,a1
                                    	   410: .0002:
02:0000000000000609 4021000000      	   411: 	ldb.io a1,[a0]
02:000000000000060E 2640000A00      	   412: 	beq a1,r0,.0001
02:0000000000000613 A008F8FFFF      	   413: 	bsr DisplayChar
02:0000000000000618 8420080000      	   414: 	add a0,a0,1
02:000000000000061D 20D8FFFFFF      	   415: 	bra .0002
                                    	   416: .0001:
02:0000000000000622 B73C108001      	   417: 	pop lr1,a0,a1
02:0000000000000627 A304000000      	   418: 	ret
                                    	   419: 
                                    	   420: #------------------------------------------------------------------------------
                                    	   421: #------------------------------------------------------------------------------
                                    	   422: CRLF:
02:000000000000062C 3601008000      	   423: 	push a1
02:0000000000000631 0401680000      	   424: 	ldi a1,'\r'
02:0000000000000636 A0C2F7FFFF      	   425: 	bsr DisplayChar
02:000000000000063B 0401500000      	   426: 	ldi a1,'\n'
02:0000000000000640 A0AEF7FFFF      	   427: 	bsr DisplayChar
02:0000000000000645 3701008000      	   428: 	pop a1
02:000000000000064A A304000000      	   429: 	ret
                                    	   430: 
                                    	   431: #------------------------------------------------------------------------------
                                    	   432: # Display nybble in a1
                                    	   433: #------------------------------------------------------------------------------
                                    	   434: 
                                    	   435: DisplayNybble:
02:000000000000064F 3621070001      	   436: 	push a1,lr1
02:0000000000000654 0841780000      	   437: 	and a1,a1,15
02:0000000000000659 0441800100      	   438: 	add a1,a1,'0'
02:000000000000065E 2A58F807007C3900	   439: 	ble a1,'9',.0001
02:0000000000000666 0000
02:0000000000000668 0441380000      	   440: 	add a1,a1,7
                                    	   441: .0001:
02:000000000000066D A054F7FFFF      	   442: 	bsr DisplayChar
02:0000000000000672 3721070001      	   443: 	pop a1,lr1
02:0000000000000677 A304000000      	   444: 	ret
                                    	   445: 
                                    	   446: #------------------------------------------------------------------------------
                                    	   447: # Display the byte in a1
                                    	   448: #------------------------------------------------------------------------------
                                    	   449: 
                                    	   450: DisplayByte:
02:000000000000067C B61C008000      	   451: 	push lr1
02:0000000000000681 A09CFFFFFF      	   452: 	bsr DisplayNybble
02:0000000000000686 5801201001      	   453: 	ror a1,a1,4
02:000000000000068B A088FFFFFF      	   454: 	bsr DisplayNybble
02:0000000000000690 5801200C01      	   455: 	rol a1,a1,4
02:0000000000000695 B71C008000      	   456: 	pop lr1
02:000000000000069A A304000000      	   457: 	ret
                                    	   458: 
                                    	   459: #------------------------------------------------------------------------------
                                    	   460: # Display the wyde in a0.B
                                    	   461: #------------------------------------------------------------------------------
                                    	   462: 
                                    	   463: DisplayWyde:
02:000000000000069F B61C008000      	   464: 	push lr1
02:00000000000006A4 A0B0FFFFFF      	   465: 	bsr DisplayByte
02:00000000000006A9 5801401001      	   466: 	ror a1,a1,8
02:00000000000006AE A09CFFFFFF      	   467: 	bsr DisplayByte
02:00000000000006B3 5801400C01      	   468: 	rol a1,a1,8
02:00000000000006B8 B71C008000      	   469: 	pop lr1
02:00000000000006BD A304000000      	   470: 	ret
                                    	   471: 
                                    	   472: #------------------------------------------------------------------------------
                                    	   473: # Display the tetra in a1
                                    	   474: #------------------------------------------------------------------------------
                                    	   475: 
                                    	   476: DisplayTetra:
02:00000000000006C2 B61C008000      	   477: 	push lr1
02:00000000000006C7 A0B0FFFFFF      	   478: 	bsr DisplayWyde
02:00000000000006CC 5801801001      	   479: 	ror a1,a1,16
02:00000000000006D1 A09CFFFFFF      	   480: 	bsr DisplayWyde
02:00000000000006D6 5801800C01      	   481: 	rol a1,a1,16
02:00000000000006DB B71C008000      	   482: 	pop lr1
02:00000000000006E0 A304000000      	   483: 	ret
                                    	   484: 
                                    	   485: #------------------------------------------------------------------------------
                                    	   486: # Display the octa in a1
                                    	   487: #------------------------------------------------------------------------------
                                    	   488: 
                                    	   489: DisplayOcta:
02:00000000000006E5 B61C008000      	   490: 	push lr1
02:00000000000006EA A0B0FFFFFF      	   491: 	bsr DisplayTetra
02:00000000000006EF 5801001101      	   492: 	ror a1,a1,32
02:00000000000006F4 A09CFFFFFF      	   493: 	bsr DisplayTetra
02:00000000000006F9 5801000D01      	   494: 	rol a1,a1,32
02:00000000000006FE B71C008000      	   495: 	pop lr1
02:0000000000000703 A304000000      	   496: 	ret
                                    	   497: 
                                    	   498: GetNumber:
02:0000000000000708 A304000000      	   499: 	ret
                                    	   500: 
                                    	   501: #------------------------------------------------------------------------------
                                    	   502: #------------------------------------------------------------------------------
                                    	   503: 	.align 4
                                    	   504: ExcHandler:
02:0000000000000710 2304000000      	   505: 	rti
                                    	   506: 
                                    	   507: 	.include "serial.asm"

Source: "serial.asm"
                                    	     1: # ============================================================================
                                    	     2: #        __
                                    	     3: #   \\__/ o\    (C) 2022-2023  Robert Finch, Waterloo
                                    	     4: #    \  __ /    All rights reserved.
                                    	     5: #     \/_//     robfinch<remove>@finitron.ca
                                    	     6: #       ||
                                    	     7: #  
                                    	     8: #
                                    	     9: # Serial port routines for a WDC6551 compatible circuit.
                                    	    10: #
                                    	    11: # ============================================================================
                                    	    12: #
                                    	    13: 	.extern Delay
                                    	    14: 
                                    	    15: 	.bss
00:000000000000000A 00              	    16: 	.space	10
00:000000000000000B *
                                    	    17: .set XON,0x11
                                    	    18: .set XOFF,0x13
                                    	    19: .set ACIA_RX,0xFED00000
                                    	    20: .set ACIA_TX,0xFED00000
                                    	    21: .set ACIA_STAT,0xFED00004
                                    	    22: .set ACIA_CMD,0xFED00008
                                    	    23: .set ACIA_CTRL,0xFED0000C
                                    	    24: .set SerTailRcv,0xFFFC0000
                                    	    25: .set SerHeadRcv,0xFFFC0004
                                    	    26: .set SerTailXmit,0xFFFC0008
                                    	    27: .set SerHeadXmit,0xFFFC000C
                                    	    28: .set SerRcvXon,0xFFFC0010
                                    	    29: .set SerRcvXoff,0xFFFC0011
                                    	    30: .set SerRcvBuf,0xFFFC1000
                                    	    31: .set uart,0xFED00000
                                    	    32: 
                                    	    33: 	.text
                                    	    34: #------------------------------------------------------------------------------
                                    	    35: # Initialize serial port.
                                    	    36: #
                                    	    37: # Clear buffer indexes. Two bytes are used for the buffer index.
                                    	    38: # The port is initialized for 57600 baud, 1 stop bit and 8 bits data sent.
                                    	    39: # The internal baud rate generator is used.
                                    	    40: #
                                    	    41: # Stack Space:
                                    	    42: #		none
                                    	    43: # Parameters:
                                    	    44: #		none
                                    	    45: # Modifies:
                                    	    46: #		mc0
                                    	    47: # Returns:
                                    	    48: #		none
                                    	    49: #------------------------------------------------------------------------------
                                    	    50: 
                                    	    51: InitSerial:
                                    	    52: SerialInit:
02:0000000000000715 52008000007C0400	    53: 	stt	r0,SerHeadRcv
02:000000000000071D FCFF
02:000000000000071F 52000000007C0000	    54: 	stt	r0,SerTailRcv
02:0000000000000727 FCFF
02:0000000000000729 52008001007C0C00	    55: 	stt	r0,SerHeadXmit
02:0000000000000731 FCFF
02:0000000000000733 52000001007C0800	    56: 	stt	r0,SerTailXmit
02:000000000000073B FCFF
02:000000000000073D 50000002007C1000	    57: 	stb	r0,SerRcvXon
02:0000000000000745 FCFF
02:0000000000000747 50002002007C1100	    58: 	stb	r0,SerRcvXoff
02:000000000000074F FCFF
                                    	    59: #	lda		COREID
                                    	    60: #sini1:
                                    	    61: #	cmpa	IOFocusID
                                    	    62: #	bne		sini1
                                    	    63: #	orcc	#$290						; mask off interrupts
                                    	    64: #	ldd		#ACIA_MMU				; map ACIA into address space
                                    	    65: #	std		MMU
02:0000000000000751 0418480000      	    66: 	ldi	mc0,0x09						#	dtr,rts active, rxint enabled (bit 1=0), no parity
02:0000000000000756 52180001007C0800	    67: 	stt.io mc0,ACIA_CMD
02:000000000000075E D0FE
                                    	    68: #	ldi	a0,0x6001E					# baud 9600, 1 stop bit, 8 bit, internal baud gen
02:0000000000000760 04188800007C1100	    69: 	ldi	mc0,0x08060011			# baud 57600, 1 stop bit, 8 bit, internal baud gen
02:0000000000000768 0608
02:000000000000076A 52188001007C0C00	    70: 	stt.io mc0,ACIA_CTRL		# disable fifos (bit zero, one), reset fifos
02:0000000000000772 D0FE
                                    	    71: #	ldd		#$000F00				; map out ACIA
                                    	    72: #	std		MMU
02:0000000000000774 A304000000      	    73: 	ret
                                    	    74: 
                                    	    75: #------------------------------------------------------------------------------
                                    	    76: # Calculate number of character in input buffer. Must be called with interrupts
                                    	    77: # disabled.
                                    	    78: #
                                    	    79: # Stack Space:
                                    	    80: #		none
                                    	    81: # Parameters:
                                    	    82: #		none
                                    	    83: # Modifies:
                                    	    84: #		mc0,mc1
                                    	    85: # Returns:
                                    	    86: #		a0 = number of bytes in buffer.
                                    	    87: #------------------------------------------------------------------------------
                                    	    88: 
                                    	    89: SerialRcvCount:
02:0000000000000779 8F00000000      	    90: 	mov	a0,r0
02:000000000000077E 45180000007C0000	    91: 	ldtu mc0,SerTailRcv
02:0000000000000786 FCFF
02:0000000000000788 C5188000007C0400	    92: 	ldtu mc1,SerHeadRcv
02:0000000000000790 FCFF
02:0000000000000792 82008E2900      	    93: 	sub	a0,mc0,mc1
02:0000000000000797 2920001400      	    94: 	bge	a0,r0,.srcXit
02:000000000000079C 8400008000      	    95: 	ldi	a0,0x1000
02:00000000000007A1 C5188000007C0400	    96: 	ldtu mc1,SerHeadRcv
02:00000000000007A9 FCFF
02:00000000000007AB 45180000007C0000	    97: 	ldtu mc0,SerTailRcv
02:00000000000007B3 FCFF
02:00000000000007B5 8220882900      	    98: 	sub	a0,a0,mc1
02:00000000000007BA 8220802100      	    99: 	add	a0,a0,mc0
                                    	   100: .srcXit:
02:00000000000007BF A304000000      	   101: 	ret
                                    	   102: 
                                    	   103: #------------------------------------------------------------------------------
                                    	   104: # SerialGetChar
                                    	   105: #
                                    	   106: # Check the serial port buffer to see if there's a char available. If there's
                                    	   107: # a char available then return it. If the buffer is almost empty then send an
                                    	   108: # XON.
                                    	   109: #
                                    	   110: # Stack Space:
                                    	   111: #		3 words
                                    	   112: # Parameters:
                                    	   113: #		none
                                    	   114: # Modifies:
                                    	   115: #		none
                                    	   116: # Returns:
                                    	   117: #		a0 = character or -1
                                    	   118: #------------------------------------------------------------------------------
                                    	   119: 
                                    	   120: SerialGetChar:
02:00000000000007C4 B65C188001      	   121: 	push lr1,a1,a2
02:00000000000007C9 8400400000      	   122: 	ldi	a0,8							# bit 3=machine interrupt enable, mask off interrupts
02:00000000000007CE 8721208007      	   123: 	csrrc	a2,a0,0x3004		# status reg
02:00000000000007D3 FFFFFFFFFF      	   124: 	nop
02:00000000000007D8 FFFFFFFFFF      	   125: 	nop
02:00000000000007DD FFFFFFFFFF      	   126: 	nop
02:00000000000007E2 FFFFFFFFFF      	   127: 	nop
02:00000000000007E7 FFFFFFFFFF      	   128: 	nop
02:00000000000007EC FFFFFFFFFF      	   129: 	nop
02:00000000000007F1 FFFFFFFFFF      	   130: 	nop
02:00000000000007F6 FFFFFFFFFF      	   131: 	nop
02:00000000000007FB A0FCFEFFFF      	   132: 	bsr	SerialRcvCount			# check number of chars in receive buffer
02:0000000000000800 2B38F81B007C0800	   133: 	bgt	a0,8,.sgc2
02:0000000000000808 0000
02:000000000000080A C0000002007C1000	   134: 	ldb	a0,SerRcvXon			# skip sending XON if already sent
02:0000000000000812 FCFF
02:0000000000000814 2738001000      	   135: 	bnez a0,.sgc2        	# XON already sent?
02:0000000000000819 8400880000      	   136: 	ldi	a0,XON						# if <8 send an XON
02:000000000000081E 50002002007C1100	   137: 	stb	r0,SerRcvXoff			# clear XOFF status
02:0000000000000826 FCFF
02:0000000000000828 D0000002007C1000	   138: 	stb	a0,SerRcvXon			# flag so we don't send it multiple times
02:0000000000000830 FCFF
02:0000000000000832 A0A4010000      	   139: 	bsr	SerialPutChar
                                    	   140: .sgc2:
02:0000000000000837 C5008000007C0400	   141: 	ldtu a0,SerHeadRcv		# check if anything is in buffer
02:000000000000083F FCFF
02:0000000000000841 45010000007C0000	   142: 	ldtu a1,SerTailRcv
02:0000000000000849 FCFF
02:000000000000084B 2620101E00      	   143: 	beq	a0,a1,.sgcNoChars
02:0000000000000850 0F21000000      	   144: 	mov	a1,a0
02:0000000000000855 C1400000027C0010	   145: 	ldbu a0,SerRcvBuf[a1]	# get byte from buffer
02:000000000000085D FCFF7C00000000
02:0000000000000864 0441080000      	   146: 	add	a1,a1,1
02:0000000000000869 0841F87F00      	   147: 	and	a1,a1,0xfff				# 4k wrap around
02:000000000000086E 52018000007C0400	   148: 	stt	a1,SerHeadRcv
02:0000000000000876 FCFF
02:0000000000000878 0760208003      	   149: 	csrrw	r0,a2,0x3004		# restore interrupts
02:000000000000087D B75C188001      	   150: 	pop lr1,a1,a2
02:0000000000000882 A304000000      	   151: 	ret
                                    	   152: .sgcNoChars:
02:0000000000000887 8400F8FF07      	   153: 	ldi	a0,-1							#-1
02:000000000000088C 0760208003      	   154: 	csrrw	r0,a2,0x3004		# restore interrupts
02:0000000000000891 B75C188001      	   155: 	pop lr1,a1,a2
02:0000000000000896 A304000000      	   156: 	ret
                                    	   157: 
                                    	   158: #------------------------------------------------------------------------------
                                    	   159: # SerialPeekChar
                                    	   160: #
                                    	   161: # Check the serial port buffer to see if there's a char available. If there's
                                    	   162: # a char available then return it. But don't update the buffer indexes. No need
                                    	   163: # to send an XON here.
                                    	   164: #
                                    	   165: # Stack Space:
                                    	   166: #		none
                                    	   167: # Parameters:
                                    	   168: #		none
                                    	   169: # Modifies:
                                    	   170: #		mc0
                                    	   171: # Returns:
                                    	   172: #		a0 = character or -1
                                    	   173: #------------------------------------------------------------------------------
                                    	   174: 
                                    	   175: SerialPeekChar:
02:000000000000089B FAFF3F0000      	   176: 	atom 077777							# temporarily mask interrupts
02:00000000000008A0 C5008000007C0400	   177: 	ldtu a0,SerHeadRcv			# check if anything is in buffer
02:00000000000008A8 FCFF
02:00000000000008AA 45180000007C0000	   178: 	ldtu mc0,SerTailRcv
02:00000000000008B2 FCFF
02:00000000000008B4 2628800D00      	   179: 	beq	a0,mc0,.spcNoChars		# no?
02:00000000000008B9 C1200000027C0010	   180: 	ldbu a0,SerRcvBuf[a0]		# get byte from buffer
02:00000000000008C1 FCFF7C00000000
02:00000000000008C8 A304000000      	   181: 	ret
                                    	   182: .spcNoChars:
02:00000000000008CD 8400F8FF07      	   183: 	ldi	a0,-1
02:00000000000008D2 A304000000      	   184: 	ret
                                    	   185: 
                                    	   186: #------------------------------------------------------------------------------
                                    	   187: # SerialPeekChar
                                    	   188: #		Get a character directly from the I/O port. This bypasses the input
                                    	   189: # buffer.
                                    	   190: #
                                    	   191: # Stack Space:
                                    	   192: #		none
                                    	   193: # Parameters:
                                    	   194: #		none
                                    	   195: # Modifies:
                                    	   196: #		a0
                                    	   197: # Returns:
                                    	   198: #		a0 = character or -1
                                    	   199: #------------------------------------------------------------------------------
                                    	   200: 
                                    	   201: SerialPeekCharDirect:
                                    	   202: #	lda		COREID					; Ensure we have the IO Focus
                                    	   203: #	cmpa	IOFocusID
                                    	   204: #	bne		spcd0001
                                    	   205: # Disallow interrupts between status read and rx read.
                                    	   206: #	orcc	#$290						; mask off interrupts
02:00000000000008D7 FAFF3F0000      	   207: 	atom 077777
02:00000000000008DC C1008000007C0400	   208: 	ldbu.io	a0,ACIA_STAT
02:00000000000008E4 D0FE
02:00000000000008E6 2E20180A00      	   209: 	bbc	a0,3,.0001				# look for Rx not empty
02:00000000000008EB C1000000007C0000	   210: 	ldbu.io	a0,ACIA_RX
02:00000000000008F3 D0FE
02:00000000000008F5 A304000000      	   211: 	ret
                                    	   212: .0001:
02:00000000000008FA 8400F8FF07      	   213: 	ldi	a0,-1
02:00000000000008FF A304000000      	   214: 	ret
                                    	   215: 
                                    	   216: #------------------------------------------------------------------------------
                                    	   217: # SerialPutChar
                                    	   218: #    Put a character to the serial transmitter. This routine blocks until the
                                    	   219: # transmitter is empty. 
                                    	   220: #
                                    	   221: # Stack Space
                                    	   222: #		1 words
                                    	   223: # Parameters:
                                    	   224: #		a1 = character to put
                                    	   225: # Modifies:
                                    	   226: #		mc0
                                    	   227: #------------------------------------------------------------------------------
                                    	   228: 
                                    	   229: SerialPutChar:
                                    	   230: .0001:
                                    	   231: #	lda		COREID					; Ensure we have the IO Focus
                                    	   232: #	cmpa	IOFocusID
                                    	   233: #	bne		spc0001
02:0000000000000904 FFFFFFFFFF      	   234: 	nop										# provide a window for an interrupt to occur
02:0000000000000909 FFFFFFFFFF      	   235: 	nop
                                    	   236: 	# Between the status read and the transmit do not allow an
                                    	   237: 	# intervening interrupt.
02:000000000000090E FAFF000000      	   238: 	atom 0777
02:0000000000000913 45188000007C0400	   239: 	ldtu.io mc0,ACIA_STAT	# wait until the uart indicates tx empty
02:000000000000091B D0FE
02:000000000000091D 2E1826F2FF      	   240: 	bbc	mc0,4,.0001				# branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000922 52010000007C0000	   241: 	stt.io a1,ACIA_TX			# send the byte
02:000000000000092A D0FE
02:000000000000092C A304000000      	   242: 	ret
                                    	   243: 
                                    	   244: #------------------------------------------------------------------------------
                                    	   245: # Serial IRQ routine
                                    	   246: #
                                    	   247: # Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                                    	   248: # Received characters are buffered. If the buffer becomes full, new characters
                                    	   249: # will be lost.
                                    	   250: #
                                    	   251: # Stack Space:
                                    	   252: #		1 word
                                    	   253: # Parameters:
                                    	   254: #		none
                                    	   255: # Modifies:
                                    	   256: #		d,x
                                    	   257: # Returns:
                                    	   258: #		none
                                    	   259: #------------------------------------------------------------------------------
                                    	   260: 
                                    	   261: SerialIRQ:
                                    	   262: #	lda		$2000+$D3				; Serial active interrupt flag
                                    	   263: #	beq		notSerInt
                                    	   264: .0002:
02:0000000000000931 C4008000007C0400	   265: 	ldt.io a0,ACIA_STAT		# look for IRQs
02:0000000000000939 D0FE
02:000000000000093B 2B20005000      	   266: 	bgt	a0,r0,.0001				# quick test for any irqs
02:0000000000000940 2E38184C00      	   267: 	bbc	a0,3,.0001				# check bit 3 = rx full (not empty)
02:0000000000000945 C1000000007C0000	   268: 	ldbu.io	a0,ACIA_RX		# get data from Rx buffer to clear interrupt
02:000000000000094D D0FE
02:000000000000094F 45010000007C0000	   269: 	ldtu a1,SerTailRcv		# check if recieve buffer full
02:0000000000000957 FCFF
02:0000000000000959 0441080000      	   270: 	add	a1,a1,1
02:000000000000095E 0841F87F00      	   271: 	and	a1,a1,0xfff				# 4k Limit
02:0000000000000963 C5018000007C0400	   272: 	ldtu a2,SerHeadRcv
02:000000000000096B FCFF
02:000000000000096D 2650183600      	   273: 	beq	a1,a2,.0001				# ignore byte if buffer full
02:0000000000000972 52010000007C0000	   274: 	stt	a1,SerTailRcv			# update tail pointer
02:000000000000097A FCFF
02:000000000000097C 0441F8FF07      	   275: 	sub	a1,a1,1						# backup
02:0000000000000981 0841F87F00      	   276: 	and	a1,a1,0xfff
02:0000000000000986 D0400000027C0010	   277: 	stb	a0,SerRcvBuf[a1]	# store recieved byte in buffer
02:000000000000098E FCFF7C00000000
02:0000000000000995 C1002002007C1100	   278: 	ldbu a0,SerRcvXoff		# check if xoff already sent
02:000000000000099D FCFF
02:000000000000099F 273000C8FF      	   279: 	bne	a0,r0,.0002
02:00000000000009A4 A0AAFBFFFF      	   280: 	bsr	SerialRcvCount		# if more than 4070 chars in buffer
02:00000000000009A9 2820F8C5FF7CE60F	   281: 	blt	a0,4070,.0002
02:00000000000009B1 0000
02:00000000000009B3 8400980000      	   282: 	ldi	a0,XOFF						# send an XOFF
02:00000000000009B8 50000002007C1000	   283: 	stb	r0,SerRcvXon			# clear XON status
02:00000000000009C0 FCFF
02:00000000000009C2 D0002002007C1100	   284: 	stb	a0,SerRcvXoff			# set XOFF status
02:00000000000009CA FCFF
02:00000000000009CC D0000000007C0000	   285: 	stb.io a0,ACIA_TX
02:00000000000009D4 D0FE
02:00000000000009D6 20B6FEFFFF      	   286: 	bra	.0002     				# check the status for another byte
                                    	   287: 	# Process other serial IRQs
                                    	   288: .0001:
02:00000000000009DB A304000000      	   289: 	ret
                                    	   290: 
                                    	   291: #------------------------------------------------------------------------------
                                    	   292: # Put a string to the serial port.
                                    	   293: #
                                    	   294: # Stack Space:
                                    	   295: #		none
                                    	   296: # Parameters:
                                    	   297: #		a0 = pointer to string
                                    	   298: # Modifies:
                                    	   299: #		mc0,mc1,mc2,mc3
                                    	   300: # Returns:
                                    	   301: #		none
                                    	   302: #------------------------------------------------------------------------------
                                    	   303: 
                                    	   304: SerialPutString:
02:00000000000009E0 8F38000000      	   305: 	mov mc1,a0
02:00000000000009E5 0F59000000      	   306: 	mov mc2,a1
                                    	   307: .0002:
02:00000000000009EA 4021000000      	   308: 	ldb a1,[a0]
02:00000000000009EF 2658001A00      	   309: 	beq	a1,r0,.0003				# NULL terminator encountered?
02:00000000000009F4 8420080000      	   310: 	add	a0,a0,1
                                    	   311: 	# inline serial putchar, avoid stacks pushes and pops
                                    	   312: .0001:
02:00000000000009F9 FFFFFFFFFF      	   313: 	nop										# provide a window for an interrupt to occur
02:00000000000009FE FFFFFFFFFF      	   314: 	nop
                                    	   315: 	# Between the status read and the transmit do not allow an
                                    	   316: 	# intervening interrupt.
02:0000000000000A03 FAFF000000      	   317: 	atom 0777
02:0000000000000A08 45188000007C0400	   318: 	ldtu.io mc0,ACIA_STAT	# wait until the uart indicates tx empty
02:0000000000000A10 D0FE
02:0000000000000A12 2E1826F2FF      	   319: 	bbc	mc0,4,.0001				# branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000A17 52010000007C0000	   320: 	stt.io a1,ACIA_TX			# send the byte
02:0000000000000A1F D0FE
02:0000000000000A21 2092FFFFFF      	   321: 	bra	.0002
                                    	   322: .0003:
02:0000000000000A26 8F20060000      	   323: 	mov a0,mc1
02:0000000000000A2B 0F41060000      	   324: 	mov a1,mc2
02:0000000000000A30 A304000000      	   325: 	ret
                                    	   326: 
                                    	   327: #------------------------------------------------------------------------------
                                    	   328: # Put a buffer to the serial port.
                                    	   329: #
                                    	   330: # Stack Space:
                                    	   331: #		none
                                    	   332: # Parameters:
                                    	   333: #		a0 = pointer to buffer
                                    	   334: #		a1 = number of bytes
                                    	   335: # Modifies:
                                    	   336: #		mc0,mc1,mc2,mc3
                                    	   337: # Returns:
                                    	   338: #		none
                                    	   339: #------------------------------------------------------------------------------
                                    	   340: 
                                    	   341: SerialPutBuf:
02:0000000000000A35 8F38000000      	   342: 	mov mc1,a0
02:0000000000000A3A 0F59000000      	   343: 	mov mc2,a1
                                    	   344: .0002:
02:0000000000000A3F 2A48002000      	   345: 	ble a1,r0,.0003				# end of buffer reached?
02:0000000000000A44 0441F8FF07      	   346: 	sub a1,a1,1
02:0000000000000A49 C039000000      	   347: 	ldb.io mc3,[a0]
02:0000000000000A4E 8420080000      	   348: 	add	a0,a0,1
                                    	   349: 	# inline serial putchar, avoid stacks pushes and pops
                                    	   350: .0001:
02:0000000000000A53 FFFFFFFFFF      	   351: 	nop										# provide a window for an interrupt to occur
02:0000000000000A58 FFFFFFFFFF      	   352: 	nop
                                    	   353: 	# Between the status read and the transmit do not allow an
                                    	   354: 	# intervening interrupt.
02:0000000000000A5D FAFF000000      	   355: 	atom 0777
02:0000000000000A62 45188000007C0400	   356: 	ldtu.io mc0,ACIA_STAT	# wait until the uart indicates tx empty
02:0000000000000A6A D0FE
02:0000000000000A6C 2E1826F2FF      	   357: 	bbc	mc0,4,.0001				# branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000A71 D2190000007C0000	   358: 	stt.io mc3,ACIA_TX		# send the byte
02:0000000000000A79 D0FE
02:0000000000000A7B 2088FFFFFF      	   359: 	bra	.0002
                                    	   360: .0003:
02:0000000000000A80 8F20060000      	   361: 	mov a0,mc1
02:0000000000000A85 0F41060000      	   362: 	mov a1,mc2
02:0000000000000A8A A304000000      	   363: 	ret
                                    	   364: 
                                    	   365: #------------------------------------------------------------------------------
                                    	   366: #------------------------------------------------------------------------------
                                    	   367: 
                                    	   368: SerialTest:
                                    	   369: .0001:
02:0000000000000A8F 0401080200      	   370: 	ldi a1,'A'
02:0000000000000A94 A0E0FCFFFF      	   371: 	bsr SerialPutChar
02:0000000000000A99 20ECFFFFFF      	   372: 	bra .0001
                                    	   373: 
                                    	   374: 	.rodata
                                    	   375: nmeSerial:
03:0000000000000000 53657269616C    	   376: 	.byte "Serial",0
03:0000000000000006 00
                                    	   377: 
                                    	   378: .global SerialInit
                                    	   379: .global SerialPutString
                                    	   380: .global SerialPutBuf
                                    	   381: .global SerialTest
                                    	   382: 

Source: "boot.asm"
                                    	   508: 	.include "xmodem.asm"

Source: "xmodem.asm"
                                    	     1: # ============================================================================
                                    	     2: #        __
                                    	     3: #   \\__/ o\    (C) 2022-2023  Robert Finch, Waterloo
                                    	     4: #    \  __ /    All rights reserved.
                                    	     5: #     \/_//     robfinch<remove>@opencores.org
                                    	     6: #       ||
                                    	     7: #  
                                    	     8: #
                                    	     9: # BSD 3-Clause License
                                    	    10: # Redistribution and use in source and binary forms, with or without
                                    	    11: # modification, are permitted provided that the following conditions are met:
                                    	    12: #
                                    	    13: # 1. Redistributions of source code must retain the above copyright notice, this
                                    	    14: #    list of conditions and the following disclaimer.
                                    	    15: #
                                    	    16: # 2. Redistributions in binary form must reproduce the above copyright notice,
                                    	    17: #    this list of conditions and the following disclaimer in the documentation
                                    	    18: #    and/or other materials provided with the distribution.
                                    	    19: #
                                    	    20: # 3. Neither the name of the copyright holder nor the names of its
                                    	    21: #    contributors may be used to endorse or promote products derived from
                                    	    22: #    this software without specific prior written permission.
                                    	    23: #
                                    	    24: # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                                    	    25: # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                                    	    26: # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                    	    27: # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                                    	    28: # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                                    	    29: # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                                    	    30: # SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                                    	    31: # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                                    	    32: # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                                    	    33: # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                    	    34: #                                                                          
                                    	    35: # ============================================================================
                                    	    36: 
                                    	    37: 	.extern Delay3s
                                    	    38: 	.extern GetRange
                                    	    39: 	.extern SerialPutBuf
                                    	    40: #
                                    	    41: # Xmodem variables
                                    	    42: #
                                    	    43: .set SOH,1
                                    	    44: .set EOT,4
                                    	    45: .set ACK,6
                                    	    46: .set LF,10
                                    	    47: .set CR,13
                                    	    48: .set NAK,21
                                    	    49: .set ETB,23			# end of transfer block
                                    	    50: .set CAN,24
                                    	    51: .set xm_timer,0xFFFC0020
                                    	    52: .set xm_protocol,0xFFFC0028
                                    	    53: .set xm_flag,0xFFFC0029
                                    	    54: .set xm_checksum,0xFFFC0030
                                    	    55: .set xm_tmp2,0xFFFC0040
                                    	    56: .set xm_tmp,0xFFFC0048
                                    	    57: .set xm_packetnum,0xFFFC0050
                                    	    58: .set xm_crc,0xFFFC0058
                                    	    59: .set xm_ibuf,0xFFFC0080
                                    	    60: .set xm_obuf,0xFFFC0100
                                    	    61: 
                                    	    62: 	.text
                                    	    63: # ------------------------------------------------------------------------------
                                    	    64: # Send data using XModem.
                                    	    65: #
                                    	    66: # Parameters:
                                    	    67: #		a0 = buffer address
                                    	    68: #		a1 = last address
                                    	    69: # Register usage
                                    	    70: #		t2 = xm_flag
                                    	    71: #		t3 = xm_protocol
                                    	    72: #		t5 = xm_packetnum
                                    	    73: # ------------------------------------------------------------------------------
                                    	    74: 
                                    	    75: xm_SendStart:
02:0000000000000A9E B61C008000      	    76: 	push lr1
02:0000000000000AA3 0F34000000      	    77: 	mov a3,a0							# a3 = buffer address
02:0000000000000AA8 8F54000000      	    78: 	mov a4,a1							# a4 = last address
02:0000000000000AAD 8404080000      	    79: 	ldi	t5,1							# packet numbers start at one
                                    	    80: 	# Wait for receiver to send a NAK
                                    	    81: xm_send:							
02:0000000000000AB2 A024FAFFFF      	    82: 	bsr SerialGetChar			# select blocking input
02:0000000000000AB7 2620F80B007C1500	    83: 	beq a0,NAK,xm_send5		# should have got a NAK
02:0000000000000ABF 0000
02:0000000000000AC1 2728F8F9FF7C4300	    84: 	bne a0,'C',xm_send		# or a 'C'
02:0000000000000AC9 0000
                                    	    85: xm_send5:
02:0000000000000ACB 8F23000000      	    86: 	mov t3,a0
                                    	    87: xm_send4:
02:0000000000000AD0 0401080000      	    88: 	ldi a1,SOH
02:0000000000000AD5 A05EFCFFFF      	    89: 	bsr SerialPutChar			# send start
02:0000000000000ADA 0F21010000      	    90: 	mov a1,t5							# send packet number
02:0000000000000ADF A04AFCFFFF      	    91: 	bsr SerialPutChar
02:0000000000000AE4 0A41F8FF07      	    92: 	xor a1,a1,-1					# one's complement
02:0000000000000AE9 A036FCFFFF      	    93: 	bsr SerialPutChar
02:0000000000000AEE 8F00050000      	    94: 	mov a0,a3							# a0 = buffer address
02:0000000000000AF3 0401000400      	    95: 	ldi a1,128						# a1 = byte count
02:0000000000000AF8 A07AFEFFFF      	    96: 	bsr SerialPutBuf			# copy buffer to serial port
02:0000000000000AFD 27F0F80F007C4300	    97: 	bne t3,'C',xm_send2		# CRC protocol?
02:0000000000000B05 0000
02:0000000000000B07 A032050000      	    98: 	bsr	xm_calc_crc				# compute CRC
02:0000000000000B0C 5801400401      	    99: 	lsr a1,a0,8						# transfer high eight bits first
02:0000000000000B11 A0E6FBFFFF      	   100: 	bsr SerialPutChar
02:0000000000000B16 2014000000      	   101: 	bra	xm_send3
                                    	   102: xm_send2:
02:0000000000000B1B A07E040000      	   103: 	bsr	xm_calc_checksum
                                    	   104: xm_send3:
02:0000000000000B20 0F21000000      	   105: 	mov a1,a0							# transfer low eight bits
02:0000000000000B25 A0BEFBFFFF      	   106: 	bsr SerialPutChar			# send low byte
02:0000000000000B2A A034F9FFFF      	   107: 	bsr SerialGetChar			# block until input is present
02:0000000000000B2F 2728F8D1FF7C0600	   108: 	bne a0,ACK,xm_send4		# not an ACK then resend the record
02:0000000000000B37 0000
02:0000000000000B39 8424090000      	   109: 	add t5,t5,1						# increment packet number
02:0000000000000B3E 0414050400      	   110: 	add a3,a3,128					# advance buffer pointer
02:0000000000000B43 28094DC7FF      	   111: 	bltu a3,a4,xm_send4		# go send next record
02:0000000000000B48 0401200000      	   112: 	ldi a1,EOT
02:0000000000000B4D A06EFBFFFF      	   113: 	bsr SerialPutChar			# send end of transmission
02:0000000000000B52 A064FBFFFF      	   114: 	bsr SerialPutChar			# send end of transmission
02:0000000000000B57 A05AFBFFFF      	   115: 	bsr SerialPutChar			# send end of transmission
02:0000000000000B5C B71C008000      	   116: 	pop lr1
02:0000000000000B61 A304000000      	   117: 	ret
                                    	   118: 
                                    	   119: # ------------------------------------------------------------------------------
                                    	   120: # Get a byte, checking for a receive timeout.
                                    	   121: #
                                    	   122: # Returns:
                                    	   123: #		a0 = byte (0 to 255) or -1 if timed out
                                    	   124: # ------------------------------------------------------------------------------
                                    	   125: 
                                    	   126: xm_getbyte:
02:0000000000000B66 3601008000      	   127: 	push a1
                                    	   128: xm_gb1:
02:0000000000000B6B 46010004007C2000	   129: 	ldo a1,xm_timer
02:0000000000000B73 FCFF
02:0000000000000B75 2F48580C00      	   130: 	bbs a1,11,xm_gb2					# check the timeout - 2048 ticks (3 seconds approx.)
02:0000000000000B7A A0BAFAFFFF      	   131: 	bsr SerialPeekCharDirect	# non-blocking, try and get a character
02:0000000000000B7F 282000F6FF      	   132: 	blt a0,r0,xm_gb1					# if no character, try again
                                    	   133: #	bsr	xm_outbyteAsHex
02:0000000000000B84 3701008000      	   134: 	pop a1
02:0000000000000B89 A304000000      	   135: 	ret
                                    	   136: xm_gb2:
02:0000000000000B8E 8400F8FF07      	   137: 	ldi	a0,-1
02:0000000000000B93 3701008000      	   138: 	pop a1
02:0000000000000B98 A304000000      	   139: 	ret
                                    	   140: 
                                    	   141: # ------------------------------------------------------------------------------
                                    	   142: # XModem Receive
                                    	   143: #
                                    	   144: # Register usage
                                    	   145: #		t2 = xm_flag
                                    	   146: #		t3 = xm_protocol
                                    	   147: #		t4 = xm_packetnum (last seen)
                                    	   148: #		t5 = xm_packetnum
                                    	   149: # Parameters:
                                    	   150: #		none
                                    	   151: # Modifies:
                                    	   152: #		All
                                    	   153: #	Returns:
                                    	   154: #		none
                                    	   155: # ------------------------------------------------------------------------------
                                    	   156: 
                                    	   157: xm_ReceiveStart:
02:0000000000000B9D 041E0000007C0000	   158: 	ldi gp,0xffff0000
02:0000000000000BA5 FFFF7C00000000
02:0000000000000BAC A078EBFFFF      	   159: 	bsr	Delay3s				# give a little bit of time for sender
02:0000000000000BB1 A06EEBFFFF      	   160: 	bsr	Delay3s
02:0000000000000BB6 A064EBFFFF      	   161: 	bsr	Delay3s
02:0000000000000BBB A09AF6FFFF      	   162: 	bsr	GetNumber			# Get the transfer address
02:0000000000000BC0 263000BA03      	   163: 	beq a0,r0,Monitor	# Make sure we got a value
02:0000000000000BC5 0F34000000      	   164: 	mov a3,a0					# a3 = transfer address
                                    	   165: #	ldx	mon_numwka+2	; X = transfer address
02:0000000000000BCA 0404000000      	   166: 	ldi t4,0					# packet num = 0
02:0000000000000BCF 8404000000      	   167: 	ldi t5,0
02:0000000000000BD4 8400180200      	   168: 	ldi	a0,'C'				# try for CRC first
02:0000000000000BD9 8F23000000      	   169: 	mov t3,a0
                                    	   170: xm_receive:
02:0000000000000BDE 0401100000      	   171: 	ldi	a1,2					# number of times to retry -1
                                    	   172: xm_rcv5:
02:0000000000000BE3 8FE0000000      	   173: 	mov	a0,t3					# indicate we want a transfer (send protocol byte)
02:0000000000000BE8 A038FAFFFF      	   174: 	bsr SerialPutChar
                                    	   175: xm_rcv4:
02:0000000000000BED 53000004007C2000	   176: 	sto r0,xm_timer		# clear the timeout
02:0000000000000BF5 FCFF
                                    	   177: xm_rcv1:
02:0000000000000BF7 A0DEFEFFFF      	   178: 	bsr	xm_getbyte
02:0000000000000BFC 2838009200      	   179: 	blt a0,r0,xm_retry1	# timeout on protocol id?
02:0000000000000C01 2638F81B007C0100	   180: 	beq a0,SOH,xm_SOH	# it should be start of a transfer
02:0000000000000C09 0000
02:0000000000000C0B 2628F885007C0400	   181: 	beq a0,EOT,xm_EOT	# or end of transfer (EOT)
02:0000000000000C13 0000
02:0000000000000C15 2628F8E5FF7C1800	   182: 	beq a0,CAN,xm_receive	# might be a cancel
02:0000000000000C1D 0000
02:0000000000000C1F 2628F87B007C1700	   183: 	beq a0,ETB,xm_EOT
02:0000000000000C27 0000
                                    	   184: xm_rcv_nak:					# wasn't a valid start so
02:0000000000000C29 8400A80000      	   185: 	ldi a0,NAK				# send a NAK
02:0000000000000C2E A0ACF9FFFF      	   186: 	bsr SerialPutChar	# and try again
02:0000000000000C33 2074FFFFFF      	   187: 	bra	xm_rcv4
                                    	   188: xm_SOH:
02:0000000000000C38 A05CFEFFFF      	   189: 	bsr	xm_getbyte		# get packet number
02:0000000000000C3D 2820006400      	   190: 	blt a0,r0,xm_rcv_to1
02:0000000000000C42 8F24000000      	   191: 	mov t5,a0					# t5 = packet num
02:0000000000000C47 8F21000000      	   192: 	mov a2,a0					# save it
02:0000000000000C4C A034FEFFFF      	   193: 	bsr	xm_getbyte		# get complement of packet number
02:0000000000000C51 2820005A00      	   194: 	blt a0,r0,xm_rcv_to2
02:0000000000000C56 8220182000      	   195: 	add a0,a0,a2			# add the two values
02:0000000000000C5B 8820F80700      	   196: 	and a0,a0,0xff		# the sum should be $FF
02:0000000000000C60 842008F807      	   197: 	sub a0,a0,0xff
02:0000000000000C65 0F23000000      	   198: 	mov	t2,a0					# xm_flag, should be storing a zero if there is no error
02:0000000000000C6A 8401000000      	   199: 	ldi a2,0					# a2 = payload byte counter
                                    	   200: xm_rcv2:
02:0000000000000C6F A0EEFDFFFF      	   201: 	bsr	xm_getbyte
02:0000000000000C74 2828004800      	   202: 	blt a0,r0,xm_rcv_to1
02:0000000000000C79 D7001E0000      	   203: 	stb a0,[a3+a2]		# store the byte to memory
02:0000000000000C7E 8461080000      	   204: 	add a2,a2,1
02:0000000000000C83 2E6038F6FF      	   205: 	bbc a2,7,xm_rcv2	# 128 bytes per payload
02:0000000000000C88 A0BCFDFFFF      	   206: 	bsr	xm_getbyte		# get checksum or CRC byte
02:0000000000000C8D 2820003C00      	   207: 	blt a0,r0,xm_rcv_to1
02:0000000000000C92 8F22000000      	   208: 	mov	t1,a0					# stuff checksum/CRC byte
02:0000000000000C97 27F8F81B007C4300	   209: 	bne t3,'C',xm_rcv_chksum	# check protocol
02:0000000000000C9F 0000
02:0000000000000CA1 A08AFDFFFF      	   210: 	bsr	xm_getbyte		# get low order CRC byte
02:0000000000000CA6 2838002E00      	   211: 	blt a0,r0,xm_rcv_to1
02:0000000000000CAB 08A1F80700      	   212: 	and a1,t1,0xff		# get the high byte
02:0000000000000CB0 5801400001      	   213: 	asl a1,a1,8
02:0000000000000CB5 0228100800      	   214: 	or s0,a0,a1				# combine high and low byte
02:0000000000000CBA 0401000400      	   215: 	ldi a1,128				# number of bytes in buffer
02:0000000000000CBF A0C2010000      	   216: 	bsr	xm_calc_crc		# compute the CRC-16 for the received data
02:0000000000000CC4 0F01020000      	   217: 	mov a1,s0					# and compare to received value
02:0000000000000CC9 201E000000      	   218: 	bra	xm_rcv3
                                    	   219: xm_rcv_chksum:
02:0000000000000CCE A018010000      	   220: 	bsr	xm_calc_checksum
02:0000000000000CD3 08A1F80700      	   221: 	and a1,t1,0xff		# where we stuffed the byte
                                    	   222: xm_rcv3:
02:0000000000000CD8 272810A8FF      	   223: 	bne a0,a1,xm_rcv_nak	# if not the same, NAK
02:0000000000000CDD 8FC0000000      	   224: 	mov a0,t2					# get back flag value
02:0000000000000CE2 273800A2FF      	   225: 	bne	a0,r0,xm_rcv_nak	# bad packet number?
02:0000000000000CE7 8400300000      	   226: 	ldi a0,ACK				# packet recieved okay, send back an ACK
02:0000000000000CEC A030F8FFFF      	   227: 	bsr SerialPutChar
02:0000000000000CF1 2600497EFF      	   228: 	beq	t4,t5,xm_rcv4		# same packet received, dont update buffer pointer
02:0000000000000CF6 0F24010000      	   229: 	mov t4,t5						# update last seen packet number
02:0000000000000CFB 0414050400      	   230: 	add a3,a3,128				# increment buffer pointer
02:0000000000000D00 20DAFDFFFF      	   231: 	bra	xm_rcv4					# and go back for next packet
                                    	   232: xm_rcv_to2:
                                    	   233: xm_rcv_to1:
02:0000000000000D05 CA80E70000      	   234: 	lda a0,msgXmTimeout[gp]
02:0000000000000D0A A0F4F1FFFF      	   235: 	bsr DisplayString
02:0000000000000D0F 204E0C0000      	   236: 	bra	Monitor
                                    	   237: xm_EOT:								# end of transmission received, return
02:0000000000000D14 8400300000      	   238: 	ldi a0,ACK
02:0000000000000D19 A0D6F7FFFF      	   239: 	bsr SerialPutChar		# ACK the EOT
02:0000000000000D1E 20300C0000      	   240: 	bra	Monitor
                                    	   241: xm_retry1:
02:0000000000000D23 0441F8FF07      	   242: 	sub a1,a1,1
02:0000000000000D28 2B58005CFF      	   243: 	bgt a1,r0,xm_rcv5
02:0000000000000D2D 8FE0000000      	   244: 	mov a0,t3						# are we already lowered down to checksum protocol?
02:0000000000000D32 2628F80D007C1500	   245: 	beq a0,NAK,xm_noTransmitter		# did we try both checksum and CRC?
02:0000000000000D3A 0000
02:0000000000000D3C 8400A80000      	   246: 	ldi a0,NAK
02:0000000000000D41 8F23000000      	   247: 	mov t3,a0						# set protocol
02:0000000000000D46 2030FDFFFF      	   248: 	bra xm_receive
                                    	   249: xm_noTransmitter:
02:0000000000000D4B CA80670300      	   250: 	lda a0,msgXmNoTransmitter[gp]
02:0000000000000D50 A068F1FFFF      	   251: 	bsr DisplayString
02:0000000000000D55 20C20B0000      	   252: 	bra	Monitor	
                                    	   253: 
                                    	   254: 	.rodata
                                    	   255: msgXmTimeout:
03:0000000000000007 586D6F64656D3A20	   256: 	.byte "Xmodem: timed out",CR,LF,0
03:000000000000000F 74696D6564206F75
03:0000000000000017 74
03:0000000000000018 0D
03:0000000000000019 0A
03:000000000000001A 00
                                    	   257: msgXmNoTransmitter:
03:000000000000001B 584D6F64656D3A20	   258: 	.byte "XModem: transmitter not responding",CR,LF,0
03:0000000000000023 7472616E736D6974
03:000000000000002B 746572206E6F7420
03:0000000000000033 726573706F6E6469
03:000000000000003B 6E67
03:000000000000003D 0D
03:000000000000003E 0A
03:000000000000003F 00
                                    	   259: 
                                    	   260: 	.text
                                    	   261: # ------------------------------------------------------------------------------
                                    	   262: # Calculate checksum value. The checksum is simply the low order eight bits of
                                    	   263: # the sum of all the bytes in the payload area.
                                    	   264: #
                                    	   265: # Stack space:
                                    	   266: #		two words
                                    	   267: #	Modifies:
                                    	   268: #		xm_checksum		contains the checksum value for the record
                                    	   269: # Parameters:
                                    	   270: #		a0 = buffer address
                                    	   271: #	Returns:
                                    	   272: #		a0 = checksum
                                    	   273: # ------------------------------------------------------------------------------
                                    	   274: 
                                    	   275: xm_calc_checksum:
02:0000000000000D5A 3661408101      	   276: 	push a1,a2,a3
02:0000000000000D5F 0401000000      	   277: 	ldi a1,0
02:0000000000000D64 0414000000      	   278: 	ldi a3,0
                                    	   279: xm_cs1:
02:0000000000000D69 CF21800100      	   280: 	ldb a2,[a0+a3]
02:0000000000000D6E 04140D0000      	   281: 	add a3,a3,1
02:0000000000000D73 0241182000      	   282: 	add a1,a1,a2
02:0000000000000D78 2808FDF9FF7C8000	   283: 	blt a3,128,xm_cs1
02:0000000000000D80 0000
02:0000000000000D82 0841F80700      	   284: 	and a1,a1,0xff
02:0000000000000D87 50010006007C3000	   285: 	stb	a1,xm_checksum
02:0000000000000D8F FCFF
02:0000000000000D91 8F40000000      	   286: 	mov a0,a1
02:0000000000000D96 3761408101      	   287: 	pop a1,a2,a3
02:0000000000000D9B A304000000      	   288: 	ret
                                    	   289: 
                                    	   290: # ------------------------------------------------------------------------------
                                    	   291: # Compute CRC-16 of buffer.
                                    	   292: #
                                    	   293: #int calcrc(char *ptr, int count)
                                    	   294: #{
                                    	   295: #    int  crc;
                                    	   296: #    char i;
                                    	   297: #    crc = 0;
                                    	   298: #    while (--count >= 0)
                                    	   299: #    {
                                    	   300: #        crc = crc ^ (int) (*ptr++ << 8);
                                    	   301: #        i = 8;
                                    	   302: #        do
                                    	   303: #        {
                                    	   304: #            if (crc & 0x8000)
                                    	   305: #                crc = crc << 1 ^ 0x1021;
                                    	   306: #            else
                                    	   307: #                crc = crc << 1;
                                    	   308: #        } while(--i);
                                    	   309: #    }
                                    	   310: #    return (crc);
                                    	   311: #}
                                    	   312: #
                                    	   313: # Modifies:
                                    	   314: #		xm_crc variable
                                    	   315: # Parameters:
                                    	   316: #		a0 = buffer address
                                    	   317: #		a1 = buffer length
                                    	   318: # Returns:
                                    	   319: #		a0 = crc
                                    	   320: # ------------------------------------------------------------------------------
                                    	   321: 
                                    	   322: xm_calc_crc:
02:0000000000000DA0 B6014D5502      	   323: 	push a2,a3,a4,a5
02:0000000000000DA5 8401000000      	   324: 	ldi a2,0					# crc = 0
02:0000000000000DAA 0415000000      	   325: 	ldi	a5,0					# a5 = byte count
                                    	   326: xm_crc1:
02:0000000000000DAF 4F34900100      	   327: 	ldbu a3,[a0+a5]		# get byte
02:0000000000000DB4 5814400001      	   328: 	asl a3,a3,8
02:0000000000000DB9 8261401100      	   329: 	xor a2,a2,a3			# crc = crc ^ tmp
02:0000000000000DBE 8414000000      	   330: 	ldi a4,0					# iter count
                                    	   331: xm_crc4:
02:0000000000000DC3 D801080001      	   332: 	asl a2,a2,1
02:0000000000000DC8 2E70800400      	   333: 	bbc	a2,16,xm_crc3	# check for $10000, no?
02:0000000000000DCD 8A61088100      	   334: 	xor a2,a2,0x1021	# and xor
                                    	   335: xm_crc3:
02:0000000000000DD2 84340D0000      	   336: 	add a4,a4,1
02:0000000000000DD7 2820FDF7FF7C0800	   337: 	blt a4,8,xm_crc4	# repeat eight times
02:0000000000000DDF 0000
02:0000000000000DE1 04550D0000      	   338: 	add a5,a5,1				# increment byte count
02:0000000000000DE6 284815E4FF      	   339: 	blt a5,a1,xm_crc1
02:0000000000000DEB 8860F8FF077CFFFF	   340: 	and a0,a2,0xffff	# we want only a 16-bit CRC
02:0000000000000DF3 0000
02:0000000000000DF5 D100000B007C5800	   341: 	stw a0,xm_crc
02:0000000000000DFD FCFF
02:0000000000000DFF B7014D5502      	   342: 	pop a2,a3,a4,a5
02:0000000000000E04 A304000000      	   343: 	ret
                                    	   344: 
                                    	   345: #xm_outbyteAsHex:
                                    	   346: #	pshs	d
                                    	   347: #	ldd		CharOutVec						; get current char out vector
                                    	   348: #	pshs	d											; save it
                                    	   349: #	ldd		#ScreenDisplayChar		; set output vector to screen display
                                    	   350: #	std		CharOUtVec
                                    	   351: #	ldd		2,s										; get passed data
                                    	   352: #	lbsr	DispByteAsHex					; and display on-screen
                                    	   353: #	ldb		#' '
                                    	   354: #	lbsr	ScreenDisplayChar
                                    	   355: #	puls	d											; get back old char out vector
                                    	   356: #	std		CharOutVec						; and restore it
                                    	   357: #	puls	d											; restore input arguments
                                    	   358: #	rts
                                    	   359: 
                                    	   360: 	

Source: "boot.asm"
                                    	   509: 	.include "keyboard.asm"

Source: "keyboard.asm"
                                    	     1: #==============================================================================
                                    	     2: # Keyboard stuff
                                    	     3: #
                                    	     4: # KeyState2_
                                    	     5: # 876543210
                                    	     6: # ||||||||+ = shift
                                    	     7: # |||||||+- = alt
                                    	     8: # ||||||+-- = control
                                    	     9: # |||||+--- = numlock
                                    	    10: # ||||+---- = capslock
                                    	    11: # |||+----- = scrolllock
                                    	    12: # ||+------ =
                                    	    13: # |+------- = 
                                    	    14: # +-------- = extended
                                    	    15: #
                                    	    16: #==============================================================================
                                    	    17: 
                                    	    18: 	.set KEYBD,0xFEDC0000
                                    	    19: 	.set _KeyState1,0xFFFC0420
                                    	    20: 	.set _KeyState2,0xFFFC0421
                                    	    21: 	.set _KeybdEcho,0xFFFC0422
                                    	    22: 	.set KeybdWaitFlag,0xFFFC0423
                                    	    23: 	.set KeybdLEDs,0xFFFC0424
                                    	    24: 	.set SC_F12,7
                                    	    25: 	.set SC_C,0x21
                                    	    26: 	.set SC_T,0x2c
                                    	    27: 	.set SC_Z,0x1a
                                    	    28: 	.set SC_KEYUP,0xf0
                                    	    29: 	.set SC_EXTEND,0xE0
                                    	    30: 	.set SC_CTRL,0x14
                                    	    31: 	.set SC_RSHIFT,0x59
                                    	    32: 	.set SC_NUMLOCK,0x77
                                    	    33: 	.set SC_SCROLLLOCK,0x7E
                                    	    34: 	.set SC_CAPSLOCK,0x58
                                    	    35: 	.set SC_ALT,0x11
                                    	    36: 	.set SC_LSHIFT,0x12
                                    	    37: 	.set SC_DEL,0x71				# extend
                                    	    38: 	.set SC_LCTRL,0x58
                                    	    39: 	.set SC_TAB,0x0D
                                    	    40: 
                                    	    41: 	.text
                                    	    42: _KeybdInit:
02:0000000000000E09 50000084007C2004	    43: 	stb r0,_KeyState1
02:0000000000000E11 FCFF
02:0000000000000E13 50002084007C2104	    44: 	stb r0,_KeyState2
02:0000000000000E1B FCFF
02:0000000000000E1D A304000000      	    45: 	ret
                                    	    46: 
                                    	    47: _KeybdGetStatus:
02:0000000000000E22 44018000007C0400	    48: 	ldt.io a1,KEYBD+4
02:0000000000000E2A DCFE
02:0000000000000E2C A304000000      	    49: 	ret
                                    	    50: 
                                    	    51: # Get the scancode from the keyboard port
                                    	    52: 
                                    	    53: _KeybdGetScancode:
02:0000000000000E31 0401000000      	    54: 	ldi a1,0
02:0000000000000E36 44010000007C0000	    55: 	ldt.io a1,KEYBD				# get the scan code
02:0000000000000E3E DCFE
02:0000000000000E40 52008000007C0400	    56: 	stt.io r0,KEYBD+4			# clear receive register
02:0000000000000E48 DCFE
02:0000000000000E4A A304000000      	    57: 	ret
                                    	    58: 
                                    	    59: # Recieve a byte from the keyboard, used after a command is sent to the
                                    	    60: # keyboard in order to wait for a response.
                                    	    61: 
                                    	    62: KeybdRecvByte:
02:0000000000000E4F 3614008000      	    63: 	push a3
02:0000000000000E54 0414200300      	    64: 	ldi a3,100					# wait up to 1s
                                    	    65: .0003:
02:0000000000000E59 A092FFFFFF      	    66: 	bsr	_KeybdGetStatus	# wait for response from keyboard
02:0000000000000E5E 2858001000      	    67: 	blt a1,r0,.0004			# is input buffer full ? yes, branch
02:0000000000000E63 A06A090000      	    68: 	bsr	Wait10ms				# wait a bit
02:0000000000000E68 0414FDFF07      	    69: 	sub a3,a3,1
02:0000000000000E6D 2B000DF6FF      	    70: 	bgt a3,a0,.0003			# go back and try again
02:0000000000000E72 3714008000      	    71: 	pop a3
02:0000000000000E77 0401F8FF07      	    72: 	ldi a1,-1
02:0000000000000E7C A304000000      	    73: 	ret
                                    	    74: .0004:
02:0000000000000E81 A060FFFFFF      	    75: 	bsr	_KeybdGetScancode
02:0000000000000E86 3714008000      	    76: 	pop a3
02:0000000000000E8B A304000000      	    77: 	ret
                                    	    78: 
                                    	    79: # Wait until the keyboard transmit is complete
                                    	    80: 
                                    	    81: KeybdWaitTx:
02:0000000000000E90 3614008000      	    82: 	push a3
02:0000000000000E95 0414200300      	    83: 	ldi a3,100		# wait a max of 1s
                                    	    84: .0001:
02:0000000000000E9A A010FFFFFF      	    85: 	bsr	_KeybdGetStatus
02:0000000000000E9F 2F58301000      	    86: 	bbs a1,6,.0002	# check for transmit complete bit
02:0000000000000EA4 A0E8080000      	    87: 	bsr	Wait10ms		# delay a little bit
02:0000000000000EA9 0414FDFF07      	    88: 	sub a3,a3,1
02:0000000000000EAE 2B0005F6FF      	    89: 	bgt a3,r0,.0001	# go back and try again
02:0000000000000EB3 3714008000      	    90: 	pop a3
02:0000000000000EB8 0401F8FF07      	    91: 	ldi a1,-1
02:0000000000000EBD A304000000      	    92: 	ret
                                    	    93: .0002:
02:0000000000000EC2 3714008000      	    94: 	pop a3
02:0000000000000EC7 0401000000      	    95: 	ldi a1,0
02:0000000000000ECC A304000000      	    96: 	ret
                                    	    97: 
                                    	    98: 
                                    	    99: #------------------------------------------------------------------------------
                                    	   100: # Get key pending status into a1
                                    	   101: #------------------------------------------------------------------------------
                                    	   102: 
                                    	   103: CheckForKey:
02:0000000000000ED1 44018000007C0400	   104: 	ldt.io a1,KEYBD+4
02:0000000000000ED9 DCFE
02:0000000000000EDB 5801380401      	   105: 	lsr a1,a1,7
02:0000000000000EE0 0841080000      	   106: 	and a1,a1,1
02:0000000000000EE5 A304000000      	   107: 	ret
                                    	   108: 
                                    	   109: #------------------------------------------------------------------------------
                                    	   110: #------------------------------------------------------------------------------
                                    	   111: 
                                    	   112: GetKey:
02:0000000000000EEA B660000001      	   113: 	push a0,a2
02:0000000000000EEF A082000000      	   114: 	bsr	KeybdGetCharWait
02:0000000000000EF4 C0014084007C2204	   115: 	ldb a2,_KeybdEcho			# is keyboard echo on ?
02:0000000000000EFC FCFF
02:0000000000000EFE 2668000C00      	   116: 	beq a2,r0,.0001
02:0000000000000F03 2758F807007C0D00	   117: 	bne a1,'\r',.0002
02:0000000000000F0B 0000
02:0000000000000F0D A03EEEFFFF      	   118: 	bsr CRLF							# convert CR keystroke into CRLF
                                    	   119: .0002:
02:0000000000000F12 A00AE6FFFF      	   120: 	bsr DisplayChar
                                    	   121: .0001:
02:0000000000000F17 B760000001      	   122: 	pop a0,a2
02:0000000000000F1C A304000000      	   123: 	ret
                                    	   124: 
                                    	   125: 
                                    	   126: #------------------------------------------------------------------------------
                                    	   127: #------------------------------------------------------------------------------
                                    	   128: 
                                    	   129: KeybdGetCharNoWait:
02:0000000000000F21 50006084007C2304	   130: 	stb r0,KeybdWaitFlag
02:0000000000000F29 FCFF
02:0000000000000F2B 2028000000      	   131: 	bra	KeybdGetChar
                                    	   132: 
                                    	   133: KeybdGetCharWait:
02:0000000000000F30 0401F8FF07      	   134: 	ldi a1,-1
02:0000000000000F35 50016084007C2304	   135: 	stb a1,KeybdWaitFlag
02:0000000000000F3D FCFF
                                    	   136: 
                                    	   137: KeybdGetChar:
02:0000000000000F3F B600008000      	   138: 	push a0
                                    	   139: B0003:
02:0000000000000F44 A0BCFDFFFF      	   140: 	bsr	_KeybdGetStatus			# check keyboard status for key available
02:0000000000000F49 2850000E00      	   141: 	blt a1,r0,.0006					# yes, go process
02:0000000000000F4E 40016084007C2304	   142: 	ldb a1,KeybdWaitFlag		# are we willing to wait for a key ?
02:0000000000000F56 FCFF
02:0000000000000F58 284000F6FF      	   143: 	blt a1,r0,B0003					# yes, branch back
02:0000000000000F5D 0401F8FF07      	   144: 	ldi a1,-1								# flag no char available
02:0000000000000F62 A304000000      	   145: 	ret
                                    	   146: .0006:
02:0000000000000F67 A094FDFFFF      	   147: 	bsr	_KeybdGetScancode
                                    	   148: .0001:
02:0000000000000F6C 8400080000      	   149: 	ldi a0,1
02:0000000000000F71 D20000E0077C00FF	   150: 	stt.io a0,leds
02:0000000000000F79 DFFE
02:0000000000000F7B 2658F893007CF000	   151: 	beq a1,SC_KEYUP,doKeyup
02:0000000000000F83 0000
02:0000000000000F85 2648F899007CE000	   152: 	beq a1,SC_EXTEND,doExtend
02:0000000000000F8D 0000
02:0000000000000F8F 2648F8A3007C1400	   153: 	beq a1,SC_CTRL,doCtrl
02:0000000000000F97 0000
02:0000000000000F99 2648F807017C1200	   154: 	beq a1,SC_LSHIFT,doShift
02:0000000000000FA1 0000
02:0000000000000FA3 2658F801017C5900	   155: 	beq a1,SC_RSHIFT,doShift
02:0000000000000FAB 0000
02:0000000000000FAD 2650F827017C7700	   156: 	beq a1,SC_NUMLOCK,doNumLock
02:0000000000000FB5 0000
02:0000000000000FB7 2658F833017C5800	   157: 	beq a1,SC_CAPSLOCK,doCapsLock
02:0000000000000FBF 0000
02:0000000000000FC1 2640F841017C7E00	   158: 	beq a1,SC_SCROLLLOCK,doScrollLock
02:0000000000000FC9 0000
02:0000000000000FCB 2650F8AF007C1100	   159: 	beq a1,SC_ALT,doAlt
02:0000000000000FD3 0000
02:0000000000000FD5 C0000084007C2004	   160: 	ldb a0,_KeyState1			# check key up/down
02:0000000000000FDD FCFF
02:0000000000000FDF 50000084007C2004	   161: 	stb r0,_KeyState1			# clear keyup status
02:0000000000000FE7 FCFF
02:0000000000000FE9 273800ACFF      	   162: 	bne a0,r0,B0003				# ignore key up
02:0000000000000FEE 2640F8C9007C0D00	   163: 	beq a1,SC_TAB,doTab
02:0000000000000FF6 0000
                                    	   164: B0013:
02:0000000000000FF8 C0002084007C2104	   165: 	ldb a0,_KeyState2
02:0000000000001000 FCFF
02:0000000000001002 2930001800      	   166: 	bge a0,r0,.0010				# is it extended code ?
02:0000000000001007 8820F80300      	   167: 	and a0,a0,0x7f				# clear extended bit
02:000000000000100C D0002084007C2104	   168: 	stb a0,_KeyState2
02:0000000000001014 FCFF
02:0000000000001016 50000084007C2004	   169: 	stb r0,_KeyState1			# clear keyup
02:000000000000101E FCFF
02:0000000000001020 CA000058007CC002	   170: 	lda a0,_keybdExtendedCodes
02:0000000000001028 0000
02:000000000000102A 4F21100000      	   171: 	ldb a1,[a0+a1]
02:000000000000102F 20B4000000      	   172: 	bra	.0008
                                    	   173: .0010:
02:0000000000001034 2E30100E00      	   174: 	bbc a0,2,.0009				# is it CTRL code ?
02:0000000000001039 0841F80300      	   175: 	and a1,a1,0x7f
02:000000000000103E CA000048007C4002	   176: 	lda	a0,_keybdControlCodes
02:0000000000001046 0000
02:0000000000001048 4F21100000      	   177: 	ldb a1,[a0+a1]
02:000000000000104D 2078000000      	   178: 	bra	.0008
                                    	   179: .0009:
02:0000000000001052 2E28000C00      	   180: 	bbc a0,0,.0007				# is it shift down ?
02:0000000000001057 CA000028007C4001	   181: 	lda	a0,_shiftedScanCodes
02:000000000000105F 0000
02:0000000000001061 4F21100000      	   182: 	ldb a1,[a0+a1]
02:0000000000001066 2046000000      	   183: 	bra	.0008
                                    	   184: .0007:
02:000000000000106B CA000008007C4000	   185: 	lda	a0,_unshiftedScanCodes
02:0000000000001073 0000
02:0000000000001075 4F21100000      	   186: 	ldb a1,[a0+a1]
02:000000000000107A 8400101000      	   187: 	ldi a0,0x0202
02:000000000000107F D20000E0077C00FF	   188: 	stt.io a0,leds
02:0000000000001087 DFFE
                                    	   189: .0008:
02:0000000000001089 8400181800      	   190: 	ldi a0,0x0303
02:000000000000108E D20000E0077C00FF	   191: 	stt.io a0,leds
02:0000000000001096 DFFE
02:0000000000001098 B700008000      	   192: 	pop a0
02:000000000000109D A304000000      	   193: 	ret
                                    	   194: doKeyup:
02:00000000000010A2 8400F8FF07      	   195: 	ldi a0,-1
02:00000000000010A7 D0000084007C2004	   196: 	stb a0,_KeyState1
02:00000000000010AF FCFF
02:00000000000010B1 2026FDFFFF      	   197: 	bra	B0003
                                    	   198: doExtend:
02:00000000000010B6 C0002084007C2104	   199: 	ldb a0,_KeyState2
02:00000000000010BE FCFF
02:00000000000010C0 8920000400      	   200: 	or a0,a0,0x80
02:00000000000010C5 D0002084007C2104	   201: 	stb a0,_KeyState2
02:00000000000010CD FCFF
02:00000000000010CF 20EAFCFFFF      	   202: 	bra	B0003
                                    	   203: doCtrl:
02:00000000000010D4 40010084007C2004	   204: 	ldb a1,_KeyState1
02:00000000000010DC FCFF
02:00000000000010DE 50000084007C2004	   205: 	stb r0,_KeyState1
02:00000000000010E6 FCFF
02:00000000000010E8 2958001000      	   206: 	bge a1,r0,.0004
02:00000000000010ED C0002084007C2104	   207: 	ldb a0,_KeyState2
02:00000000000010F5 FCFF
02:00000000000010F7 8820D80700      	   208: 	and a0,a0,0xfb
02:00000000000010FC D0002084007C2104	   209: 	stb a0,_KeyState2
02:0000000000001104 FCFF
02:0000000000001106 207CFCFFFF      	   210: 	bra	B0003
                                    	   211: .0004:
02:000000000000110B C0002084007C2104	   212: 	ldb a0,_KeyState2
02:0000000000001113 FCFF
02:0000000000001115 8920200000      	   213: 	or a0,a0,4
02:000000000000111A D0002084007C2104	   214: 	stb a0,_KeyState2
02:0000000000001122 FCFF
02:0000000000001124 2040FCFFFF      	   215: 	bra	B0003
                                    	   216: doAlt:
02:0000000000001129 40010084007C2004	   217: 	ldb a1,_KeyState1
02:0000000000001131 FCFF
02:0000000000001133 50000084007C2004	   218: 	stb r0,_KeyState1
02:000000000000113B FCFF
02:000000000000113D 2958001000      	   219: 	bge a1,r0,.0011
02:0000000000001142 C0002084007C2104	   220: 	ldb a0,_KeyState2
02:000000000000114A FCFF
02:000000000000114C 8820E80700      	   221: 	and a0,a0,0xfd
02:0000000000001151 D0002084007C2104	   222: 	stb a0,_KeyState2
02:0000000000001159 FCFF
02:000000000000115B 20D2FBFFFF      	   223: 	bra	B0003
                                    	   224: .0011:
02:0000000000001160 C0002084007C2104	   225: 	ldb a0,_KeyState2
02:0000000000001168 FCFF
02:000000000000116A 8920100000      	   226: 	or a0,a0,2
02:000000000000116F D0002084007C2104	   227: 	stb a0,_KeyState2
02:0000000000001177 FCFF
02:0000000000001179 2096FBFFFF      	   228: 	bra	B0003
                                    	   229: doTab:
02:000000000000117E 3601008000      	   230: 	push a1
02:0000000000001183 40012084007C2104	   231: 	ldb a1,_KeyState2
02:000000000000118B FCFF
02:000000000000118D 2E58000600      	   232: 	bbc a1,0,.0012				# is ALT down ?
                                    	   233: #    	inc     _iof_switch
02:0000000000001192 3701008000      	   234: 	pop a1
02:0000000000001197 205AFBFFFF      	   235:   bra B0003
                                    	   236: .0012:
02:000000000000119C 3701008000      	   237: 	pop a1
02:00000000000011A1 20AEFCFFFF      	   238:   bra B0013
                                    	   239: doShift:
02:00000000000011A6 40010084007C2004	   240: 	ldb a1,_KeyState1
02:00000000000011AE FCFF
02:00000000000011B0 50000084007C2004	   241: 	stb r0,_KeyState1
02:00000000000011B8 FCFF
02:00000000000011BA 2958001000      	   242: 	bge a1,r0,.0005
02:00000000000011BF C0002084007C2104	   243: 	ldb a0,_KeyState2
02:00000000000011C7 FCFF
02:00000000000011C9 8820F00700      	   244: 	and a0,a0,0xfe
02:00000000000011CE D0002084007C2104	   245: 	stb a0,_KeyState2
02:00000000000011D6 FCFF
02:00000000000011D8 20D8FAFFFF      	   246: 	bra	B0003
                                    	   247: .0005:
02:00000000000011DD C0002084007C2104	   248: 	ldb a0,_KeyState2
02:00000000000011E5 FCFF
02:00000000000011E7 8920080000      	   249: 	or a0,a0,1
02:00000000000011EC D0002084007C2104	   250: 	stb a0,_KeyState2
02:00000000000011F4 FCFF
02:00000000000011F6 209CFAFFFF      	   251: 	bra	B0003
                                    	   252: doNumLock:
02:00000000000011FB C0002084007C2104	   253: 	ldb a0,_KeyState2
02:0000000000001203 FCFF
02:0000000000001205 8A20800000      	   254: 	xor a0,a0,16
02:000000000000120A D0002084007C2104	   255: 	stb a0,_KeyState2
02:0000000000001212 FCFF
02:0000000000001214 A0A0000000      	   256: 	bsr	KeybdSetLEDStatus
02:0000000000001219 2056FAFFFF      	   257: 	bra	B0003
                                    	   258: doCapsLock:
02:000000000000121E C0002084007C2104	   259: 	ldb a0,_KeyState2
02:0000000000001226 FCFF
02:0000000000001228 8A20000100      	   260: 	xor a0,a0,32
02:000000000000122D D0002084007C2104	   261: 	stb a0,_KeyState2
02:0000000000001235 FCFF
02:0000000000001237 A05A000000      	   262: 	bsr	KeybdSetLEDStatus
02:000000000000123C 2010FAFFFF      	   263: 	bra	B0003
                                    	   264: doScrollLock:
02:0000000000001241 C0002084007C2104	   265: 	ldb a0,_KeyState2
02:0000000000001249 FCFF
02:000000000000124B 8A20000200      	   266: 	xor a0,a0,64
02:0000000000001250 D0002084007C2104	   267: 	stb a0,_KeyState2
02:0000000000001258 FCFF
02:000000000000125A A014000000      	   268: 	bsr	KeybdSetLEDStatus
02:000000000000125F 20CAF9FFFF      	   269: 	bra	B0003
                                    	   270: 
                                    	   271: KeybdSetLEDStatus:
02:0000000000001264 B640000001      	   272: 	push a0,a1
02:0000000000001269 50008084007C2404	   273: 	stb r0,KeybdLEDs	
02:0000000000001271 FCFF
02:0000000000001273 C0002084007C2104	   274: 	ldb a0,_KeyState2
02:000000000000127B FCFF
02:000000000000127D 2E20200A00      	   275: 	bbc a0,4,.0002
02:0000000000001282 0401100000      	   276: 	ldi a1,2
02:0000000000001287 50018084007C2404	   277: 	stb a1,KeybdLEDs
02:000000000000128F FCFF
                                    	   278: .0002:
02:0000000000001291 2E30280E00      	   279: 	bbc a0,5,.0003
02:0000000000001296 40018084007C2404	   280: 	ldb a1,KeybdLEDs
02:000000000000129E FCFF
02:00000000000012A0 0941200000      	   281: 	or a1,a1,4
02:00000000000012A5 50018084007C2404	   282: 	stb a1,KeybdLEDs
02:00000000000012AD FCFF
                                    	   283: .0003:
02:00000000000012AF 2E30300E00      	   284: 	bbc a0,6,.0004
02:00000000000012B4 40018084007C2404	   285: 	ldb a1,KeybdLEDs
02:00000000000012BC FCFF
02:00000000000012BE 0941080000      	   286: 	or a1,a1,1
02:00000000000012C3 50018084007C2404	   287: 	stb a1,KeybdLEDs
02:00000000000012CB FCFF
                                    	   288: .0004:
02:00000000000012CD 0401680700      	   289: 	ldi a1,0xED
02:00000000000012D2 A06E000000      	   290: 	bsr	KeybdSendByte
02:00000000000012D7 A072F7FFFF      	   291: 	bsr	KeybdWaitTx
02:00000000000012DC A0E6F6FFFF      	   292: 	bsr	KeybdRecvByte
02:00000000000012E1 2850000E00      	   293: 	blt a1,r0,.0001
                                    	   294: #		cmp		#$FA,d1
02:00000000000012E6 40018084007C2404	   295: 	ldb a1,KeybdLEDs
02:00000000000012EE FCFF
02:00000000000012F0 A032000000      	   296: 	bsr	KeybdSendByte
02:00000000000012F5 A036F7FFFF      	   297: 	bsr	KeybdWaitTx
02:00000000000012FA A0AAF6FFFF      	   298: 	bsr	KeybdRecvByte
                                    	   299: .0001:
02:00000000000012FF B740000001      	   300: 	pop a0,a1
02:0000000000001304 A304000000      	   301: 	ret
                                    	   302: 
                                    	   303: KeybdSendByte:
02:0000000000001309 52010000007C0000	   304: 	stt.io a1,KEYBD
02:0000000000001311 DCFE
02:0000000000001313 A304000000      	   305: 	ret
                                    	   306: 	
                                    	   307: Wait10ms:
02:0000000000001318 B600008000      	   308: 	push a0
02:000000000000131D 8400401F00      	   309: 	ldi a0,1000
                                    	   310: .0001:
02:0000000000001322 8220102800      	   311: 	sub a0,a0,a1
02:0000000000001327 2B3800FCFF      	   312: 	bgt a0,r0,.0001
02:000000000000132C B700008000      	   313: 	pop a0
02:0000000000001331 A304000000      	   314: 	ret
                                    	   315: 
                                    	   316: 
                                    	   317: 		.rodata
                                    	   318: #--------------------------------------------------------------------------
                                    	   319: # PS2 scan codes to ascii conversion tables.
                                    	   320: #--------------------------------------------------------------------------
                                    	   321: 
                                    	   322: _unshiftedScanCodes:
03:0000000000000040 2E              	   323: 	.byte	0x2e,0xa9,0x2e,0xa5,0xa3,0xa1,0xa2,0xac
03:0000000000000041 A9
03:0000000000000042 2E
03:0000000000000043 A5
03:0000000000000044 A3
03:0000000000000045 A1
03:0000000000000046 A2
03:0000000000000047 AC
03:0000000000000048 2E              	   324: 	.byte	0x2e,0xaa,0xa8,0xa6,0xa4,0x09,0x60,0x2e
03:0000000000000049 AA
03:000000000000004A A8
03:000000000000004B A6
03:000000000000004C A4
03:000000000000004D 09
03:000000000000004E 60
03:000000000000004F 2E
03:0000000000000050 2E              	   325: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x71,0x31,0x2e
03:0000000000000051 2E
03:0000000000000052 2E
03:0000000000000053 2E
03:0000000000000054 2E
03:0000000000000055 71
03:0000000000000056 31
03:0000000000000057 2E
03:0000000000000058 2E              	   326: 	.byte	0x2e,0x2e,0x7a,0x73,0x61,0x77,0x32,0x2e
03:0000000000000059 2E
03:000000000000005A 7A
03:000000000000005B 73
03:000000000000005C 61
03:000000000000005D 77
03:000000000000005E 32
03:000000000000005F 2E
03:0000000000000060 2E              	   327: 	.byte	0x2e,0x63,0x78,0x64,0x65,0x34,0x33,0x2e
03:0000000000000061 63
03:0000000000000062 78
03:0000000000000063 64
03:0000000000000064 65
03:0000000000000065 34
03:0000000000000066 33
03:0000000000000067 2E
03:0000000000000068 2E              	   328: 	.byte	0x2e,0x20,0x76,0x66,0x74,0x72,0x35,0x2e
03:0000000000000069 20
03:000000000000006A 76
03:000000000000006B 66
03:000000000000006C 74
03:000000000000006D 72
03:000000000000006E 35
03:000000000000006F 2E
03:0000000000000070 2E              	   329: 	.byte	0x2e,0x6e,0x62,0x68,0x67,0x79,0x36,0x2e
03:0000000000000071 6E
03:0000000000000072 62
03:0000000000000073 68
03:0000000000000074 67
03:0000000000000075 79
03:0000000000000076 36
03:0000000000000077 2E
03:0000000000000078 2E              	   330: 	.byte	0x2e,0x2e,0x6d,0x6a,0x75,0x37,0x38,0x2e
03:0000000000000079 2E
03:000000000000007A 6D
03:000000000000007B 6A
03:000000000000007C 75
03:000000000000007D 37
03:000000000000007E 38
03:000000000000007F 2E
03:0000000000000080 2E              	   331: 	.byte	0x2e,0x2c,0x6b,0x69,0x6f,0x30,0x39,0x2e
03:0000000000000081 2C
03:0000000000000082 6B
03:0000000000000083 69
03:0000000000000084 6F
03:0000000000000085 30
03:0000000000000086 39
03:0000000000000087 2E
03:0000000000000088 2E              	   332: 	.byte	0x2e,0x2e,0x2f,0x6c,0x3b,0x70,0x2d,0x2e
03:0000000000000089 2E
03:000000000000008A 2F
03:000000000000008B 6C
03:000000000000008C 3B
03:000000000000008D 70
03:000000000000008E 2D
03:000000000000008F 2E
03:0000000000000090 2E              	   333: 	.byte	0x2e,0x2e,0x27,0x2e,0x5b,0x3d,0x2e,0x2e
03:0000000000000091 2E
03:0000000000000092 27
03:0000000000000093 2E
03:0000000000000094 5B
03:0000000000000095 3D
03:0000000000000096 2E
03:0000000000000097 2E
03:0000000000000098 AD              	   334: 	.byte	0xad,0x2e,0x0d,0x5d,0x2e,0x5c,0x2e,0x2e
03:0000000000000099 2E
03:000000000000009A 0D
03:000000000000009B 5D
03:000000000000009C 2E
03:000000000000009D 5C
03:000000000000009E 2E
03:000000000000009F 2E
03:00000000000000A0 2E              	   335: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:00000000000000A1 2E
03:00000000000000A2 2E
03:00000000000000A3 2E
03:00000000000000A4 2E
03:00000000000000A5 2E
03:00000000000000A6 08
03:00000000000000A7 2E
03:00000000000000A8 2E              	   336: 	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
03:00000000000000A9 95
03:00000000000000AA 2E
03:00000000000000AB 93
03:00000000000000AC 94
03:00000000000000AD 2E
03:00000000000000AE 2E
03:00000000000000AF 2E
03:00000000000000B0 98              	   337: 	.byte	0x98,0x7f,0x92,0x2e,0x91,0x90,0x1b,0xaf
03:00000000000000B1 7F
03:00000000000000B2 92
03:00000000000000B3 2E
03:00000000000000B4 91
03:00000000000000B5 90
03:00000000000000B6 1B
03:00000000000000B7 AF
03:00000000000000B8 AB              	   338: 	.byte	0xab,0x2e,0x97,0x2e,0x2e,0x96,0xae,0x2e
03:00000000000000B9 2E
03:00000000000000BA 97
03:00000000000000BB 2E
03:00000000000000BC 2E
03:00000000000000BD 96
03:00000000000000BE AE
03:00000000000000BF 2E
                                    	   339: 
03:00000000000000C0 2E              	   340: 	.byte	0x2e,0x2e,0x2e,0xa7,0x2e,0x2e,0x2e,0x2e
03:00000000000000C1 2E
03:00000000000000C2 2E
03:00000000000000C3 A7
03:00000000000000C4 2E
03:00000000000000C5 2E
03:00000000000000C6 2E
03:00000000000000C7 2E
03:00000000000000C8 2E              	   341: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000C9 2E
03:00000000000000CA 2E
03:00000000000000CB 2E
03:00000000000000CC 2E
03:00000000000000CD 2E
03:00000000000000CE 2E
03:00000000000000CF 2E
03:00000000000000D0 2E              	   342: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000D1 2E
03:00000000000000D2 2E
03:00000000000000D3 2E
03:00000000000000D4 2E
03:00000000000000D5 2E
03:00000000000000D6 2E
03:00000000000000D7 2E
03:00000000000000D8 2E              	   343: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000D9 2E
03:00000000000000DA 2E
03:00000000000000DB 2E
03:00000000000000DC 2E
03:00000000000000DD 2E
03:00000000000000DE 2E
03:00000000000000DF 2E
03:00000000000000E0 2E              	   344: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000E1 2E
03:00000000000000E2 2E
03:00000000000000E3 2E
03:00000000000000E4 2E
03:00000000000000E5 2E
03:00000000000000E6 2E
03:00000000000000E7 2E
03:00000000000000E8 2E              	   345: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000E9 2E
03:00000000000000EA 2E
03:00000000000000EB 2E
03:00000000000000EC 2E
03:00000000000000ED 2E
03:00000000000000EE 2E
03:00000000000000EF 2E
03:00000000000000F0 2E              	   346: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000F1 2E
03:00000000000000F2 2E
03:00000000000000F3 2E
03:00000000000000F4 2E
03:00000000000000F5 2E
03:00000000000000F6 2E
03:00000000000000F7 2E
03:00000000000000F8 2E              	   347: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000F9 2E
03:00000000000000FA 2E
03:00000000000000FB 2E
03:00000000000000FC 2E
03:00000000000000FD 2E
03:00000000000000FE 2E
03:00000000000000FF 2E
03:0000000000000100 2E              	   348: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000101 2E
03:0000000000000102 2E
03:0000000000000103 2E
03:0000000000000104 2E
03:0000000000000105 2E
03:0000000000000106 2E
03:0000000000000107 2E
03:0000000000000108 2E              	   349: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000109 2E
03:000000000000010A 2E
03:000000000000010B 2E
03:000000000000010C 2E
03:000000000000010D 2E
03:000000000000010E 2E
03:000000000000010F 2E
03:0000000000000110 2E              	   350: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000111 2E
03:0000000000000112 2E
03:0000000000000113 2E
03:0000000000000114 2E
03:0000000000000115 2E
03:0000000000000116 2E
03:0000000000000117 2E
03:0000000000000118 2E              	   351: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000119 2E
03:000000000000011A 2E
03:000000000000011B 2E
03:000000000000011C 2E
03:000000000000011D 2E
03:000000000000011E 2E
03:000000000000011F 2E
03:0000000000000120 2E              	   352: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000121 2E
03:0000000000000122 2E
03:0000000000000123 2E
03:0000000000000124 2E
03:0000000000000125 2E
03:0000000000000126 2E
03:0000000000000127 2E
03:0000000000000128 2E              	   353: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000129 2E
03:000000000000012A 2E
03:000000000000012B 2E
03:000000000000012C 2E
03:000000000000012D 2E
03:000000000000012E 2E
03:000000000000012F 2E
03:0000000000000130 2E              	   354: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000131 2E
03:0000000000000132 2E
03:0000000000000133 2E
03:0000000000000134 2E
03:0000000000000135 2E
03:0000000000000136 2E
03:0000000000000137 2E
03:0000000000000138 2E              	   355: 	.byte	0x2e,0x2e,0xfa,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000139 2E
03:000000000000013A FA
03:000000000000013B 2E
03:000000000000013C 2E
03:000000000000013D 2E
03:000000000000013E 2E
03:000000000000013F 2E
                                    	   356: 
                                    	   357: _shiftedScanCodes:
03:0000000000000140 2E              	   358: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000141 2E
03:0000000000000142 2E
03:0000000000000143 2E
03:0000000000000144 2E
03:0000000000000145 2E
03:0000000000000146 2E
03:0000000000000147 2E
03:0000000000000148 2E              	   359: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
03:0000000000000149 2E
03:000000000000014A 2E
03:000000000000014B 2E
03:000000000000014C 2E
03:000000000000014D 09
03:000000000000014E 7E
03:000000000000014F 2E
03:0000000000000150 2E              	   360: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x51,0x21,0x2e
03:0000000000000151 2E
03:0000000000000152 2E
03:0000000000000153 2E
03:0000000000000154 2E
03:0000000000000155 51
03:0000000000000156 21
03:0000000000000157 2E
03:0000000000000158 2E              	   361: 	.byte	0x2e,0x2e,0x5a,0x53,0x41,0x57,0x40,0x2e
03:0000000000000159 2E
03:000000000000015A 5A
03:000000000000015B 53
03:000000000000015C 41
03:000000000000015D 57
03:000000000000015E 40
03:000000000000015F 2E
03:0000000000000160 2E              	   362: 	.byte	0x2e,0x43,0x58,0x44,0x45,0x24,0x23,0x2e
03:0000000000000161 43
03:0000000000000162 58
03:0000000000000163 44
03:0000000000000164 45
03:0000000000000165 24
03:0000000000000166 23
03:0000000000000167 2E
03:0000000000000168 2E              	   363: 	.byte	0x2e,0x20,0x56,0x46,0x54,0x52,0x25,0x2e
03:0000000000000169 20
03:000000000000016A 56
03:000000000000016B 46
03:000000000000016C 54
03:000000000000016D 52
03:000000000000016E 25
03:000000000000016F 2E
03:0000000000000170 2E              	   364: 	.byte	0x2e,0x4e,0x42,0x48,0x47,0x59,0x5e,0x2e
03:0000000000000171 4E
03:0000000000000172 42
03:0000000000000173 48
03:0000000000000174 47
03:0000000000000175 59
03:0000000000000176 5E
03:0000000000000177 2E
03:0000000000000178 2E              	   365: 	.byte	0x2e,0x2e,0x4d,0x4a,0x55,0x26,0x2a,0x2e
03:0000000000000179 2E
03:000000000000017A 4D
03:000000000000017B 4A
03:000000000000017C 55
03:000000000000017D 26
03:000000000000017E 2A
03:000000000000017F 2E
03:0000000000000180 2E              	   366: 	.byte	0x2e,0x3c,0x4b,0x49,0x4f,0x29,0x28,0x2e
03:0000000000000181 3C
03:0000000000000182 4B
03:0000000000000183 49
03:0000000000000184 4F
03:0000000000000185 29
03:0000000000000186 28
03:0000000000000187 2E
03:0000000000000188 2E              	   367: 	.byte	0x2e,0x3e,0x3f,0x4c,0x3a,0x50,0x5f,0x2e
03:0000000000000189 3E
03:000000000000018A 3F
03:000000000000018B 4C
03:000000000000018C 3A
03:000000000000018D 50
03:000000000000018E 5F
03:000000000000018F 2E
03:0000000000000190 2E              	   368: 	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
03:0000000000000191 2E
03:0000000000000192 22
03:0000000000000193 2E
03:0000000000000194 7B
03:0000000000000195 2B
03:0000000000000196 2E
03:0000000000000197 2E
03:0000000000000198 2E              	   369: 	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
03:0000000000000199 2E
03:000000000000019A 0D
03:000000000000019B 7D
03:000000000000019C 2E
03:000000000000019D 7C
03:000000000000019E 2E
03:000000000000019F 2E
03:00000000000001A0 2E              	   370: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:00000000000001A1 2E
03:00000000000001A2 2E
03:00000000000001A3 2E
03:00000000000001A4 2E
03:00000000000001A5 2E
03:00000000000001A6 08
03:00000000000001A7 2E
03:00000000000001A8 2E              	   371: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001A9 2E
03:00000000000001AA 2E
03:00000000000001AB 2E
03:00000000000001AC 2E
03:00000000000001AD 2E
03:00000000000001AE 2E
03:00000000000001AF 2E
03:00000000000001B0 2E              	   372: 	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
03:00000000000001B1 7F
03:00000000000001B2 2E
03:00000000000001B3 2E
03:00000000000001B4 2E
03:00000000000001B5 2E
03:00000000000001B6 1B
03:00000000000001B7 2E
03:00000000000001B8 2E              	   373: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001B9 2E
03:00000000000001BA 2E
03:00000000000001BB 2E
03:00000000000001BC 2E
03:00000000000001BD 2E
03:00000000000001BE 2E
03:00000000000001BF 2E
                                    	   374: 
03:00000000000001C0 2E              	   375: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001C1 2E
03:00000000000001C2 2E
03:00000000000001C3 2E
03:00000000000001C4 2E
03:00000000000001C5 2E
03:00000000000001C6 2E
03:00000000000001C7 2E
03:00000000000001C8 2E              	   376: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001C9 2E
03:00000000000001CA 2E
03:00000000000001CB 2E
03:00000000000001CC 2E
03:00000000000001CD 2E
03:00000000000001CE 2E
03:00000000000001CF 2E
03:00000000000001D0 2E              	   377: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001D1 2E
03:00000000000001D2 2E
03:00000000000001D3 2E
03:00000000000001D4 2E
03:00000000000001D5 2E
03:00000000000001D6 2E
03:00000000000001D7 2E
03:00000000000001D8 2E              	   378: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001D9 2E
03:00000000000001DA 2E
03:00000000000001DB 2E
03:00000000000001DC 2E
03:00000000000001DD 2E
03:00000000000001DE 2E
03:00000000000001DF 2E
03:00000000000001E0 2E              	   379: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001E1 2E
03:00000000000001E2 2E
03:00000000000001E3 2E
03:00000000000001E4 2E
03:00000000000001E5 2E
03:00000000000001E6 2E
03:00000000000001E7 2E
03:00000000000001E8 2E              	   380: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001E9 2E
03:00000000000001EA 2E
03:00000000000001EB 2E
03:00000000000001EC 2E
03:00000000000001ED 2E
03:00000000000001EE 2E
03:00000000000001EF 2E
03:00000000000001F0 2E              	   381: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001F1 2E
03:00000000000001F2 2E
03:00000000000001F3 2E
03:00000000000001F4 2E
03:00000000000001F5 2E
03:00000000000001F6 2E
03:00000000000001F7 2E
03:00000000000001F8 2E              	   382: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001F9 2E
03:00000000000001FA 2E
03:00000000000001FB 2E
03:00000000000001FC 2E
03:00000000000001FD 2E
03:00000000000001FE 2E
03:00000000000001FF 2E
03:0000000000000200 2E              	   383: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000201 2E
03:0000000000000202 2E
03:0000000000000203 2E
03:0000000000000204 2E
03:0000000000000205 2E
03:0000000000000206 2E
03:0000000000000207 2E
03:0000000000000208 2E              	   384: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000209 2E
03:000000000000020A 2E
03:000000000000020B 2E
03:000000000000020C 2E
03:000000000000020D 2E
03:000000000000020E 2E
03:000000000000020F 2E
03:0000000000000210 2E              	   385: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000211 2E
03:0000000000000212 2E
03:0000000000000213 2E
03:0000000000000214 2E
03:0000000000000215 2E
03:0000000000000216 2E
03:0000000000000217 2E
03:0000000000000218 2E              	   386: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000219 2E
03:000000000000021A 2E
03:000000000000021B 2E
03:000000000000021C 2E
03:000000000000021D 2E
03:000000000000021E 2E
03:000000000000021F 2E
03:0000000000000220 2E              	   387: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000221 2E
03:0000000000000222 2E
03:0000000000000223 2E
03:0000000000000224 2E
03:0000000000000225 2E
03:0000000000000226 2E
03:0000000000000227 2E
03:0000000000000228 2E              	   388: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000229 2E
03:000000000000022A 2E
03:000000000000022B 2E
03:000000000000022C 2E
03:000000000000022D 2E
03:000000000000022E 2E
03:000000000000022F 2E
03:0000000000000230 2E              	   389: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000231 2E
03:0000000000000232 2E
03:0000000000000233 2E
03:0000000000000234 2E
03:0000000000000235 2E
03:0000000000000236 2E
03:0000000000000237 2E
03:0000000000000238 2E              	   390: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000239 2E
03:000000000000023A 2E
03:000000000000023B 2E
03:000000000000023C 2E
03:000000000000023D 2E
03:000000000000023E 2E
03:000000000000023F 2E
                                    	   391: 
                                    	   392: # control
                                    	   393: _keybdControlCodes:
03:0000000000000240 2E              	   394: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000241 2E
03:0000000000000242 2E
03:0000000000000243 2E
03:0000000000000244 2E
03:0000000000000245 2E
03:0000000000000246 2E
03:0000000000000247 2E
03:0000000000000248 2E              	   395: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
03:0000000000000249 2E
03:000000000000024A 2E
03:000000000000024B 2E
03:000000000000024C 2E
03:000000000000024D 09
03:000000000000024E 7E
03:000000000000024F 2E
03:0000000000000250 2E              	   396: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x11,0x21,0x2e
03:0000000000000251 2E
03:0000000000000252 2E
03:0000000000000253 2E
03:0000000000000254 2E
03:0000000000000255 11
03:0000000000000256 21
03:0000000000000257 2E
03:0000000000000258 2E              	   397: 	.byte	0x2e,0x2e,0x1a,0x13,0x01,0x17,0x40,0x2e
03:0000000000000259 2E
03:000000000000025A 1A
03:000000000000025B 13
03:000000000000025C 01
03:000000000000025D 17
03:000000000000025E 40
03:000000000000025F 2E
03:0000000000000260 2E              	   398: 	.byte	0x2e,0x03,0x18,0x04,0x05,0x24,0x23,0x2e
03:0000000000000261 03
03:0000000000000262 18
03:0000000000000263 04
03:0000000000000264 05
03:0000000000000265 24
03:0000000000000266 23
03:0000000000000267 2E
03:0000000000000268 2E              	   399: 	.byte	0x2e,0x20,0x16,0x06,0x14,0x12,0x25,0x2e
03:0000000000000269 20
03:000000000000026A 16
03:000000000000026B 06
03:000000000000026C 14
03:000000000000026D 12
03:000000000000026E 25
03:000000000000026F 2E
03:0000000000000270 2E              	   400: 	.byte	0x2e,0x0e,0x02,0x08,0x07,0x19,0x5e,0x2e
03:0000000000000271 0E
03:0000000000000272 02
03:0000000000000273 08
03:0000000000000274 07
03:0000000000000275 19
03:0000000000000276 5E
03:0000000000000277 2E
03:0000000000000278 2E              	   401: 	.byte	0x2e,0x2e,0x0d,0x0a,0x15,0x26,0x2a,0x2e
03:0000000000000279 2E
03:000000000000027A 0D
03:000000000000027B 0A
03:000000000000027C 15
03:000000000000027D 26
03:000000000000027E 2A
03:000000000000027F 2E
03:0000000000000280 2E              	   402: 	.byte	0x2e,0x3c,0x0b,0x09,0x0f,0x29,0x28,0x2e
03:0000000000000281 3C
03:0000000000000282 0B
03:0000000000000283 09
03:0000000000000284 0F
03:0000000000000285 29
03:0000000000000286 28
03:0000000000000287 2E
03:0000000000000288 2E              	   403: 	.byte	0x2e,0x3e,0x3f,0x0c,0x3a,0x10,0x5f,0x2e
03:0000000000000289 3E
03:000000000000028A 3F
03:000000000000028B 0C
03:000000000000028C 3A
03:000000000000028D 10
03:000000000000028E 5F
03:000000000000028F 2E
03:0000000000000290 2E              	   404: 	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
03:0000000000000291 2E
03:0000000000000292 22
03:0000000000000293 2E
03:0000000000000294 7B
03:0000000000000295 2B
03:0000000000000296 2E
03:0000000000000297 2E
03:0000000000000298 2E              	   405: 	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
03:0000000000000299 2E
03:000000000000029A 0D
03:000000000000029B 7D
03:000000000000029C 2E
03:000000000000029D 7C
03:000000000000029E 2E
03:000000000000029F 2E
03:00000000000002A0 2E              	   406: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:00000000000002A1 2E
03:00000000000002A2 2E
03:00000000000002A3 2E
03:00000000000002A4 2E
03:00000000000002A5 2E
03:00000000000002A6 08
03:00000000000002A7 2E
03:00000000000002A8 2E              	   407: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002A9 2E
03:00000000000002AA 2E
03:00000000000002AB 2E
03:00000000000002AC 2E
03:00000000000002AD 2E
03:00000000000002AE 2E
03:00000000000002AF 2E
03:00000000000002B0 2E              	   408: 	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
03:00000000000002B1 7F
03:00000000000002B2 2E
03:00000000000002B3 2E
03:00000000000002B4 2E
03:00000000000002B5 2E
03:00000000000002B6 1B
03:00000000000002B7 2E
03:00000000000002B8 2E              	   409: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002B9 2E
03:00000000000002BA 2E
03:00000000000002BB 2E
03:00000000000002BC 2E
03:00000000000002BD 2E
03:00000000000002BE 2E
03:00000000000002BF 2E
                                    	   410: 
                                    	   411: _keybdExtendedCodes:
03:00000000000002C0 2E              	   412: 	.byte	0x2e,0x2e,0x2e,0x2e,0xa3,0xa1,0xa2,0x2e
03:00000000000002C1 2E
03:00000000000002C2 2E
03:00000000000002C3 2E
03:00000000000002C4 A3
03:00000000000002C5 A1
03:00000000000002C6 A2
03:00000000000002C7 2E
03:00000000000002C8 2E              	   413: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002C9 2E
03:00000000000002CA 2E
03:00000000000002CB 2E
03:00000000000002CC 2E
03:00000000000002CD 2E
03:00000000000002CE 2E
03:00000000000002CF 2E
03:00000000000002D0 2E              	   414: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002D1 2E
03:00000000000002D2 2E
03:00000000000002D3 2E
03:00000000000002D4 2E
03:00000000000002D5 2E
03:00000000000002D6 2E
03:00000000000002D7 2E
03:00000000000002D8 2E              	   415: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002D9 2E
03:00000000000002DA 2E
03:00000000000002DB 2E
03:00000000000002DC 2E
03:00000000000002DD 2E
03:00000000000002DE 2E
03:00000000000002DF 2E
03:00000000000002E0 2E              	   416: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002E1 2E
03:00000000000002E2 2E
03:00000000000002E3 2E
03:00000000000002E4 2E
03:00000000000002E5 2E
03:00000000000002E6 2E
03:00000000000002E7 2E
03:00000000000002E8 2E              	   417: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002E9 2E
03:00000000000002EA 2E
03:00000000000002EB 2E
03:00000000000002EC 2E
03:00000000000002ED 2E
03:00000000000002EE 2E
03:00000000000002EF 2E
03:00000000000002F0 2E              	   418: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002F1 2E
03:00000000000002F2 2E
03:00000000000002F3 2E
03:00000000000002F4 2E
03:00000000000002F5 2E
03:00000000000002F6 2E
03:00000000000002F7 2E
03:00000000000002F8 2E              	   419: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002F9 2E
03:00000000000002FA 2E
03:00000000000002FB 2E
03:00000000000002FC 2E
03:00000000000002FD 2E
03:00000000000002FE 2E
03:00000000000002FF 2E
03:0000000000000300 2E              	   420: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000301 2E
03:0000000000000302 2E
03:0000000000000303 2E
03:0000000000000304 2E
03:0000000000000305 2E
03:0000000000000306 2E
03:0000000000000307 2E
03:0000000000000308 2E              	   421: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000309 2E
03:000000000000030A 2E
03:000000000000030B 2E
03:000000000000030C 2E
03:000000000000030D 2E
03:000000000000030E 2E
03:000000000000030F 2E
03:0000000000000310 2E              	   422: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000311 2E
03:0000000000000312 2E
03:0000000000000313 2E
03:0000000000000314 2E
03:0000000000000315 2E
03:0000000000000316 2E
03:0000000000000317 2E
03:0000000000000318 2E              	   423: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000319 2E
03:000000000000031A 2E
03:000000000000031B 2E
03:000000000000031C 2E
03:000000000000031D 2E
03:000000000000031E 2E
03:000000000000031F 2E
03:0000000000000320 2E              	   424: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000321 2E
03:0000000000000322 2E
03:0000000000000323 2E
03:0000000000000324 2E
03:0000000000000325 2E
03:0000000000000326 2E
03:0000000000000327 2E
03:0000000000000328 2E              	   425: 	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
03:0000000000000329 95
03:000000000000032A 2E
03:000000000000032B 93
03:000000000000032C 94
03:000000000000032D 2E
03:000000000000032E 2E
03:000000000000032F 2E
03:0000000000000330 98              	   426: 	.byte	0x98,0x99,0x92,0x2e,0x91,0x90,0x2e,0x2e
03:0000000000000331 99
03:0000000000000332 92
03:0000000000000333 2E
03:0000000000000334 91
03:0000000000000335 90
03:0000000000000336 2E
03:0000000000000337 2E
03:0000000000000338 2E              	   427: 	.byte	0x2e,0x2e,0x97,0x2e,0x2e,0x96,0x2e,0x2e
03:0000000000000339 2E
03:000000000000033A 97
03:000000000000033B 2E
03:000000000000033C 2E
03:000000000000033D 96
03:000000000000033E 2E
03:000000000000033F 2E
                                    	   428: 
                                    	   429: 
                                    	   430: 

Source: "boot.asm"
                                    	   510: 	.include "Monitor.asm"

Source: "Monitor.asm"
                                    	     1: 	.set CmdBuf,0xFFFC0480
                                    	     2: 	.set CmdBufEnd,0xFFFC0500
                                    	     3: 	.text
                                    	     4: #==============================================================================
                                    	     5: #==============================================================================
                                    	     6: # Monitor
                                    	     7: #
                                    	     8: # Register Usage
                                    	     9: #		t0 = text pointer
                                    	    10: #==============================================================================
                                    	    11: #==============================================================================
                                    	    12: 
                                    	    13: StartMon:
                                    	    14: Monitor:
02:0000000000001336 841F80FF077CF0FF	    15: 	ldi sp,0xFFFCFFF0	# reset stack
02:000000000000133E FCFF7C00000000
02:0000000000001345 041E0000007C0000	    16: 	ldi gp,0xFFFF0000	# and global pointer
02:000000000000134D FFFF7C00000000
02:0000000000001354 50004084007C2204	    17: 	stb r0,_KeybdEcho	# turn off keyboard echo
02:000000000000135C FCFF
                                    	    18: PromptLn:
02:000000000000135E A09CE5FFFF      	    19: 	bsr	CRLF
02:0000000000001363 0401200100      	    20: 	ldi a1,'$'
02:0000000000001368 A05EDDFFFF      	    21: 	bsr	DisplayChar
                                    	    22: 
                                    	    23: # Get characters until a CR is keyed
                                    	    24: 
                                    	    25: Prompt3:
02:000000000000136D A0FAF6FFFF      	    26: 	bsr	GetKey
02:0000000000001372 2640F80B007C0D00	    27: 	beq a1,CR,Prompt1
02:000000000000137A 0000
02:000000000000137C A036DDFFFF      	    28: 	bsr	DisplayChar
02:0000000000001381 20D8FFFFFF      	    29: 	bra	Prompt3
                                    	    30: 
                                    	    31: # Process the screen line that the CR was keyed on
                                    	    32: 
                                    	    33: Prompt1:
02:0000000000001386 50002080007C0104	    34: 	stb r0,CursorCol		# go back to the start of the line
02:000000000000138E FCFF
02:0000000000001390 A064DCFFFF      	    35: 	bsr	CalcScreenLoc		# a0 = screen memory location
02:0000000000001395 0F22000000      	    36: 	mov t0,a0
02:000000000000139A 4081000000      	    37: 	ldb a1,[t0]
02:000000000000139F 0482080000      	    38: 	add t0,t0,1
02:00000000000013A4 2740F80B007C2400	    39: 	bne a1,'$',Prompt2	# skip over '$' prompt character
02:00000000000013AC 0000
02:00000000000013AE 4081000000      	    40: 	ldb a1,[t0]
02:00000000000013B3 0482080000      	    41: 	add t0,t0,1
                                    	    42: 	
                                    	    43: # Dispatch based on command character
                                    	    44: 
                                    	    45: Prompt2:
02:00000000000013B8 2758F81B007C7800	    46: 	bne a1,'x',.0001
02:00000000000013C0 0000
02:00000000000013C2 4081000000      	    47: 	ldb a1,[t0]
02:00000000000013C7 0482080000      	    48: 	add t0,t0,1
02:00000000000013CC 2648F8E9FB7C7200	    49: 	beq a1,'r',xm_ReceiveStart
02:00000000000013D4 0000
02:00000000000013D6 2740F8B1FF7C7400	    50: 	bne a1,'t',Monitor
02:00000000000013DE 0000
02:00000000000013E0 A01A090000      	    51: 	bsr GetRange
02:00000000000013E5 A072EDFFFF      	    52: 	bsr xm_SendStart
02:00000000000013EA 2098FEFFFF      	    53: 	bra Monitor
                                    	    54: .0001:
02:00000000000013EF 2650F845017C3A00	    55: 	beq a1,':',EditMem
02:00000000000013F7 0000
02:00000000000013F9 2648F8BB017C6400	    56: 	beq a1,'d',DumpMem
02:0000000000001401 0000
02:0000000000001403 2640F8BF007C6600	    57: 	beq a1,'f',FillMem
02:000000000000140B 0000
02:000000000000140D 2648F847027C6C00	    58: 	beq a1,'l',LoadS19
02:0000000000001415 0000
02:0000000000001417 2650F89F017C6A00	    59: 	beq a1,'j',ExecuteCode
02:000000000000141F 0000
02:0000000000001421 2658F825007C3F00	    60: 	beq a1,'?',DisplayHelp
02:0000000000001429 0000
02:000000000000142B 2658F807007C6300	    61: 	beq a1,'c',TestCLS
02:0000000000001433 0000
02:0000000000001435 2002FEFFFF      	    62: 	bra Monitor
                                    	    63: 
                                    	    64: TestCLS:
02:000000000000143A 4081000000      	    65: 	ldb a1,[t0]
02:000000000000143F 0482080000      	    66: 	add t0,t0,1
02:0000000000001444 2750F879FF7C6C00	    67: 	bne a1,'l',Monitor
02:000000000000144C 0000
02:000000000000144E 4081000000      	    68: 	ldb a1,[t0]
02:0000000000001453 0482080000      	    69: 	add t0,t0,1
02:0000000000001458 2750F86FFF7C7300	    70: 	bne a1,'s',Monitor
02:0000000000001460 0000
02:0000000000001462 A05CDAFFFF      	    71: 	bsr ClearScreen
02:0000000000001467 209EFDFFFF      	    72: 	bra Monitor
                                    	    73: 	
                                    	    74: DisplayHelp:
02:000000000000146C CA80076800      	    75: 	lda	a0,HelpMsg[gp]
02:0000000000001471 A026E3FFFF      	    76: 	bsr	DisplayString
02:0000000000001476 2080FDFFFF      	    77: 	bra	Monitor
                                    	    78: 
                                    	    79: 	.rodata
                                    	    80: HelpMsg:
03:0000000000000340 3F203D2044697370	    81: 	.byte	"? = Display help",CR,LF
03:0000000000000348 6C61792068656C70
03:0000000000000350 0D
03:0000000000000351 0A
03:0000000000000352 434C53203D20636C	    82: 	.byte	"CLS = clear screen",CR,LF
03:000000000000035A 6561722073637265
03:0000000000000362 656E
03:0000000000000364 0D
03:0000000000000365 0A
03:0000000000000366 3A203D2045646974	    83: 	.byte	": = Edit memory bytes",CR,LF
03:000000000000036E 206D656D6F727920
03:0000000000000376 6279746573
03:000000000000037B 0D
03:000000000000037C 0A
03:000000000000037D 46203D2046696C6C	    84: 	.byte	"F = Fill memory",CR,LF
03:0000000000000385 206D656D6F7279
03:000000000000038C 0D
03:000000000000038D 0A
03:000000000000038E 4C203D204C6F6164	    85: 	.byte	"L = Load S19 file",CR,LF
03:0000000000000396 205331392066696C
03:000000000000039E 65
03:000000000000039F 0D
03:00000000000003A0 0A
03:00000000000003A1 44203D2044756D70	    86: 	.byte	"D = Dump memory",CR,LF
03:00000000000003A9 206D656D6F7279
03:00000000000003B0 0D
03:00000000000003B1 0A
03:00000000000003B2 42203D2073746172	    87: 	.byte	"B = start tiny basic",CR,LF
03:00000000000003BA 742074696E792062
03:00000000000003C2 61736963
03:00000000000003C6 0D
03:00000000000003C7 0A
03:00000000000003C8 4A203D204A756D70	    88: 	.byte	"J = Jump to code",CR,LF,0
03:00000000000003D0 20746F20636F6465
03:00000000000003D8 0D
03:00000000000003D9 0A
03:00000000000003DA 00
                                    	    89: 
                                    	    90: 	.text
                                    	    91: #------------------------------------------------------------------------------
                                    	    92: # This routine borrowed from Gordo's Tiny Basic interpreter.
                                    	    93: # Used to fetch a command line. (Not currently used).
                                    	    94: #
                                    	    95: # d0.b	- command prompt
                                    	    96: #------------------------------------------------------------------------------
                                    	    97: 
                                    	    98: GetCmdLine:
02:000000000000147B B640288001      	    99: 	push a0,a1,t1
02:0000000000001480 A02EDBFFFF      	   100: 	bsr	DisplayChar		; display prompt
02:0000000000001485 0401000100      	   101: 	ldi a1,' '
02:000000000000148A A01ADBFFFF      	   102: 	bsr	DisplayChar
02:000000000000148F CA000090007C8004	   103: 	lda	a0,CmdBuf
02:0000000000001497 FCFF
                                    	   104: .0001:
02:0000000000001499 A0A2F4FFFF      	   105: 	bsr	GetKey
02:000000000000149E 2640F829007C0800	   106: 	beq a1,CTRLH,.0003
02:00000000000014A6 0000
02:00000000000014A8 2640F83D007C1800	   107: 	beq a1,CTRLX,.0004
02:00000000000014B0 0000
02:00000000000014B2 2640F80B007C0D00	   108: 	beq a1,CR,.0002
02:00000000000014BA 0000
02:00000000000014BC 2848F8EFFF7C2000	   109: 	blt a1,' ',.0001
02:00000000000014C4 0000
                                    	   110: .0002:
02:00000000000014C6 5021000000      	   111: 	stb a1,[a0]
02:00000000000014CB 8420080000      	   112: 	add a0,a0,1
02:00000000000014D0 A08EDAFFFF      	   113: 	bsr	DisplayChar
02:00000000000014D5 2650F84B007C0D00	   114: 	beq a1,CR,.0007
02:00000000000014DD 0000
02:00000000000014DF 2830F8DDFF7CFF04	   115: 	blt a0,CmdBufEnd-1,.0001
02:00000000000014E7 FCFF7C00000000
                                    	   116: .0003:
02:00000000000014EE A052DAFFFF      	   117: 	bsr	DisplayChar
02:00000000000014F3 0401000100      	   118: 	ldi a1, ' '
02:00000000000014F8 A03EDAFFFF      	   119: 	bsr	DisplayChar
02:00000000000014FD 2A20F8CFFF7C8004	   120: 	ble a0,CmdBuf,.0001
02:0000000000001505 FCFF7C00000000
02:000000000000150C 0401400000      	   121: 	ldi a1,CTRLH
02:0000000000001511 A00CDAFFFF      	   122: 	bsr	DisplayChar
02:0000000000001516 8420F8FF07      	   123: 	sub a0,a0,1
02:000000000000151B 20FCFEFFFF      	   124: 	bra .0001
                                    	   125: .0004:
02:0000000000001520 2628F8BDFF7C8004	   126: 	beq a0,CmdBuf,.0001		# if nothing in buffer
02:0000000000001528 FCFF7C00000000
02:000000000000152F 8422F8FF07      	   127: 	sub t1,a0,1
                                    	   128: .0005:
02:0000000000001534 0401400000      	   129: 	ldi a1,CTRLH
02:0000000000001539 A0BCD9FFFF      	   130: 	bsr	DisplayChar
02:000000000000153E 0401000100      	   131: 	ldi a1, ' '
02:0000000000001543 A0A8D9FFFF      	   132: 	bsr	DisplayChar
02:0000000000001548 0401400000      	   133: 	ldi a1,CTRLH
02:000000000000154D A094D9FFFF      	   134: 	bsr	DisplayChar
02:0000000000001552 84A2F8FF07      	   135: 	sub t1,t1,1
02:0000000000001557 29A800EEFF      	   136: 	bge t1,r0,.0005
                                    	   137: .0006:
02:000000000000155C CA000090007C8004	   138: 	lda a0,CmdBuf
02:0000000000001564 FCFF
02:0000000000001566 2066FEFFFF      	   139: 	bra	.0001
                                    	   140: .0007:
02:000000000000156B 0401500000      	   141: 	ldi a1,LF
02:0000000000001570 A04ED9FFFF      	   142: 	bsr	DisplayChar
02:0000000000001575 B740288001      	   143: 	pop a0,a1,t1
02:000000000000157A A304000000      	   144: 	ret
                                    	   145: 
                                    	   146: 		
                                    	   147: #------------------------------------------------------------------------------
                                    	   148: # Fill memory
                                    	   149: # FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                                    	   150: # FW = fill wydes
                                    	   151: # FT = fill tetra
                                    	   152: # FO = fill octas
                                    	   153: # F = fill bytes
                                    	   154: #------------------------------------------------------------------------------
                                    	   155: 
                                    	   156: FillMem:
02:000000000000157F C082000000      	   157: 	ldb t1,[t0]
02:0000000000001584 0482080000      	   158: 	add t0,t0,1
02:0000000000001589 0FA4000000      	   159: 	mov t4,t1						# t4 = fill size
                                    	   160: 		#bsr		ScreenToAscii
02:000000000000158E A086010000      	   161: 	bsr	ignBlanks
02:0000000000001593 A042040000      	   162: 	bsr	GetHexNumber
02:0000000000001598 263000CEFE      	   163: 	beq a0,r0,Monitor
02:000000000000159D 8F42000000      	   164: 	mov t1,a1						# t1 = start
02:00000000000015A2 A05E010000      	   165: 	bsr	ignBlanks
02:00000000000015A7 A01A040000      	   166: 	bsr	GetHexNumber
02:00000000000015AC 263000C4FE      	   167: 	beq a0,r0,Monitor
02:00000000000015B1 8F43000000      	   168: 	mov t3,a1						# t3 = count	
02:00000000000015B6 A036010000      	   169: 	bsr	ignBlanks
02:00000000000015BB A0F2030000      	   170: 	bsr	GetHexNumber		# fill value
02:00000000000015C0 2608F917007C4F00	   171: 	beq t4,'O',fmemO
02:00000000000015C8 0000
02:00000000000015CA 2600F91F007C5400	   172: 	beq t4,'T',fmemT
02:00000000000015D2 0000
02:00000000000015D4 2618F925007C5700	   173: 	beq t4,'W',fmemW
02:00000000000015DC 0000
02:00000000000015DE 2610F92D007C4200	   174: 	beq t4,'B',fmemB
02:00000000000015E6 0000
02:00000000000015E8 20A0000000      	   175: 	bra fmemB
                                    	   176: fmemO:
02:00000000000015ED 53A1000000      	   177: 	sto a1,[t1]
02:00000000000015F2 84A2400000      	   178: 	add t1,t1,8
02:00000000000015F7 84E3F8FF07      	   179: 	sub t3,t3,1
02:00000000000015FC 2BE900F8FF      	   180: 	bgtu t3,r0,fmemO
02:0000000000001601 206AFAFFFF      	   181: 	bra	Monitor
                                    	   182: fmemT:
02:0000000000001606 52A1000000      	   183: 	stt a1,[t1]
02:000000000000160B 84A2200000      	   184: 	add t1,t1,4
02:0000000000001610 84E3F8FF07      	   185: 	sub t3,t3,1
02:0000000000001615 2BE900F8FF      	   186: 	bgtu t3,r0,fmemT
02:000000000000161A 2038FAFFFF      	   187: 	bra	Monitor
                                    	   188: fmemW:
02:000000000000161F 51A1000000      	   189: 	stw a1,[t1]
02:0000000000001624 84A2100000      	   190: 	add t1,t1,2
02:0000000000001629 84E3F8FF07      	   191: 	sub t3,t3,1
02:000000000000162E 2BE900F8FF      	   192: 	bgtu t3,r0,fmemW
02:0000000000001633 2006FAFFFF      	   193: 	bra	Monitor
                                    	   194: fmemB:
02:0000000000001638 50A1000000      	   195: 	stb a1,[t1]
02:000000000000163D 84A2080000      	   196: 	add t1,t1,1
02:0000000000001642 84E3F8FF07      	   197: 	sub t3,t3,1
02:0000000000001647 2BE900F8FF      	   198: 	bgtu t3,r0,fmemB
02:000000000000164C 20D4F9FFFF      	   199: 	bra	Monitor
                                    	   200: 
                                    	   201: #------------------------------------------------------------------------------
                                    	   202: # Ignore blank spaces in input
                                    	   203: #
                                    	   204: # Modifies:
                                    	   205: #		a0	- text pointer
                                    	   206: #------------------------------------------------------------------------------
                                    	   207: 
                                    	   208: ignBlanks:
02:0000000000001651 3601008000      	   209: 	push a1
                                    	   210: .0001:
02:0000000000001656 4081000000      	   211: 	ldb a1,[t0]
02:000000000000165B 0482080000      	   212: 	add t0,t0,1
02:0000000000001660 2650F8FBFF7C2000	   213: 	beq a1,' ',.0001
02:0000000000001668 0000
02:000000000000166A 0482F8FF07      	   214: 	sub t0,t0,1
02:000000000000166F 3701008000      	   215: 	pop a1
02:0000000000001674 A304000000      	   216: 	ret
                                    	   217: 
                                    	   218: #------------------------------------------------------------------------------
                                    	   219: # Edit memory byte.
                                    	   220: #------------------------------------------------------------------------------
                                    	   221: 
                                    	   222: EditMem:
02:0000000000001679 A0B0FFFFFF      	   223: 	bsr	ignBlanks
02:000000000000167E A06C020000      	   224: 	bsr	GetHexNumber
02:0000000000001683 8F41000000      	   225: 	mov a2,a1
                                    	   226: edtmem1:
02:0000000000001688 A092FFFFFF      	   227: 	bsr	ignBlanks
02:000000000000168D A04E020000      	   228: 	bsr	GetHexNumber
02:0000000000001692 26200052FE      	   229: 	beq a0,r0,Monitor
02:0000000000001697 5061000000      	   230: 	stb a1,[a2]
02:000000000000169C 8461080000      	   231: 	add a2,a2,1
02:00000000000016A1 A060FFFFFF      	   232: 	bsr	ignBlanks
02:00000000000016A6 A01C020000      	   233: 	bsr	GetHexNumber
02:00000000000016AB 26380044FE      	   234: 	beq a0,r0,Monitor
02:00000000000016B0 5061000000      	   235: 	stb a1,[a2]
02:00000000000016B5 8461080000      	   236: 	add a2,a2,1
02:00000000000016BA A02EFFFFFF      	   237: 	bsr	ignBlanks
02:00000000000016BF A0EA010000      	   238: 	bsr	GetHexNumber
02:00000000000016C4 26300038FE      	   239: 	beq a0,r0,Monitor
02:00000000000016C9 5061000000      	   240: 	stb a1,[a2]
02:00000000000016CE 8461080000      	   241: 	add a2,a2,1
02:00000000000016D3 A0FCFEFFFF      	   242: 	bsr	ignBlanks
02:00000000000016D8 A0B8010000      	   243: 	bsr	GetHexNumber
02:00000000000016DD 2628002CFE      	   244: 	beq a0,r0,Monitor
02:00000000000016E2 5061000000      	   245: 	stb a1,[a2]
02:00000000000016E7 8461080000      	   246: 	add a2,a2,1
02:00000000000016EC A0CAFEFFFF      	   247: 	bsr	ignBlanks
02:00000000000016F1 A086010000      	   248: 	bsr	GetHexNumber
02:00000000000016F6 26200020FE      	   249: 	beq a0,r0,Monitor
02:00000000000016FB 5061000000      	   250: 	stb a1,[a2]
02:0000000000001700 8461080000      	   251: 	add a2,a2,1
02:0000000000001705 A098FEFFFF      	   252: 	bsr	ignBlanks
02:000000000000170A A054010000      	   253: 	bsr	GetHexNumber
02:000000000000170F 26380012FE      	   254: 	beq a0,r0,Monitor
02:0000000000001714 5061000000      	   255: 	stb a1,[a2]
02:0000000000001719 8461080000      	   256: 	add a2,a2,1
02:000000000000171E A066FEFFFF      	   257: 	bsr	ignBlanks
02:0000000000001723 A022010000      	   258: 	bsr	GetHexNumber
02:0000000000001728 26300006FE      	   259: 	beq a0,r0,Monitor
02:000000000000172D 5061000000      	   260: 	stb a1,[a2]
02:0000000000001732 8461080000      	   261: 	add a2,a2,1
02:0000000000001737 A034FEFFFF      	   262: 	bsr	ignBlanks
02:000000000000173C A0F0000000      	   263: 	bsr	GetHexNumber
02:0000000000001741 262800FAFD      	   264: 	beq a0,r0,Monitor
02:0000000000001746 5061000000      	   265: 	stb a1,[a2]
02:000000000000174B 8461080000      	   266: 	add a2,a2,1
02:0000000000001750 20CCF7FFFF      	   267: 	bra	Monitor
                                    	   268: 
                                    	   269: #------------------------------------------------------------------------------
                                    	   270: # Execute code at the specified address.
                                    	   271: #------------------------------------------------------------------------------
                                    	   272: 
                                    	   273: ExecuteCode:
02:0000000000001755 A0F8FDFFFF      	   274: 	bsr	ignBlanks
02:000000000000175A A0B4000000      	   275: 	bsr	GetHexNumber
02:000000000000175F 263800EAFD      	   276: 	beq a0,r0,Monitor
02:0000000000001764 981C000400      	   277: 	jsr	[a1]
02:0000000000001769 209AF7FFFF      	   278: 	bra Monitor
                                    	   279: 
                                    	   280: #------------------------------------------------------------------------------
                                    	   281: # Do a memory dump of the requested location.
                                    	   282: #------------------------------------------------------------------------------
                                    	   283: 
                                    	   284: DumpMem:
02:000000000000176E A0C6FDFFFF      	   285: 	bsr	ignBlanks
02:0000000000001773 A082000000      	   286: 	bsr	GetHexNumber
02:0000000000001778 263000DEFD      	   287: 	beq a0,r0,Monitor		# was there a number ? Digits > 0?
02:000000000000177D 8F41000000      	   288: 	mov a2,a1						# save off start of range
02:0000000000001782 A09EFDFFFF      	   289: 	bsr	ignBlanks
02:0000000000001787 A05A000000      	   290: 	bsr	GetHexNumber
02:000000000000178C 2730000400      	   291: 	bne a0,r0,DumpMem1	# was there a number ? Digits > 0?
02:0000000000001791 0474000200      	   292: 	add a3,a2,64				# no end specified, just dump 64 bytes
                                    	   293: DumpMem1:
02:0000000000001796 8F60000000      	   294: 	mov a0,a2
02:000000000000179B 0F01050000      	   295: 	mov a1,a3
02:00000000000017A0 A018DDFFFF      	   296: 	bsr	CRLF
                                    	   297: .0001:
02:00000000000017A5 2B2910C8FD      	   298: 	bgtu a0,a1,Monitor
02:00000000000017AA A0EA010000      	   299: 	bsr	DisplayMem
02:00000000000017AF 20ECFFFFFF      	   300: 	bra	.0001
                                    	   301: 
                                    	   302: 
                                    	   303: #------------------------------------------------------------------------------
                                    	   304: # Get a hexidecimal number. Maximum of eight digits.
                                    	   305: #
                                    	   306: # Returns:
                                    	   307: #		a0 = number of digits
                                    	   308: #		a1 = value of number
                                    	   309: #------------------------------------------------------------------------------
                                    	   310: 
                                    	   311: GetHexNumber:
02:00000000000017B4 36A3000001      	   312: 	push t2,t1
02:00000000000017B9 0403000000      	   313: 	ldi t2,0
02:00000000000017BE 8402000000      	   314: 	ldi t1,0							# number of digits
                                    	   315: .0002:
02:00000000000017C3 4081000000      	   316: 	ldb a1,[t0]
02:00000000000017C8 0482080000      	   317: 	add t0,t0,1
02:00000000000017CD A0AE010000      	   318: 	bsr	AsciiToHexNybble
02:00000000000017D2 2640F815007CFF00	   319: 	beq a1,0xff,.0001
02:00000000000017DA 0000
02:00000000000017DC 5803200001      	   320: 	asl t2,t2,4
02:00000000000017E1 0841780000      	   321: 	and a1,a1,0xf
02:00000000000017E6 02C3100800      	   322: 	or t2,t2,a1
02:00000000000017EB 84A2080000      	   323: 	add t1,t1,1
02:00000000000017F0 28B8F8E9FF7C1000	   324: 	blt t1,16,.0002
02:00000000000017F8 0000
                                    	   325: .0001:
02:00000000000017FA 0FC1000000      	   326: 	mov a1,t2
02:00000000000017FF 8FA0000000      	   327: 	mov a0,t1
02:0000000000001804 37A3000001      	   328: 	pop t2,t1
02:0000000000001809 A304000000      	   329: 	ret
                                    	   330: 
                                    	   331: #------------------------------------------------------------------------------
                                    	   332: # Get a decimal number. Maximum of 20 digits.
                                    	   333: #
                                    	   334: # Returns:
                                    	   335: #		a0 = number of digits
                                    	   336: #		a1 = value of number
                                    	   337: #------------------------------------------------------------------------------
                                    	   338: 
                                    	   339: GetDecNumber:
02:000000000000180E 36A3000001      	   340: 	push t2,t1
02:0000000000001813 0403000000      	   341: 	ldi t2,0
02:0000000000001818 8402000000      	   342: 	ldi t1,0							# number of digits
                                    	   343: .0002:
02:000000000000181D 4081000000      	   344: 	ldb a1,[t0]
02:0000000000001822 0482080000      	   345: 	add t0,t0,1
02:0000000000001827 2850F819007C3000	   346: 	blt a1,'0',.0001
02:000000000000182F 0000
02:0000000000001831 2B40F815007C3900	   347: 	bgt a1,'9',.0001
02:0000000000001839 0000
02:000000000000183B 044180FE07      	   348: 	sub a1,a1,'0'
02:0000000000001840 06C3500000      	   349: 	mul t2,t2,10
02:0000000000001845 02C3102000      	   350: 	add t2,t2,a1
02:000000000000184A 84A2080000      	   351: 	add t1,t1,1
02:000000000000184F 28B0F8E7FF7C1800	   352: 	blt t1,24,.0002
02:0000000000001857 0000
                                    	   353: .0001:
02:0000000000001859 0FC1000000      	   354: 	mov a1,t2
02:000000000000185E 8FA0000000      	   355: 	mov a0,t1
02:0000000000001863 37A3000001      	   356: 	pop t2,t1
02:0000000000001868 A304000000      	   357: 	ret
                                    	   358: 
                                    	   359: #------------------------------------------------------------------------------
                                    	   360: # Returns:
                                    	   361: #		a0 = start of range
                                    	   362: #		a1 = end of range
                                    	   363: #------------------------------------------------------------------------------
                                    	   364: 
                                    	   365: GetRange:
02:000000000000186D B61C008000      	   366: 	push lr1
02:0000000000001872 A0BEFBFFFF      	   367: 	bsr ignBlanks
02:0000000000001877 A07AFEFFFF      	   368: 	bsr GetHexNumber
02:000000000000187C 3601008000      	   369: 	push a1
02:0000000000001881 A0A0FBFFFF      	   370: 	bsr ignBlanks
02:0000000000001886 A05CFEFFFF      	   371: 	bsr GetHexNumber
02:000000000000188B B700008000      	   372: 	pop a0
02:0000000000001890 B71C008000      	   373: 	pop lr1
02:0000000000001895 A304000000      	   374: 	ret
                                    	   375: 
                                    	   376: LoadS19:
02:000000000000189A A304000000      	   377: 	ret
                                    	   378: 
                                    	   379: DisplayMem:
02:000000000000189F A304000000      	   380: 	ret
                                    	   381: 
                                    	   382: AsciiToHexNybble:
02:00000000000018A4 A304000000      	   383: 	ret
                                    	   384: 
                                    	   385: 	.global GetRange
                                    	   386: 

Source: "boot.asm"
                                    	   511: 
                                    	   512: 	.balign	0x100,0xff
                                    	   513: 	
                                    	   514: 	.rodata
                                    	   515: msgStart:
03:00000000000003DB 54686F7232303234	   516: 	.byte "Thor2024 System Starting.",0
03:00000000000003E3 2053797374656D20
03:00000000000003EB 5374617274696E67
03:00000000000003F3 2E
03:00000000000003F4 00
                                    	   517: 
03:00000000000003F5 00              	   518: 	.org 0xffe0
03:00000000000003F6 *
                                    	   519: 	# initial machine stack pointer
03:000000000000FFE0 F0FFFCFFFFFFFFFF	   520: 	.8byte	0xFFFFFFFFFFFCFFF0
03:000000000000FFE8 FFFFFFFFFFFFFFFF	   521: 	.8byte	0xFFFFFFFFFFFFFFFF
                                    	   522: 	# initial program counter
03:000000000000FFF0 000000D0FFFFFFFF	   523: 	.8byte	0xFFFFFFFFD0000000
03:000000000000FFF8 FFFFFFFFFFFFFFFF	   524: 	.8byte	0xFFFFFFFFFFFFFFFF
                                    	   525: 
                                    	   526: 	.global Delay3s
                                    	   527: 	.global Delay
                                    	   528: 


Symbols by name:
.sgc2                           02:0000000000000837
.sgcNoChars                     02:0000000000000887
.spcNoChars                     02:00000000000008CD
.srcXit                         02:00000000000007BF
.st1                            02:00000000000001AE
.st2                            02:00000000000000BE
ACIA_CMD                         S:00000000FED00008
ACIA_CTRL                        S:00000000FED0000C
ACIA_RX                          S:00000000FED00000
ACIA_STAT                        S:00000000FED00004
ACIA_TX                          S:00000000FED00000
ACK                              S:0000000000000006
AsciiToHexNybble                02:00000000000018A4
B0003                           02:0000000000000F44
B0013                           02:0000000000000FF8
BlankLastLine                   02:0000000000000596
CAN                              S:0000000000000018
CR                               S:000000000000000D
CRLF                            02:000000000000062C
CTRLH                            S:0000000000000008
CTRLX                            S:0000000000000018
CalcScreenLoc                   02:00000000000001C2
CheckForKey                     02:0000000000000ED1
ClearScreen                     02:0000000000000190
CmdBuf                           S:00000000FFFC0480
CmdBufEnd                        S:00000000FFFC0500
CursorCol                        S:00000000FFFC0401
CursorRow                        S:00000000FFFC0400
Delay                           02:0000000000000172 EXP
Delay3s                         02:0000000000000168 EXP
DisplayByte                     02:000000000000067C
DisplayChar                     02:0000000000000217
DisplayHelp                     02:000000000000146C
DisplayMem                      02:000000000000189F
DisplayNybble                   02:000000000000064F
DisplayOcta                     02:00000000000006E5
DisplayString                   02:0000000000000604
DisplayTetra                    02:00000000000006C2
DisplayWyde                     02:000000000000069F
DumpMem                         02:000000000000176E
DumpMem1                        02:0000000000001796
EOT                              S:0000000000000004
ETB                              S:0000000000000017
EditMem                         02:0000000000001679
ExcHandler                      02:0000000000000710
ExecuteCode                     02:0000000000001755
FillMem                         02:000000000000157F
GetCmdLine                      02:000000000000147B
GetDecNumber                    02:000000000000180E
GetHexNumber                    02:00000000000017B4
GetKey                          02:0000000000000EEA
GetNumber                       02:0000000000000708
GetRange                        02:000000000000186D EXP
HelpMsg                         03:0000000000000340
IncCursorPos                    02:000000000000047E
IncCursorPos1                   02:000000000000051E
IncCursorRow                    02:00000000000004C4
InitSerial                      02:0000000000000715
KEYBD                            S:00000000FEDC0000
KeybdGetChar                    02:0000000000000F3F
KeybdGetCharNoWait              02:0000000000000F21
KeybdGetCharWait                02:0000000000000F30
KeybdLEDs                        S:00000000FFFC0424
KeybdRecvByte                   02:0000000000000E4F
KeybdSendByte                   02:0000000000001309
KeybdSetLEDStatus               02:0000000000001264
KeybdWaitFlag                    S:00000000FFFC0423
KeybdWaitTx                     02:0000000000000E90
LF                               S:000000000000000A
LoadS19                         02:000000000000189A
Monitor                         02:0000000000001336
NAK                              S:0000000000000015
Prompt1                         02:0000000000001386
Prompt2                         02:00000000000013B8
Prompt3                         02:000000000000136D
PromptLn                        02:000000000000135E
SC_ALT                           S:0000000000000011
SC_CAPSLOCK                      S:0000000000000058
SC_CTRL                          S:0000000000000014
SC_EXTEND                        S:00000000000000E0
SC_KEYUP                         S:00000000000000F0
SC_LSHIFT                        S:0000000000000012
SC_NUMLOCK                       S:0000000000000077
SC_RSHIFT                        S:0000000000000059
SC_SCROLLLOCK                    S:000000000000007E
SC_TAB                           S:000000000000000D
SOH                              S:0000000000000001
ScrollUp                        02:0000000000000528
SerHeadRcv                       S:00000000FFFC0004
SerHeadXmit                      S:00000000FFFC000C
SerRcvBuf                        S:00000000FFFC1000
SerRcvXoff                       S:00000000FFFC0011
SerRcvXon                        S:00000000FFFC0010
SerTailRcv                       S:00000000FFFC0000
SerTailXmit                      S:00000000FFFC0008
SerialGetChar                   02:00000000000007C4
SerialIRQ                       02:0000000000000931
SerialInit                      02:0000000000000715 EXP
SerialPeekChar                  02:000000000000089B
SerialPeekCharDirect            02:00000000000008D7
SerialPutBuf                    02:0000000000000A35 EXP
SerialPutChar                   02:0000000000000904
SerialPutString                 02:00000000000009E0 EXP
SerialRcvCount                  02:0000000000000779
SerialTest                      02:0000000000000A8F EXP
StartMon                        02:0000000000001336
SyncCursor                      02:00000000000005EB
TestCLS                         02:000000000000143A
TextAttr                         S:00000000FFFC0410
TextCols                         S:00000000FFFC0403
TextCurpos                       S:00000000FFFC0404
TextRows                         S:00000000FFFC0402
TextScr                          S:00000000FFFC0408
Wait10ms                        02:0000000000001318
XOFF                             S:0000000000000013
XON                              S:0000000000000011
_KeyState1                       S:00000000FFFC0420
_KeyState2                       S:00000000FFFC0421
_KeybdEcho                       S:00000000FFFC0422
_KeybdGetScancode               02:0000000000000E31
_KeybdGetStatus                 02:0000000000000E22
_KeybdInit                      02:0000000000000E09
_keybdControlCodes              03:0000000000000240
_keybdExtendedCodes             03:00000000000002C0
_shiftedScanCodes               03:0000000000000140
_unshiftedScanCodes             03:0000000000000040
ary                              S:00000000FFFC0000
doAlt                           02:0000000000001129
doBackspace                     02:00000000000003C5
doCapsLock                      02:000000000000121E
doCtrl                          02:00000000000010D4
doCtrlX                         02:000000000000043D
doDelete                        02:00000000000003F2
doExtend                        02:00000000000010B6
doKeyup                         02:00000000000010A2
doNumLock                       02:00000000000011FB
doRet                           02:000000000000018B
doScrollLock                    02:0000000000001241
doShift                         02:00000000000011A6
doTab                           02:000000000000117E
edtmem1                         02:0000000000001688
floop                           02:0000000000000118
fmemB                           02:0000000000001638
fmemO                           02:00000000000015ED
fmemT                           02:0000000000001606
fmemW                           02:000000000000161F
ignBlanks                       02:0000000000001651
leds                             S:00000000FEDFFF00
msgStart                        03:00000000000003DB
msgXmNoTransmitter              03:000000000000001B
msgXmTimeout                    03:0000000000000007
nmeSerial                       03:0000000000000000
stall                           02:0000000000000163
start                           02:0000000000000000
txtscreen                        S:00000000FEC00000
xm_EOT                          02:0000000000000D14
xm_ReceiveStart                 02:0000000000000B9D
xm_SOH                          02:0000000000000C38
xm_SendStart                    02:0000000000000A9E
xm_calc_checksum                02:0000000000000D5A
xm_calc_crc                     02:0000000000000DA0
xm_checksum                      S:00000000FFFC0030
xm_crc                           S:00000000FFFC0058
xm_crc1                         02:0000000000000DAF
xm_crc3                         02:0000000000000DD2
xm_crc4                         02:0000000000000DC3
xm_cs1                          02:0000000000000D69
xm_gb1                          02:0000000000000B6B
xm_gb2                          02:0000000000000B8E
xm_getbyte                      02:0000000000000B66
xm_noTransmitter                02:0000000000000D4B
xm_rcv1                         02:0000000000000BF7
xm_rcv2                         02:0000000000000C6F
xm_rcv3                         02:0000000000000CD8
xm_rcv4                         02:0000000000000BED
xm_rcv5                         02:0000000000000BE3
xm_rcv_chksum                   02:0000000000000CCE
xm_rcv_nak                      02:0000000000000C29
xm_rcv_to1                      02:0000000000000D05
xm_rcv_to2                      02:0000000000000D05
xm_receive                      02:0000000000000BDE
xm_retry1                       02:0000000000000D23
xm_send                         02:0000000000000AB2
xm_send2                        02:0000000000000B1B
xm_send3                        02:0000000000000B20
xm_send4                        02:0000000000000AD0
xm_send5                        02:0000000000000ACB
xm_timer                         S:00000000FFFC0020

Symbols by value:
00000000FEC00000 txtscreen
00000000FED00000 ACIA_TX
00000000FED00000 ACIA_RX
00000000FED00004 ACIA_STAT
00000000FED00008 ACIA_CMD
00000000FED0000C ACIA_CTRL
00000000FEDC0000 KEYBD
00000000FEDFFF00 leds
00000000FFFC0000 ary
00000000FFFC0000 SerTailRcv
00000000FFFC0004 SerHeadRcv
00000000FFFC0008 SerTailXmit
00000000FFFC000C SerHeadXmit
00000000FFFC0010 SerRcvXon
00000000FFFC0011 SerRcvXoff
00000000FFFC0020 xm_timer
00000000FFFC0030 xm_checksum
00000000FFFC0058 xm_crc
00000000FFFC0400 CursorRow
00000000FFFC0401 CursorCol
00000000FFFC0402 TextRows
00000000FFFC0403 TextCols
00000000FFFC0404 TextCurpos
00000000FFFC0408 TextScr
00000000FFFC0410 TextAttr
00000000FFFC0420 _KeyState1
00000000FFFC0421 _KeyState2
00000000FFFC0422 _KeybdEcho
00000000FFFC0423 KeybdWaitFlag
00000000FFFC0424 KeybdLEDs
00000000FFFC0480 CmdBuf
00000000FFFC0500 CmdBufEnd
00000000FFFC1000 SerRcvBuf
0000000000000000 start
0000000000000000 nmeSerial
0000000000000001 SOH
0000000000000004 EOT
0000000000000006 ACK
0000000000000007 msgXmTimeout
0000000000000008 CTRLH
000000000000000A LF
000000000000000D CR
000000000000000D SC_TAB
0000000000000011 SC_ALT
0000000000000011 XON
0000000000000012 SC_LSHIFT
0000000000000013 XOFF
0000000000000014 SC_CTRL
0000000000000015 NAK
0000000000000017 ETB
0000000000000018 CTRLX
0000000000000018 CAN
000000000000001B msgXmNoTransmitter
0000000000000040 _unshiftedScanCodes
0000000000000058 SC_CAPSLOCK
0000000000000059 SC_RSHIFT
0000000000000077 SC_NUMLOCK
000000000000007E SC_SCROLLLOCK
00000000000000BE .st2
00000000000000E0 SC_EXTEND
00000000000000F0 SC_KEYUP
0000000000000118 floop
0000000000000140 _shiftedScanCodes
0000000000000163 stall
0000000000000168 Delay3s
0000000000000172 Delay
000000000000018B doRet
0000000000000190 ClearScreen
00000000000001AE .st1
00000000000001C2 CalcScreenLoc
0000000000000217 DisplayChar
0000000000000240 _keybdControlCodes
00000000000002C0 _keybdExtendedCodes
0000000000000340 HelpMsg
00000000000003C5 doBackspace
00000000000003DB msgStart
00000000000003F2 doDelete
000000000000043D doCtrlX
000000000000047E IncCursorPos
00000000000004C4 IncCursorRow
000000000000051E IncCursorPos1
0000000000000528 ScrollUp
0000000000000596 BlankLastLine
00000000000005EB SyncCursor
0000000000000604 DisplayString
000000000000062C CRLF
000000000000064F DisplayNybble
000000000000067C DisplayByte
000000000000069F DisplayWyde
00000000000006C2 DisplayTetra
00000000000006E5 DisplayOcta
0000000000000708 GetNumber
0000000000000710 ExcHandler
0000000000000715 InitSerial
0000000000000715 SerialInit
0000000000000779 SerialRcvCount
00000000000007BF .srcXit
00000000000007C4 SerialGetChar
0000000000000837 .sgc2
0000000000000887 .sgcNoChars
000000000000089B SerialPeekChar
00000000000008CD .spcNoChars
00000000000008D7 SerialPeekCharDirect
0000000000000904 SerialPutChar
0000000000000931 SerialIRQ
00000000000009E0 SerialPutString
0000000000000A35 SerialPutBuf
0000000000000A8F SerialTest
0000000000000A9E xm_SendStart
0000000000000AB2 xm_send
0000000000000ACB xm_send5
0000000000000AD0 xm_send4
0000000000000B1B xm_send2
0000000000000B20 xm_send3
0000000000000B66 xm_getbyte
0000000000000B6B xm_gb1
0000000000000B8E xm_gb2
0000000000000B9D xm_ReceiveStart
0000000000000BDE xm_receive
0000000000000BE3 xm_rcv5
0000000000000BED xm_rcv4
0000000000000BF7 xm_rcv1
0000000000000C29 xm_rcv_nak
0000000000000C38 xm_SOH
0000000000000C6F xm_rcv2
0000000000000CCE xm_rcv_chksum
0000000000000CD8 xm_rcv3
0000000000000D05 xm_rcv_to1
0000000000000D05 xm_rcv_to2
0000000000000D14 xm_EOT
0000000000000D23 xm_retry1
0000000000000D4B xm_noTransmitter
0000000000000D5A xm_calc_checksum
0000000000000D69 xm_cs1
0000000000000DA0 xm_calc_crc
0000000000000DAF xm_crc1
0000000000000DC3 xm_crc4
0000000000000DD2 xm_crc3
0000000000000E09 _KeybdInit
0000000000000E22 _KeybdGetStatus
0000000000000E31 _KeybdGetScancode
0000000000000E4F KeybdRecvByte
0000000000000E90 KeybdWaitTx
0000000000000ED1 CheckForKey
0000000000000EEA GetKey
0000000000000F21 KeybdGetCharNoWait
0000000000000F30 KeybdGetCharWait
0000000000000F3F KeybdGetChar
0000000000000F44 B0003
0000000000000FF8 B0013
00000000000010A2 doKeyup
00000000000010B6 doExtend
00000000000010D4 doCtrl
0000000000001129 doAlt
000000000000117E doTab
00000000000011A6 doShift
00000000000011FB doNumLock
000000000000121E doCapsLock
0000000000001241 doScrollLock
0000000000001264 KeybdSetLEDStatus
0000000000001309 KeybdSendByte
0000000000001318 Wait10ms
0000000000001336 StartMon
0000000000001336 Monitor
000000000000135E PromptLn
000000000000136D Prompt3
0000000000001386 Prompt1
00000000000013B8 Prompt2
000000000000143A TestCLS
000000000000146C DisplayHelp
000000000000147B GetCmdLine
000000000000157F FillMem
00000000000015ED fmemO
0000000000001606 fmemT
000000000000161F fmemW
0000000000001638 fmemB
0000000000001651 ignBlanks
0000000000001679 EditMem
0000000000001688 edtmem1
0000000000001755 ExecuteCode
000000000000176E DumpMem
0000000000001796 DumpMem1
00000000000017B4 GetHexNumber
000000000000180E GetDecNumber
000000000000186D GetRange
000000000000189A LoadS19
000000000000189F DisplayMem
00000000000018A4 AsciiToHexNybble
