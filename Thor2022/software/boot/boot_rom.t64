	.set	CSR_MTVEC,0x3030
	.set	CSR_MGDT,0x3051
	.set	IOBASE,0xFF800000
	.set	RODATABASE,0xFFFE0000
	.set	LEDS,0xFFFFFFFFFF910000

	.bss
_bss_a:
	.space	10

	.data
_data_a:
	.space	10

	.text
	.align	2
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
	jmp			MachineStart
	nop
	nop
	nop

MachineStart:
  # Map 4kB GDT area
#	ldi			$t0,#$8000000000000C00	# entry number = $000, way = 3, write = true
#	ldi			$t1,#$008E000000000000
#	tlbrw		$x0,$t0,$t1
#	FFFC0000
#	1111_1111_1111_1100_0000_0000_0000_0000
#	1111_1111_11_11_1100_0000
	ldi			t0,0x8000000000000FC0		# entry number = $3C0, way = 3, write = true
	jmp			ms1
ms1:
	ldi			t1,0x008E000FFC0FFFC0
	tlbrw		r0,t0,t1
#	add			t0,t0,1
#	tlbrw		x0,t0,t1
#	add			t0,t0,1
#	tlbrw		x0,t0,t1
#	add			t0,t0,1
#	tlbrw		x0,t0,t1
	# Setup segments, codeseg already set at reset.
	# set data segment
	ldi			a2,0xFFFFFFFFFFFFFFC0			# start of scratchpad area
	csrrw		r0,a2,CSR_MGDT
	sllp		a2,r0,a2,12						# align
	and			a2,a2,-256
	ldi			a1,0x0000000000000000	# 0MB boundary
	sto			a1,0000*32[a2]
	sto			a1,0000*32+8[a2]
	ldi			a1,0xFFFFFFFFFFFFFFFF	# All - debug mode only
	sto			a1,0000*32+16[a2]
	ldi			a1,0x8EFF000000000000	# R/W cacheable data segment
	sto			a1,0000*32+24[a2]
	ldi			a0,001								# DS
	ldi			a1,0xFF000000
	mtsel		a0,a1
	# set stack segment
	ldi			a1,0xFFFC7000>>6			# last 4kB of bss
	sto			a1,0003*32[a2]
	ldi			a1,0
	sto			a1,0003*32+8[a2]
	ldi			a1,0x0000000000001000	# 4kB top of stack limit
	sto			a1,0003*32+16[a2]
	ldi			a1,0x8EFF000000000000	# R/W cacheable data segment
	sto			a1,0003*32+24[a2]
	ldi			a0,006								# SS
	ldi			a1,0xFF000003					#
	mtsel		a0,a1
	# set io segment
	ldi			a1,IOBASE>>6
	sto			a1,0004*32[a2]
	ldi			a1,0
	sto			a1,0004*32+8[a2]
	ldi			a1,0x00000000007FFFFF	# 8MB
	sto			a1,0004*32+16[a2]			# set limit
	ldi			a1,0x86FF000000000000	# R/W non-cacheable data segment
	sto			a1,0004*32+24[a2]
	ldi			a0,005								# HS
	ldi			a1,0xFF000004					# Max priv.
	mtsel		a0,a1
	# set read-only segment
	ldi			a1,RODATABASE>>6			#
	sto			a1,0005*32[a2]
	ldi			a1,0
	sto			a1,0005*32+8[a2]
	ldi			a1,0x000000000001FFFF	# 128kB
	sto			a1,0005*32+16[a2]
	ldi			a1,0x8CFF000000000000	# R-only cacheable data segment
	sto			a1,0005*32+24[a2]
	ldi			a0,2
	ldi			a1,0xFF000005
	mtsel		a0,a1
  # Map 32kB scratchpad stack area into stack segment
#	FFFC8000
#	1111_1111_1111_1100_1000_0000_0000_0000
#	1111_1111_11_11_1100_1000
	ldi			t0,0x8000000000000FC8		# entry number = $, way = 3, write = true
	ldi			t1,0x008E000FFC0FFFC8
	ldi			r58,7
.0001:
	tlbrw		r0,t0,t1
	add			t0,t0,1							# map next 4kB
	add			t1,t1,1
	dbra		.0001

	# Map LEDS
	# FF910000
	# 1111_1111_10 01_0001_0000_ 0000_0000_0000
	ldi			t0,0x8000000000000D10	# entry number = $110, way = 3, write = true
	ldi			t1,0x008E000FF80FF910
	tlbrw		r0,t0,t1

	# Map text screen - first 24kB
	# FF800000
	# 1111_1111_10 00_0000_0000 _0000_0000_0000
	ldi			t0,0x8000000000000C00	# entry number = $000, way = 3, write = true
	ldi			t1,0x008E000FF80FF800
	ldi			r58,5
.0003:
	tlbrw		r0,t0,t1
	add			t0,t0,1							# map next 4kB
	add			t1,t1,1
	dbra		.0003

	# Map text registers
	ldi			t0,0x8000000000000C1D	# entry number = $000, way = 3, write = true
	ldi			t1,0x008E000FF80FF81D
	tlbrw		r0,t0,t1

	# Map Sprite registers
	ldi			t0,0x8000000000000CB0	# entry number = $0B0, way = 3, write = true
	ldi			t1,0x008E000FF80FF8B0
	tlbrw		r0,t0,t1

	# Setup trap vector
	lea			a1,IRQRout
	csrrw		r0,a1,CSR_MTVEC
	csrrw		r0,a1,CSR_MTVEC+2
	csrrw		r0,a1,CSR_MTVEC+4
	csrrw		r0,a1,CSR_MTVEC+6
	ldi			a1,0xFF000000
	csrrw		r0,a1,CSR_MTVEC+1
	csrrw		r0,a1,CSR_MTVEC+3
	csrrw		r0,a1,CSR_MTVEC+5
	csrrw		r0,a1,CSR_MTVEC+7

	# Setup debug mode stack pointer. The debug stack is set to a high order
	# address in the scratchpad memory area.
	ldi			sp,0xFF8

  ldi   	t0,0xAA
  stb   	t0,LEDS
  ldi   	a0,0xAA
  stb   	a0,LEDS
.0002:
	jmp			_main
	bra			.0002
	.type		MachineStart,@function
	.size		MachineStart,$-MachineStart
	
	.align	8
IRQRout:
	ldi			a1,0x03FFFE0003FF0055
	sto			a1,0xff800000
.0004:
	bra			.0004
	.align	6
IRQRoutM1:
	ldi			a1,0x03FFFE0003FF0053
	sto			a1,0xff800000
.0004:
	bra			.0004
	.align	6
IRQRoutM2:
	ldi			a1,0x03FFFE0003FF0048
	sto			a1,0xff800000
.0004:
	bra			.0004
	.align	6
IRQRoutM3:
	ldi			a1,0x03FFFE0003FF004D
	sto			a1,0xff800000
.0004:
	bra			.0004
	.type		IRQRout,@function
	.size		IRQRout,$-IRQRout

_MapPage:
	ldh			a0,0[sp]
	ldh			a1,16[sp]
	tlbrw		a0,a0,a1
	add			sp,sp,32
	rts
	.type		_MapPage,@function
	.size		_MapPage,$-_MapPage
