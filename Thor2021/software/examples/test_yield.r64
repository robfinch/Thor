 
	.bss
	.align	8

	.bss
	.type	_Astack,@object
	.size	_Astack,8192
_Astack:

	.space	8192,0x00                    

 
	.align	8

	.bss
	.type	_Bstack,@object
	.size	_Bstack,8192
_Bstack:

	.space	8192,0x00                    

    
#{++ _A

	.data
	.align	8
Co_A_target:
	.8byte	Co_A_first
Co_A_orig_lr:
	.8byte	0
Co_A_orig_fp:
	.8byte	0
Co_A_orig_sp:
	.8byte	0
Co_A_fp_save:
	.8byte	0
Co_A_sp_save:
	.8byte	0

	.data
	.align	8
Co_B_target:
	.8byte	Co_B_first
Co_B_orig_lr:
	.8byte	0
Co_B_orig_fp:
	.8byte	0
Co_B_orig_sp:
	.8byte	0
Co_B_fp_save:
	.8byte	0
Co_B_sp_save:
	.8byte	0


	.text

	.global _A

	.sdreg	61
#====================================================
# Basic Block 0
#====================================================
_A:
  ldi      gp,_data_start
  ldo      t0,Co_A_target[gp]
  csrrw    r0,t0,12552
  jmp      [ca4]
Co_A_first:
  csrrw    t0,r0,12546
  sto      t0,Co_A_orig_lr[gp]
  sto      fp,Co_A_orig_fp[gp]
  sto      sp,Co_A_orig_sp[gp]
  lea      t1,_Astack[gp]
  add      t0,t1,8192
  sub      sp,sp,96
  sto      fp,[sp]
  mov      fp,sp
  sub      sp,sp,8
  ldi      t1,.C00012
  sto      t1,32[fp]
  #         forever {
.C00014:
  #         yield B();
  ldi      t1,.C00016
  sto      t1,Co_A_target[gp]
  sto      t0,-8[fp]
  sto      fp,Co_A_fp_save[gp]
  sto      sp,Co_A_sp_save[gp]
  jmp      _B
.C00016:
  ldo      fp,Co_A_fp_save[gp]
  ldo      sp,Co_A_sp_save[gp]
  ldo      t0,-8[fp]
  bra      .C00014
  #         return (0);
  mov      a0,r0
.C00013:
  ldi      t0,Co_A_first
  sto      t0,Co_A_target[gp]
  ldo      t0,Co_A_orig_lr[gp]
  csrrw    r0,t0,12546
  ldo      fp,Co_A_orig_fp[gp]
  ldo      sp,Co_A_orig_sp[gp]
  add      sp,sp,96
  ret    
  bra      .C00013
.C00012:
  jsr      lk2,_DEFCAT
  bra      .C00013
	.type	_A,@function
	.size	_A,$-_A


#--}
  
#{++ _B

	.text

	.global _B

	.sdreg	61
#====================================================
# Basic Block 0
#====================================================
_B:
  ldi      gp,_data_start
  ldo      t0,Co_B_target[gp]
  csrrw    r0,t0,12552
  jmp      [ca4]
Co_B_first:
  csrrw    t0,r0,12546
  sto      t0,Co_B_orig_lr[gp]
  sto      fp,Co_B_orig_fp[gp]
  sto      sp,Co_B_orig_sp[gp]
  lea      t1,_Bstack[gp]
  add      t0,t1,8192
  sub      sp,sp,96
  sto      fp,[sp]
  mov      fp,sp
  sub      sp,sp,8
  ldi      t1,.C00028
  sto      t1,32[fp]
  #         forever {
.C00030:
  #         yield A();
  ldi      t1,.C00032
  sto      t1,Co_B_target[gp]
  sto      t0,-8[fp]
  sto      fp,Co_B_fp_save[gp]
  sto      sp,Co_B_sp_save[gp]
  jmp      _A
.C00032:
  ldo      fp,Co_B_fp_save[gp]
  ldo      sp,Co_B_sp_save[gp]
  ldo      t0,-8[fp]
  bra      .C00030
.C00031:
.C00029:
  ldi      t1,Co_B_first
  sto      t1,Co_B_target[gp]
  ldo      t1,Co_B_orig_lr[gp]
  csrrw    r0,t1,12546
  ldo      fp,Co_B_orig_fp[gp]
  ldo      sp,Co_B_orig_sp[gp]
  add      sp,sp,96
  ret    
.C00028:
  jsr      lk2,_DEFCAT
  bra      .C00029
	.type	_B,@function
	.size	_B,$-_B


#--}
 
#{++ _main

	.global _main

	.sdreg	61
 #====================================================
# Basic Block 0
#====================================================
_main:
  sub      sp,sp,96
  sto      fp,[sp]
  mov      fp,sp
  sub      sp,sp,8
  csrrw    t0,r0,12546
  sto      t0,16[fp]
  ldi      t0,.C00041
  sto      t0,32[fp]
  sto      s0,0[sp]
  #         int x;
  #         x = A();
  jsr      lk1,_A
  mov      t0,a0
  mov      s0,t0
  #         return (x);
  mov      a0,s0
.C00042:
  ldo      s0,0[sp]
  mov      sp,fp
  ldo      fp,[sp]
  ldo      t0,16[fp]
  csrrw    r0,t0,12546
  add      sp,sp,96
  ret    
  bra      .C00042
.C00041:
  jsr      lk2,_DEFCAT
  bra      .C00042
	.type	_main,@function
	.size	_main,$-_main


#--}

	.rodata
	.align	16

