                                                                                                                         
	.bss
	.align	2

	.bss
.lcomm _N,16
	.type	_N,@object
	.size	_N,16


 
	.align	8

	.bss
.lcomm _t,16
	.type	_t,@object
	.size	_t,16


   
#{++ _chk

	.text
	.align	0

	.align 5

	.sdreg	61
  #====================================================
# Basic Block 0
#====================================================
_chk:
  sub      sp,sp,64
  sth      fp,[sp]
  mov      fp,sp
  sub      sp,sp,176
  lea      gp,_bss_start
  bsr      lr2,store_s0s6
  ldh      s2,16[fp]
  ldh      s3,0[fp]
  ldi      s4,8
  ldi      s5,3
  ldi      s6,4
# for (r=i=0; i<8; i++) {
  mov      s0,r0
  mov      s1,s0
  bge      s0,s4,.00039
.00038:
# r = r + t[x + 8*i];
  ldh      t1,_t[gp]
  asl      t4,s0,s5
  add      t3,s3,t4
  asl      t2,t3,s6
  ldh      t1,0[t1+t2*]
  add      s1,s1,t1
# r = r + t[i + 8*y];
  ldh      t1,_t[gp]
  asl      t4,s2,s5
  add      t3,s0,t4
  asl      t2,t3,s6
  ldh      t1,0[t1+t2*]
  add      s1,s1,t1
# if (x+i < 8 & y+i < 8)
  add      t2,s3,s0
  cmp      t1,t2,s4
  extu     t1,t1,2,0
  add      t3,s2,s0
  cmp      t2,t3,s4
  extu     t2,t2,2,0
  and      t0,t1,t2
  beqz     t0,.00041
# r = r + t[x+i + 8*(y+i)];
  ldh      t1,_t[gp]
  add      t4,s3,s0
  add      t6,s2,s0
  asl      t5,t6,s5
  add      t3,t4,t5
  asl      t2,t3,s6
  ldh      t1,0[t1+t2*]
  add      s1,s1,t1
.00041:
# if (x+i < 8 & y-i >= 0)
  add      t2,s3,s0
  cmp      t1,t2,s4
  extu     t1,t1,2,0
  sub      t3,s2,s0
  cmp      t2,t3,r0
  extu     t2,t2,4,0
  and      t0,t1,t2
  beqz     t0,.00047
# r = r + t[x+i + 8*(y-i)];
  ldh      t1,_t[gp]
  add      t4,s3,s0
  sub      t6,s2,s0
  asl      t5,t6,s5
  add      t3,t4,t5
  asl      t2,t3,s6
  ldh      t1,0[t1+t2*]
  add      s1,s1,t1
.00047:
# if (x-i >= 0 & y+i < 8)
  sub      t2,s3,s0
  cmp      t1,t2,r0
  extu     t1,t1,4,0
  add      t3,s2,s0
  cmp      t2,t3,s4
  extu     t2,t2,2,0
  and      t0,t1,t2
  beqz     t0,.00053
# r = r + t[x-i + 8*(y+i)];
  ldh      t1,_t[gp]
  sub      t4,s3,s0
  add      t6,s2,s0
  asl      t5,t6,s5
  add      t3,t4,t5
  asl      t2,t3,s6
  ldh      t1,0[t1+t2*]
  add      s1,s1,t1
.00053:
# if (x-i >= 0 & y-i >= 0)
  sub      t2,s3,s0
  cmp      t1,t2,r0
  extu     t1,t1,4,0
  sub      t3,s2,s0
  cmp      t2,t3,r0
  extu     t2,t2,4,0
  and      t0,t1,t2
  beqz     t0,.00059
# r = r + t[x-i + 8*(y-i)];
  ldh      t1,_t[gp]
  sub      t4,s3,s0
  sub      t6,s2,s0
  asl      t5,t6,s5
  add      t3,t4,t5
  asl      t2,t3,s6
  ldh      t1,0[t1+t2*]
  add      s1,s1,t1
.00059:
  add      s0,s0,1
  blt      s0,s4,.00038
.00039:
# return r;
  mov      a0,s1
.00037:
  bsr      lr2,load_s0s6
  mov      sp,fp
  ldh      fp,[sp]
  add      sp,sp,96
  ret    
	.type	_chk,@function
	.size	_chk,$-_chk


#--}
    
#{++ _go

	.align 5

	.sdreg	61
#====================================================
# Basic Block 0
#====================================================
_go:
  sub      sp,sp,64
  sth      fp,[sp]
  mov      fp,sp
  sub      sp,sp,176
  sth      lr1,0[fp]
  lea      gp,_bss_start
  bsr      lr2,store_s0s6
  ldh      s0,16[fp]
  ldh      s1,32[fp]
  ldi      s2,8
  ldi      s3,1
  ldh      s4,0[fp]
  ldi      s5,3
  ldi      s6,4
# if (n == 8) {
  bne      s4,s2,.00085
# N++;
  ldh      t0,_N[gp]
  add      t0,t0,s3
# return 0;
  mov      a0,r0
.00084:
  bsr      lr2,load_s0s6
  ldh      lr1,0[fp]
  mov      sp,fp
  ldh      fp,[sp]
  add      sp,sp,112
  ret    
.00085:
# for (; y<8; y++) {
  bge      s1,s2,.00088
.00087:
# for (; x<8; x++)
  bge      s0,s2,.00091
.00090:
# if (chk(x, y) == 0) {
  sth      s1,0[sp]
  sth      s0,0[sp]
  jsr      _chk
  mov      t0,a0
  bnez     t0,.00093
# t[x + 8*y]++;
  ldh      t0,_t[gp]
  asl      t3,s1,s5
  add      t2,s0,t3
  asl      t1,t2,s6
  ldh      t2,_t[gp]
  asl      t5,s1,s5
  add      t4,s0,t5
  asl      t3,t4,s6
  ldh      t2,0[t2+t3*]
  add      t2,t2,s3
# go(n+1, x, y);
  sth      s1,0[sp]
  sth      s0,0[sp]
  add      t0,s4,s3
  sth      t0,0[sp]
  jsr      _go
# t[x + 8*y]--;
  ldh      t0,_t[gp]
  asl      t3,s1,s5
  add      t2,s0,t3
  asl      t1,t2,s6
  ldh      t2,_t[gp]
  asl      t5,s1,s5
  add      t4,s0,t5
  asl      t3,t4,s6
  ldh      t2,0[t2+t3*]
  sub      t2,t2,s3
.00093:
  add      s0,s0,s3
  blt      s0,s2,.00090
.00091:
# x = 0;
  mov      s0,r0
  add      s1,s1,s3
  blt      s1,s2,.00087
.00088:
# return 0;
  mov      a0,r0
  beqz     r0,.00084
	.type	_go,@function
	.size	_go,$-_go


#--}
 
#{++ _main

	.align 5

	.sdreg	61
#====================================================
# Basic Block 0
#====================================================
_main:
  sub      sp,sp,64
  sth      fp,[sp]
  mov      fp,sp
  sub      sp,sp,64
  sth      lr1,0[fp]
  lea      gp,_bss_start
# t = calloc(64, sizeof(int));
  ldi      t0,16
  sth      t0,0[sp]
  ldi      t0,64
  sth      t0,0[sp]
  jsr      _calloc
  mov      t0,a0
  sth      t0,_t[gp]
# go(0, 0, 0);
  sth      r0,0[sp]
  sth      r0,0[sp]
  sth      r0,0[sp]
  jsr      _go
# if(N != 92)
  ldh      t0,_N[gp]
  beq      t0,92,.00107
# return 1;
  ldi      a0,1
.00106:
  ldh      lr1,0[fp]
  mov      sp,fp
  ldh      fp,[sp]
  add      sp,sp,64
  ret    
.00107:
# return 0;
  mov      a0,r0
  beqz     r0,.00106
	.type	_main,@function
	.size	_main,$-_main


#--}

	.rodata
	.align	14

	.extern	__Mbxlen
	.extern	__Wcxtomb
	.extern	__Mbxtowc
	.extern	__Randseed
	.extern	__Mbcurmax
