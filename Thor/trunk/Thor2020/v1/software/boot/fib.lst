                        	.file "fib.asm",1
                        	.file "fib.asm",1
                        	        ; Simple Fibonacci number program ported from earlier machines
                        	.file "fib.asm",4
                        	        .code 18 bits
                        	        ORG 0xFFFC0000
FFFC0000 08030050906	        ldi   r10,#RSLTS      ; initialise the results pointer
FFFC0005 001FFE51F06	
FFFC000A 080301F8906	        ldi   r63,#RETSTK     ; initialise the return address stack
FFFC0010 001FFFF9F06	
FFFC0015 00000028906	        ldi   r5,#0           ; Seed fibonacci numbers in r5,r6
FFFC001A 00008030906	        ldi   r6,#1
FFFC0020 0000142E306	        std   r5,[r10]
                        	        ; save r5 and r6 as first resultson results stack
FFFC0025 00041436306	        std   r6,8[r10]
FFFC002A 00041450406	        add   r10,r10,#8
FFFC0030 1FF48020906	        ldi   r4,#-23       ; set up a counter in R4
FFFC0035 1F00120CE06	LP1:    jsr   FIB
FFFC003A 00008020407	        add.  r4,r0,#1
FFFC0040 1F000C04E17	p1.ne   jmp   LP1
                        	           ; another iteration if not zero
FFFC0045 1F001004E07	END1:   jmp   END1
                        	           ; halt    r0,r0,0x999     # Finish simulation
FFFC004A 02400A10206	FIB:    or   r2,r5,r0          ; Fibonacci computation

FFFC0050 01030410206	        add  r2,r2,r6

FFFC0055 00001416306	        std  r2,[r10]
                        	         ; Push result in results stack
FFFC005A 00041450406	        add  r10,r10,#8
FFFC0060 02400C28206	        or   r5,r6,r0         ; Prepare r5,r6 for next iteration

FFFC0065 02400430206	        or   r6,r2,r0

                        	        rts
                        		rodata
                        		align 8
                        	begin_init_data:
                        	_begin_init_data:
                        		rodata
                        		align 8
                        	end_init_data:
                        	_end_init_data:
                        	        .bss
                        	; 8 deep return address stack and stack pointer
                        	RETSTK: WORD 0,0,0,0,0,0,0,0
                        	; stack for results with stack pointer
                        	RSLTS:  WORD 0
                        	.file "fib.asm",1
10 symbols
  Symbol Name                              seg     address bits
  END1                                       code  fffc0045 18
  FIB                                        code  fffc004a 18
  LP1                                        code  fffc0035 18
  RETSTK                                   rodata  fffc1006 32
  RSLTS                                    rodata  fffc1006 32
  WORD                                     rodata  fffc1006 32
  _end_init_data                           rodata  fffc1000 32
  _end_init_data.bss                       rodata  fffc1000 32
  begin_init_data                          rodata  fffc1000 32
  end_init_data                            rodata  fffc1000 32

Undefined Symbols

  Macro Name
0 compressable instructions
The top 1024 are:
Comp  Opcode  Count

Instruction Statistics
Loads:         0 (0.000000%)
Stores:        0 (0.000000%)
  Indexed:     0 (0.000000%)
Pushes:        0 (0.000000%)
Branches:      0 (0.000000%)
  BEQI:		     0 (0.000000%)
  BNEI:		     0 (0.000000%)
  BBc:		     0 (0.000000%)
  BLcc:		     0 (0.000000%)
Calls:		     0 (0.000000%)
Returns:	     0 (0.000000%)
Adds:	         0 (0.000000%)
Ands:	         0 (0.000000%)
Ors:	         0 (0.000000%)
Xors:	         0 (0.000000%)
Lshifts:       0 (0.000000%)
shifts:	       0 (0.000000%)
Luis:	         0 (0.000000%)
Moves:	       0 (0.000000%)
CMoves:	       0 (0.000000%)
Sets:	         0 (0.000000%)
Ptrdif:        0 (0.000000%)
Floatops:      0 (0.000000%)
others:       20 (100.000000%)
Total:        20

number of bytes: 96.000000
number of instructions: 18
number of compressed instructions: 0
5.333333 bytes (42 bits) per instruction
Compression ratio: 0.000000%
Number of long branches: 0
