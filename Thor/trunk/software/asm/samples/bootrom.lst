                  	           		
                  	           		 ; ============================================================================
                  	           		 ;        __
                  	           		 ;   \\__/ o\    (C) 2013  Robert Finch, Stratford
                  	           		 ;    \  __ /    All rights reserved.
                  	           		 ;     \/_//     robfinch<remove>@opencores.org
                  	           		 ;       ||
                  	           		 ;  
                  	           		 ;
                  	           		 ; This source file is free software: you can redistribute it and/or modify 
                  	           		 ; it under the terms of the GNU Lesser General Public License as published 
                  	           		 ; by the Free Software Foundation, either version 3 of the License, or     
                  	           		 ; (at your option) any later version.                                      
                  	           		 ;                                                                          
                  	           		 ; This source file is distributed in the hope that it will be useful,      
                  	           		 ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                  	           		 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                  	           		 ; GNU General Public License for more details.                             
                  	           		 ;                                                                          
                  	           		 ; You should have received a copy of the GNU General Public License        
                  	           		 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                  	           		 ;                                                                          
                  	           		 ; ============================================================================
                  	           		 ;
                  	           		 CR	EQU	0x0D		;ASCII equates
                  	           		 LF	EQU	0x0A
                  	           		 TAB	EQU	0x09
                  	           		 CTRLC	EQU	0x03
                  	           		 CTRLH	EQU	0x08
                  	           		 CTRLI	EQU	0x09
                  	           		 CTRLJ	EQU	0x0A
                  	           		 CTRLK	EQU	0x0B
                  	           		 CTRLM   EQU 0x0D
                  	           		 CTRLS	EQU	0x13
                  	           		 CTRLX	EQU	0x18
                  	           		 XON		EQU	0x11
                  	           		 XOFF	EQU	0x13
                  	           		 
                  	           		 LEDS		EQU		0xFFDC0600
                  	           		 TEXTSCR		EQU		0xFFD00000
                  	           		 COLORSCR	EQU		0xFFD10000
                  	           		 TEXTREG		EQU		0xFFDA0000
                  	           		 TEXT_COLS	EQU		0x0
                  	           		 TEXT_ROWS	EQU		0x2
                  	           		 TEXT_CURPOS	EQU		0x16
                  	           		 
00000000	           		 		code
FFFFF800	           		 		org		0xFFFFF800
FFFFF800	           		 start
                  	           		 		; Initialize segment registers for "flat" addressing
FFFFF800	016F0101         		ldi		r1,#1
FFFFF804	5006DCFF00      
FFFFF809	0190000100       		sb		r1,LEDS
FFFFF80E	01A90020         		mtspr	seg0,r0
FFFFF812	01A90021         		mtspr	seg1,r0
FFFFF816	01A90022         		mtspr	seg2,r0
FFFFF81A	01A90023         		mtspr	seg3,r0
FFFFF81E	01A90024         		mtspr	seg4,r0
FFFFF822	01A90025         		mtspr	seg5,r0
FFFFF826	01A90026         		mtspr	seg6,r0
FFFFF82A	01A90027         		mtspr	seg7,r0
FFFFF82E	01A90028         		mtspr	seg8,r0
FFFFF832	01A90029         		mtspr	seg9,r0
FFFFF836	01A9002A         		mtspr	seg10,r0
FFFFF83A	01A9002B         		mtspr	seg11,r0
FFFFF83E	01A9002C         		mtspr	seg12,r0
FFFFF842	01A9002D         		mtspr	seg13,r0
FFFFF846	01A9002E         		mtspr	seg14,r0
FFFFF84A	01A9002F         		mtspr	seg15,r0
FFFFF84E	01F08800         		tlbwrreg DMA,r0				; clear TLB miss registers
FFFFF852	01F09800         		tlbwrreg IMA,r0
FFFFF856	016F0102         		ldi			r1,#2			; 2 wired registers
FFFFF85A	01F00801         		tlbwrreg	Wired,r1
FFFFF85E	016F0102         		ldi			r1,#$2			; 64kiB page size
FFFFF862	01F03801         		tlbwrreg	PageSize,r1
                  	           		 
                  	           		 		; setup the first translation
                  	           		 		; virtual page $FFFF0000 maps to physical page $FFFF0000
                  	           		 		; This places the BIOS ROM at $FFFFxxxx in the memory map
FFFFF866	5001008000      
FFFFF86B	016F0101         		ldi			r1,#$80000101	; ASID=zero, G=1,valid=1
FFFFF86F	01F07801         		tlbwrreg	ASID,r1
FFFFF873	30FF00          
FFFFF876	016F01FF         		ldi			r1,#$0FFFF
FFFFF87A	01F04801         		tlbwrreg	VirtPage,r1
FFFFF87E	01F05801         		tlbwrreg	PhysPage,r1
FFFFF882	01F01800         		tlbwrreg	Index,r0		; select way #0
FFFFF886	01F00400         		tlbwi						; write to TLB entry group #0 with hold registers
                  	           		 
                  	           		 		; setup second translation
                  	           		 		; virtual page 0 maps to physical page 0
FFFFF88A	5001008000      
FFFFF88F	016F0101         		ldi			r1,#$80000101	; ASID=zero, G=1,valid=1
FFFFF893	01F07801         		tlbwrreg	ASID,r1
FFFFF897	01F04800         		tlbwrreg	VirtPage,r0
FFFFF89B	01F05800         		tlbwrreg	PhysPage,r0
FFFFF89F	016F0108         		ldi			r1,#8			; select way#1
FFFFF8A3	01F01801         		tlbwrreg	Index,r1		
FFFFF8A7	01F00400         		tlbwi						; write to TLB entry group #0 with hold registers
                  	           		 
                  	           		 		; turn on the TLB
FFFFF8AB	01F00500         		tlben
                  	           		 
FFFFF8AF	01A9001C         		mtspr	br12,r0			; set vector table address
FFFFF8B3	50F9FFFF00      
FFFFF8B8	0184000150       		lh		r1,jirq			; setup jump to irqrout
FFFFF8BD	50F9FFFF00      
FFFFF8C2	0184000254       		lh		r2,jirq+4
FFFFF8C7	50F9FFFF00      
FFFFF8CC	0184000358       		lh		r3,jirq+8
FFFFF8D1	50F9FFFF00      
FFFFF8D6	018400045C       		lh		r4,jirq+12
FFFFF8DB	200F            
FFFFF8DD	01920001E0       		sh		r1,$fe0
FFFFF8E2	200F            
FFFFF8E4	01920002E4       		sh		r2,$fe4
FFFFF8E9	200F            
FFFFF8EB	01920003E8       		sh		r3,$fe8
FFFFF8F0	200F            
FFFFF8F2	01920004EC       		sh		r4,$fec
FFFFF8F7	01F8             		memsb					; force the stores to complete before an int occurs
FFFFF8F9	50F9FFFF00      
FFFFF8FE	016F0308         		ldi		r3,#st1			; set return address for an RTI
FFFFF902	01A9031E         		mtspr	br14,r3
FFFFF906	01F4             		rti						; RTI to enable interrupts
FFFFF908	           		 st1:
FFFFF908	10               		nop
FFFFF909	2004            
FFFFF90B	016F01D2         		ldi		r1,#1234
FFFFF90F	2016            
FFFFF911	016F022E         		ldi		r2,#5678
FFFFF915	201E            
FFFFF917	016F0361         		ldi		r3,#7777
FFFFF91B	2011            
FFFFF91D	016F045C         		ldi		r4,#4444
FFFFF921	2022            
FFFFF923	016F05B8         		ldi		r5,#8888
FFFFF927	2027            
FFFFF929	016F060F         		ldi		r6,#9999
FFFFF92D	0140020301       		add		r1,r2,r3
FFFFF932	0166040503       		nand	r3,r4,r5
FFFFF937	0166050604       		nand	r4,r5,r6
FFFFF93C	0140030401       		add		r1,r3,r4
FFFFF941	010101           		tst		p1,r1
FFFFF944	123015           p1.eq	br		foobar
FFFFF947	0140040501       		add		r1,r4,r5
FFFFF94C	10               		nop
FFFFF94D	10               		nop
FFFFF950	           		 		align	8
FFFFF94E	0000             		align	8
FFFFF950	           		 jirq:
FFFFF950	50F9FFFF00      
FFFFF955	01A20066         		jmp		irqrout
                  	           		 
FFFFF959	           		 foobar
FFFFF959	2004            
FFFFF95B	01483901D2       		addi	r1,r57,#1234
FFFFF960	2004            
FFFFF962	012101D1         		cmpi	p1,r1,#1233
                  	           		 
FFFFF966	           		 irqrout:
FFFFF966	01F4             		rti
                  	           		 		
                  	           		 ;------------------------------------------------------------------------------
                  	           		 ; Convert ASCII character to screen display character.
                  	           		 ;------------------------------------------------------------------------------
                  	           		 ;
FFFFF968	           		 AsciiToScreen:
FFFFF968	2000            
FFFFF96A	01530101FF       		andi	r1,r1,#0x00ff
FFFFF96F	01210141         		cmpi	p1,r1,#'A'
FFFFF973	1B301A           p1.ltu	br		atoscr1
FFFFF976	0121015A         		cmpi	p1,r1,#'Z'
FFFFF97A	183013           p1.leu	br		atoscr1
FFFFF97D	0121017A         		cmpi	p1,r1,#'z'
FFFFF981	19300C           p1.gtu	br		atoscr1
FFFFF984	01210161         		cmpi	p1,r1,#'a'
FFFFF988	1A4D010160       p1.geu	subui	r1,r1,#$60
FFFFF98D	           		 atoscr1:
FFFFF98D	2001            
FFFFF98F	0154010100       		ori		r1,r1,#0x100
FFFFF994	11               		rts
                  	           		 
                  	           		 ;------------------------------------------------------------------------------
                  	           		 ; Clear the screen and the screen color memory
                  	           		 ; We clear the screen to give a visual indication that the system
                  	           		 ; is working at all.
                  	           		 ;------------------------------------------------------------------------------
                  	           		 ;
FFFFF995	           		 ClearScreen:
FFFFF995	014DFFFF28       	subui	r255,r255,#40
FFFFF99A	0193FF0100       	sw		r1,[r255]
FFFFF99F	0193FF0208       	sw		r2,8[r255]
FFFFF9A4	0193FF0310       	sw		r3,16[r255]
FFFFF9A9	0193FF0418       	sw		r4,24[r255]
FFFFF9AE	01A81101         	mfspr	r1,br1
FFFFF9B2	0193FF0120       	sw		r1,32[r255]
FFFFF9B7	5000DAFF00      
FFFFF9BC	016F0300         	ldi		r3,#TEXTREG
FFFFF9C0	0182030100       	lc		r1,TEXT_COLS[r3]	; calc number to clear
FFFFF9C5	0182030202       	lc		r2,TEXT_ROWS[r3]
FFFFF9CA	0146010202       	mulu	r2,r1,r2			; r2 = # chars to clear
FFFFF9CF	01A90203         	mtspr	lc,r2
FFFFF9D3	016F0120         	ldi		r1,#32			; space char
FFFFF9D7	0182000400       	lc		r4,ScreenColor
FFFFF9DC	50F9FFFF00      
FFFFF9E1	01A20168         	jsr		AsciiToScreen
FFFFF9E5	5000D0FF00      
FFFFF9EA	016F0300         	ldi		r3,#TEXTSCR		; text screen address
FFFFF9EE	           		 csj4:
FFFFF9EE	0191030100       	sc		r1,[r3]
FFFFF9F3	300001          
FFFFF9F6	0191030400       	sc		r4,0x10000[r3]	; color screen is 0x10000 higher
FFFFF9FB	014C030302       	addui	r3,r3,#2
FFFFFA00	01A4EE           	loop	csj4
FFFFFA03	0186FF0120       	lw		r1,32[r255]
FFFFFA08	01A90111         	mtspr	br1,r1
FFFFFA0C	0186FF0418       	lw		r4,24[r255]
FFFFFA11	0186FF0310       	lw		r3,16[r255]
FFFFFA16	0186FF0208       	lw		r2,8[r255]
FFFFFA1B	0186FF0100       	lw		r1,[r255]
FFFFFA20	014CFFFF28       	addui	r255,r255,#40
FFFFFA25	11               	rts
                  	           		 
                  	           		 
FFFFFA26	124901010A       p1.eq	subi	r1,r1,#10
FFFFFFF0	           		 		org		0xFFFFFFF0
FFFFFFF0	50F8FFFF00      
FFFFFFF5	01A20000         		jmp		start
FFFFFFF9	10               		nop
FFFFFFFA	10               		nop
FFFFFFFB	10               		nop
                  	           		 
                  	           		 
 
 
Symbol Table:
============================================================
Name                   Typ  Segment     Scope Address/Value
------------------------------------------------------------
0CR                 	C	constant	      	000000000000000D
0LF                 	C	constant	      	000000000000000A
0TAB                	C	constant	      	0000000000000009
0CTRLC              	C	constant	      	0000000000000003
0CTRLH              	C	constant	      	0000000000000008
0CTRLI              	C	constant	      	0000000000000009
0CTRLJ              	C	constant	      	000000000000000A
0CTRLK              	C	constant	      	000000000000000B
0CTRLM              	C	constant	      	000000000000000D
0CTRLS              	C	constant	      	0000000000000013
0CTRLX              	C	constant	      	0000000000000018
0XON                	C	constant	      	0000000000000011
0XOFF               	C	constant	      	0000000000000013
0LEDS               	C	constant	      	00000000FFDC0600
0TEXTSCR            	C	constant	      	00000000FFD00000
0COLORSCR           	C	constant	      	00000000FFD10000
0TEXTREG            	C	constant	      	00000000FFDA0000
0TEXT_COLS          	C	constant	      	0000000000000000
0TEXT_ROWS          	C	constant	      	0000000000000002
0TEXT_CURPOS        	C	constant	      	0000000000000016
0start              	L	code    	  	00000000FFFFF800
0st1                	L	code    	  	00000000FFFFF908
0foobar             	L	code    	  	00000000FFFFF959
0jirq               	L	code    	  	00000000FFFFF950
0irqrout            	L	code    	  	00000000FFFFF966
0AsciiToScreen      	L	code    	  	00000000FFFFF968
0atoscr1            	L	code    	  	00000000FFFFF98D
0ClearScreen        	L	code    	  	00000000FFFFF995
0csj4               	L	code    	  	00000000FFFFF9EE
